{
    "programming": {
        "easy": [
            {
                "id": "p1",
                "category": "programming",
                "title": "K-tech Somali: Hello World",
                "description": "Write a program that prints 'Hello, World!' to the console.",
                "answer": "print('Hello, World!')",
                "hint": "Use the print() function to output text.",
                "points": 5,
                "explanation": "The print() function is used to output text to the console.",
                "key_points": "- Basic output\n- String literals\n- Print function"
            },
            {
                "id": "p2",
                "category": "programming",
                "title": "K-tech Somali: Variable Assignment",
                "description": "Create a variable named 'age' and assign it the value 25.",
                "answer": "age = 25",
                "hint": "Use the assignment operator (=) to give a value to a variable.",
                "points": 5,
                "explanation": "Variables store data that can be used later in the program.",
                "key_points": "- Variable declaration\n- Assignment operator\n- Integer values"
            },
            {
                "id": "p3",
                "category": "programming",
                "title": "Basic Addition",
                "description": "Add two numbers (5 and 3) and print the result.",
                "answer": "print(5 + 3)",
                "hint": "Use the + operator to add numbers together.",
                "points": 5,
                "explanation": "The + operator performs addition on numbers.",
                "key_points": "- Arithmetic operations\n- Print function\n- Basic math"
            },
            {
                "id": "p4",
                "category": "programming",
                "title": "String Creation",
                "description": "Create a string variable named 'name' with your name in it.",
                "answer": "name = 'John'",
                "hint": "Use quotes to create a string value.",
                "points": 5,
                "explanation": "Strings are created by enclosing text in quotes.",
                "key_points": "- String creation\n- Variable assignment\n- Text data"
            },
            {
                "id": "p5",
                "category": "programming",
                "title": "Basic Input",
                "description": "Get input from the user and store it in a variable called 'user_input'.",
                "answer": "user_input = input()",
                "hint": "Use the input() function to get user input.",
                "points": 5,
                "explanation": "The input() function reads a line of text from the user.",
                "key_points": "- User input\n- Variable assignment\n- Input function"
            },
            {
                "id": "p6",
                "category": "programming",
                "title": "Type Conversion",
                "description": "Convert the string '42' to an integer and store it in a variable.",
                "answer": "number = int('42')",
                "hint": "Use the int() function to convert a string to an integer.",
                "points": 5,
                "explanation": "Type conversion functions change data from one type to another.",
                "key_points": "- Type conversion\n- Integer function\n- String to number"
            },
            {
                "id": "p7",
                "category": "programming",
                "title": "Simple If Statement",
                "description": "Write an if statement that prints 'Yes' if x equals 10.",
                "answer": "x = 10\nif x == 10:\n    print('Yes')",
                "hint": "Use if and == for comparison.",
                "points": 5,
                "explanation": "If statements allow conditional execution of code.",
                "key_points": "- Conditional statements\n- Comparison operators\n- Code blocks"
            },
            {
                "id": "p8",
                "category": "programming",
                "title": "Basic Loop",
                "description": "Write a for loop that prints numbers from 1 to 5.",
                "answer": "for i in range(1, 6):\n    print(i)",
                "hint": "Use range() to create a sequence of numbers.",
                "points": 5,
                "explanation": "For loops iterate over a sequence of values.",
                "key_points": "- Loops\n- Range function\n- Iteration"
            },
            {
                "id": "p9",
                "category": "programming",
                "title": "List Creation",
                "description": "Create a list containing the numbers 1, 2, and 3.",
                "answer": "numbers = [1, 2, 3]",
                "hint": "Use square brackets to create a list.",
                "points": 5,
                "explanation": "Lists store multiple items in a single variable.",
                "key_points": "- List creation\n- Multiple values\n- Square brackets"
            },
            {
                "id": "p10",
                "category": "programming",
                "title": "List Indexing",
                "description": "Access the second element of the list [10, 20, 30, 40].",
                "answer": "numbers = [10, 20, 30, 40]\nprint(numbers[1])",
                "hint": "Remember that list indexing starts at 0.",
                "points": 5,
                "explanation": "List indices start at 0, so index 1 gives the second element.",
                "key_points": "- List indexing\n- Zero-based indexing\n- Accessing elements"
            },
            {
                "id": "p11",
                "category": "programming",
                "title": "Simple Function",
                "description": "Define a function named 'greet' that prints 'Hello!'.",
                "answer": "def greet():\n    print('Hello!')",
                "hint": "Use 'def' to define a function.",
                "points": 5,
                "explanation": "Functions are reusable blocks of code defined using def.",
                "key_points": "- Function definition\n- Code reuse\n- Basic syntax"
            },
            {
                "id": "p12",
                "category": "programming",
                "title": "Function with Parameter",
                "description": "Create a function that takes a name parameter and prints 'Hello, [name]!'.",
                "answer": "def greet(name):\n    print(f'Hello, {name}!')",
                "hint": "Use an f-string to include the parameter in the output.",
                "points": 5,
                "explanation": "Functions can take parameters to make them more flexible.",
                "key_points": "- Function parameters\n- F-strings\n- String formatting"
            },
            {
                "id": "p13",
                "category": "programming",
                "title": "Return Value",
                "description": "Write a function that returns the sum of two numbers.",
                "answer": "def add(a, b):\n    return a + b",
                "hint": "Use the return keyword to send back a value.",
                "points": 5,
                "explanation": "Functions can return values using the return statement.",
                "key_points": "- Return statement\n- Function output\n- Basic arithmetic"
            },
            {
                "id": "p14",
                "category": "programming",
                "title": "String Methods",
                "description": "Convert the string 'Python' to lowercase.",
                "answer": "text = 'Python'\nprint(text.lower())",
                "hint": "Use the lower() method for strings.",
                "points": 5,
                "explanation": "String methods manipulate text in various ways.",
                "key_points": "- String methods\n- Case conversion\n- Text manipulation"
            },
            {
                "id": "p15",
                "category": "programming",
                "title": "Basic Math Operations",
                "description": "Calculate the remainder when 17 is divided by 5.",
                "answer": "print(17 % 5)",
                "hint": "Use the modulo operator (%).",
                "points": 5,
                "explanation": "The modulo operator returns the remainder of division.",
                "key_points": "- Modulo operator\n- Division\n- Remainder calculation"
            },
            {
                "id": "p16",
                "category": "programming",
                "title": "String Slicing",
                "description": "Get the first three characters of the string 'Python'.",
                "answer": "text = 'Python'\nprint(text[:3])",
                "hint": "Use string slicing with a colon.",
                "points": 5,
                "explanation": "String slicing extracts parts of a string.",
                "key_points": "- String slicing\n- Substring extraction\n- Index ranges"
            },
            {
                "id": "p17",
                "category": "programming",
                "title": "List Append",
                "description": "Add the number 4 to the end of the list [1, 2, 3].",
                "answer": "numbers = [1, 2, 3]\nnumbers.append(4)",
                "hint": "Use the append() method to add items to a list.",
                "points": 5,
                "explanation": "The append() method adds an item to the end of a list.",
                "key_points": "- List methods\n- Adding elements\n- List modification"
            },
            {
                "id": "p18",
                "category": "programming",
                "title": "While Loop",
                "description": "Write a while loop that prints numbers from 1 to 5.",
                "answer": "i = 1\nwhile i <= 5:\n    print(i)\n    i += 1",
                "hint": "Use a counter variable and increment it in the loop.",
                "points": 5,
                "explanation": "While loops repeat while a condition is true.",
                "key_points": "- While loops\n- Counter variables\n- Increment operator"
            },
            {
                "id": "p19",
                "category": "programming",
                "title": "Simple Dictionary",
                "description": "Create a dictionary with 'name' as key and 'John' as value.",
                "answer": "person = {'name': 'John'}",
                "hint": "Use curly braces and key-value pairs.",
                "points": 5,
                "explanation": "Dictionaries store key-value pairs.",
                "key_points": "- Dictionary creation\n- Key-value pairs\n- Data structure"
            },
            {
                "id": "p20",
                "category": "programming",
                "title": "Dictionary Access",
                "description": "Access the value of the 'age' key in the dictionary {'age': 25}.",
                "answer": "person = {'age': 25}\nprint(person['age'])",
                "hint": "Use square brackets with the key name.",
                "points": 5,
                "explanation": "Dictionary values are accessed using their keys.",
                "key_points": "- Dictionary access\n- Key lookup\n- Value retrieval"
            },
            {
                "id": "p21",
                "category": "programming",
                "title": "String Length",
                "description": "Find the length of the string 'Programming'.",
                "answer": "text = 'Programming'\nprint(len(text))",
                "hint": "Use the len() function.",
                "points": 5,
                "explanation": "The len() function returns the number of characters in a string.",
                "key_points": "- String length\n- Built-in functions\n- Character counting"
            },
            {
                "id": "p22",
                "category": "programming",
                "title": "List Length",
                "description": "Find the number of items in the list [1, 2, 3, 4, 5].",
                "answer": "numbers = [1, 2, 3, 4, 5]\nprint(len(numbers))",
                "hint": "Use the len() function with the list.",
                "points": 5,
                "explanation": "The len() function works with lists to count items.",
                "key_points": "- List length\n- Built-in functions\n- Item counting"
            },
            {
                "id": "p23",
                "category": "programming",
                "title": "String Replace",
                "description": "Replace 'old' with 'new' in the string 'old text'.",
                "answer": "text = 'old text'\nprint(text.replace('old', 'new'))",
                "hint": "Use the replace() method.",
                "points": 5,
                "explanation": "The replace() method substitutes one substring with another.",
                "key_points": "- String methods\n- Text replacement\n- String manipulation"
            },
            {
                "id": "p24",
                "category": "programming",
                "title": "Multiple Print",
                "description": "Print the numbers 1, 2, 3 on the same line separated by spaces.",
                "answer": "print(1, 2, 3)",
                "hint": "Use commas between values in print().",
                "points": 5,
                "explanation": "Print can take multiple arguments separated by commas.",
                "key_points": "- Print function\n- Multiple arguments\n- Space separation"
            },
            {
                "id": "p25",
                "category": "programming",
                "title": "String Find",
                "description": "Find the position of 'Python' in the string 'Hello Python World'.",
                "answer": "text = 'Hello Python World'\nprint(text.find('Python'))",
                "hint": "Use the find() method.",
                "points": 5,
                "explanation": "The find() method returns the index where the substring starts.",
                "key_points": "- String methods\n- Substring search\n- Index finding"
            },
            {
                "id": "p26",
                "category": "programming",
                "title": "String Split",
                "description": "Split the string 'red,green,blue' into a list using comma as separator.",
                "answer": "colors = 'red,green,blue'\nprint(colors.split(','))",
                "hint": "Use the split() method with a comma separator.",
                "points": 5,
                "explanation": "The split() method divides a string into a list of substrings.",
                "key_points": "- String splitting\n- List creation\n- String to list"
            },
            {
                "id": "p27",
                "category": "programming",
                "title": "List Join",
                "description": "Join the list ['a', 'b', 'c'] into a string with dashes between elements.",
                "answer": "letters = ['a', 'b', 'c']\nprint('-'.join(letters))",
                "hint": "Use the join() method with a dash separator.",
                "points": 5,
                "explanation": "The join() method combines list elements into a string.",
                "key_points": "- List joining\n- String creation\n- List to string"
            },
            {
                "id": "p28",
                "category": "programming",
                "title": "String Strip",
                "description": "Remove whitespace from both ends of the string ' Python '.",
                "answer": "text = ' Python '\nprint(text.strip())",
                "hint": "Use the strip() method.",
                "points": 5,
                "explanation": "The strip() method removes leading and trailing whitespace.",
                "key_points": "- String methods\n- Whitespace removal\n- String cleaning"
            },
            {
                "id": "p29",
                "category": "programming",
                "title": "List Sort",
                "description": "Sort the list [3, 1, 4, 1, 5] in ascending order.",
                "answer": "numbers = [3, 1, 4, 1, 5]\nnumbers.sort()\nprint(numbers)",
                "hint": "Use the sort() method.",
                "points": 5,
                "explanation": "The sort() method arranges list elements in ascending order.",
                "key_points": "- List sorting\n- In-place modification\n- Ascending order"
            },
            {
                "id": "p30",
                "category": "programming",
                "title": "List Reverse",
                "description": "Reverse the order of elements in the list [1, 2, 3].",
                "answer": "numbers = [1, 2, 3]\nnumbers.reverse()\nprint(numbers)",
                "hint": "Use the reverse() method.",
                "points": 5,
                "explanation": "The reverse() method reverses the order of list elements.",
                "key_points": "- List methods\n- Order reversal\n- In-place modification"
            },
            {
                "id": "p31",
                "category": "programming",
                "title": "String Count",
                "description": "Count how many times 'a' appears in 'banana'.",
                "answer": "text = 'banana'\nprint(text.count('a'))",
                "hint": "Use the count() method.",
                "points": 5,
                "explanation": "The count() method counts occurrences of a substring.",
                "key_points": "- String methods\n- Character counting\n- Substring search"
            },
            {
                "id": "p32",
                "category": "programming",
                "title": "List Count",
                "description": "Count how many times 2 appears in [1, 2, 2, 3, 2].",
                "answer": "numbers = [1, 2, 2, 3, 2]\nprint(numbers.count(2))",
                "hint": "Use the count() method on the list.",
                "points": 5,
                "explanation": "The count() method counts occurrences of an item in a list.",
                "key_points": "- List methods\n- Element counting\n- Value search"
            },
            {
                "id": "p33",
                "category": "programming",
                "title": "String Format",
                "description": "Format a string that says 'Hello, name!' using an f-string.",
                "answer": "name = 'John'\nprint(f'Hello, {name}!')",
                "hint": "Use an f-string with curly braces.",
                "points": 5,
                "explanation": "F-strings allow embedding expressions inside string literals.",
                "key_points": "- F-strings\n- String formatting\n- Variable interpolation"
            },
            {
                "id": "p34",
                "category": "programming",
                "title": "Type Checking",
                "description": "Check if the variable x = 5 is an integer using isinstance().",
                "answer": "x = 5\nprint(isinstance(x, int))",
                "hint": "Use isinstance() with the int type.",
                "points": 5,
                "explanation": "isinstance() checks if an object is of a specified type.",
                "key_points": "- Type checking\n- Built-in functions\n- Data types"
            },
            {
                "id": "p35",
                "category": "programming",
                "title": "Boolean Operations",
                "description": "Check if both 5 > 3 and 10 < 20 are True.",
                "answer": "print(5 > 3 and 10 < 20)",
                "hint": "Use the and operator to combine conditions.",
                "points": 5,
                "explanation": "The and operator returns True if both conditions are True.",
                "key_points": "- Boolean operations\n- Logical operators\n- Conditions"
            },
            {
                "id": "p36",
                "category": "programming",
                "title": "Math Functions",
                "description": "Calculate the absolute value of -5.",
                "answer": "print(abs(-5))",
                "hint": "Use the abs() function.",
                "points": 5,
                "explanation": "The abs() function returns the absolute value of a number.",
                "key_points": "- Math functions\n- Absolute value\n- Built-in functions"
            },
            {
                "id": "p37",
                "category": "programming",
                "title": "Random Numbers",
                "description": "Generate a random number between 1 and 10.",
                "answer": "import random\nprint(random.randint(1, 10))",
                "hint": "Use random.randint() from the random module.",
                "points": 5,
                "explanation": "random.randint() generates random integers in a range.",
                "key_points": "- Random module\n- Number generation\n- Range specification"
            },
            {
                "id": "p38",
                "category": "programming",
                "title": "Round Numbers",
                "description": "Round 3.7 to the nearest integer.",
                "answer": "print(round(3.7))",
                "hint": "Use the round() function.",
                "points": 5,
                "explanation": "The round() function rounds a number to the nearest integer.",
                "key_points": "- Math functions\n- Rounding\n- Built-in functions"
            },
            {
                "id": "p39",
                "category": "programming",
                "title": "Absolute Value",
                "description": "Find the absolute value of -10.",
                "answer": "print(abs(-10))",
                "hint": "Use the abs() function.",
                "points": 5,
                "explanation": "The abs() function returns the positive value of a number.",
                "key_points": "- Math functions\n- Absolute value\n- Positive numbers"
            },
            {
                "id": "p40",
                "category": "programming",
                "title": "Power Operation",
                "description": "Calculate 2 raised to the power of 3.",
                "answer": "print(2 ** 3)",
                "hint": "Use the ** operator for exponentiation.",
                "points": 5,
                "explanation": "The ** operator raises a number to a power.",
                "key_points": "- Math operations\n- Exponentiation\n- Power calculation"
            },
            {
                "id": "p41",
                "category": "programming",
                "title": "Floor Division",
                "description": "Perform floor division of 7 by 2.",
                "answer": "print(7 // 2)",
                "hint": "Use the // operator for floor division.",
                "points": 5,
                "explanation": "Floor division returns the largest integer less than or equal to the result.",
                "key_points": "- Division operations\n- Integer division\n- Floor division"
            },
            {
                "id": "p42",
                "category": "programming",
                "title": "String Case",
                "description": "Check if the string 'Python' is uppercase.",
                "answer": "text = 'Python'\nprint(text.isupper())",
                "hint": "Use the isupper() method.",
                "points": 5,
                "explanation": "The isupper() method checks if all characters are uppercase.",
                "key_points": "- String methods\n- Case checking\n- Boolean return"
            },
            {
                "id": "p43",
                "category": "programming",
                "title": "List Maximum",
                "description": "Find the largest number in the list [1, 5, 3, 9, 2].",
                "answer": "numbers = [1, 5, 3, 9, 2]\nprint(max(numbers))",
                "hint": "Use the max() function.",
                "points": 5,
                "explanation": "The max() function returns the largest item in an iterable.",
                "key_points": "- Built-in functions\n- List operations\n- Maximum value"
            },
            {
                "id": "p44",
                "category": "programming",
                "title": "List Minimum",
                "description": "Find the smallest number in the list [4, 2, 7, 1, 9].",
                "answer": "numbers = [4, 2, 7, 1, 9]\nprint(min(numbers))",
                "hint": "Use the min() function.",
                "points": 5,
                "explanation": "The min() function returns the smallest item in an iterable.",
                "key_points": "- Built-in functions\n- List operations\n- Minimum value"
            },
            {
                "id": "p45",
                "category": "programming",
                "title": "String Repetition",
                "description": "Repeat the string 'Ha' three times.",
                "answer": "print('Ha' * 3)",
                "hint": "Use the * operator with a string.",
                "points": 5,
                "explanation": "The * operator can repeat a string a specified number of times.",
                "key_points": "- String operations\n- Repetition\n- Multiplication operator"
            },
            {
                "id": "p46",
                "category": "programming",
                "title": "List Sum",
                "description": "Calculate and print the sum of all numbers in the list [1, 2, 3, 4, 5] using the sum() function.",
                "answer": "numbers = [1, 2, 3, 4, 5]\nprint(sum(numbers))",
                "hint": "Use the sum() function with a list of numbers.",
                "points": 5,
                "explanation": "The sum() function adds up all the numbers in an iterable.",
                "key_points": "- List operations\n- Built-in functions\n- Number summation"
            },
            {
                "id": "p47",
                "category": "programming",
                "title": "String Concatenation",
                "description": "Create two variables 'first_name' and 'last_name' with your names, then concatenate them with a space in between to create a full name.",
                "answer": "first_name = 'John'\nlast_name = 'Doe'\nfull_name = first_name + ' ' + last_name\nprint(full_name)",
                "hint": "Use the + operator to join strings and add a space between the names.",
                "points": 5,
                "explanation": "String concatenation allows you to combine multiple strings into one.",
                "key_points": "- String operations\n- Variable assignment\n- String concatenation"
            },
            {
                "id": "p48",
                "category": "programming",
                "title": "Even Number Check",
                "description": "Write a program that checks if a number is even. Use the number 8 and print 'Even' if it is even.",
                "answer": "number = 8\nif number % 2 == 0:\n    print('Even')",
                "hint": "Use the modulo operator (%) to check if a number is divisible by 2.",
                "points": 5,
                "explanation": "The modulo operator returns the remainder of division. If a number divided by 2 has no remainder, it's even.",
                "key_points": "- Conditional statements\n- Modulo operator\n- Number properties"
            },
            {
                "id": "p49",
                "category": "programming",
                "title": "List Element Count",
                "description": "Count how many times the number 3 appears in the list [1, 2, 3, 3, 4, 3, 5] using the count() method.",
                "answer": "numbers = [1, 2, 3, 3, 4, 3, 5]\nprint(numbers.count(3))",
                "hint": "Use the count() method on the list to find occurrences of a specific value.",
                "points": 5,
                "explanation": "The count() method returns the number of times a specified value appears in a list.",
                "key_points": "- List methods\n- Element counting\n- List operations"
            },
            {
                "id": "p50",
                "category": "programming",
                "title": "String Uppercase",
                "description": "Convert the string 'hello world' to uppercase using a string method.",
                "answer": "text = 'hello world'\nprint(text.upper())",
                "hint": "Use the upper() method to convert a string to uppercase.",
                "points": 5,
                "explanation": "The upper() method returns a copy of the string with all characters in uppercase.",
                "key_points": "- String methods\n- Case conversion\n- String manipulation"
            }
        ],
        "medium": [
            {
                "id": "pm1",
                "category": "programming",
                "title": "K-tech Somali: List Comprehension",
                "description": "Create a list of squares for numbers 1 to 5 using list comprehension.",
                "answer": "squares = [x**2 for x in range(1, 6)]",
                "hint": "Use the square operator (**) within a list comprehension.",
                "points": 10,
                "explanation": "List comprehensions provide a concise way to create lists based on existing sequences.",
                "key_points": "- List comprehension\n- Square numbers\n- Range function\n- Concise syntax"
            },
            {
                "id": "pm2",
                "category": "programming",
                "title": "K-tech Somali: Dictionary Comprehension",
                "description": "Create a dictionary where keys are numbers 1-5 and values are their cubes using dictionary comprehension.",
                "answer": "cubes = {x: x**3 for x in range(1, 6)}\nprint(cubes)",
                "hint": "Use {key: value for item in iterable} syntax",
                "points": 10,
                "explanation": "Dictionary comprehension creates dictionaries using a compact syntax similar to list comprehension.",
                "key_points": "- Dictionary comprehension\n- Cube calculation\n- Key-value mapping"
            },
            {
                "id": "pm3",
                "category": "programming",
                "title": "K-tech Somali: Lambda Function",
                "description": "Create a lambda function that takes two parameters and returns their product.",
                "answer": "multiply = lambda x, y: x * y\nprint(multiply(4, 5))",
                "hint": "Use lambda keyword with parameters and expression",
                "points": 10,
                "explanation": "Lambda functions are small anonymous functions defined using the lambda keyword.",
                "key_points": "- Lambda functions\n- Anonymous functions\n- Function expressions"
            },
            {
                "id": "pm4",
                "category": "programming",
                "title": "K-tech Somali: List Filter",
                "description": "Use filter() and a lambda function to get only even numbers from the list [1, 2, 3, 4, 5, 6].",
                "answer": "numbers = [1, 2, 3, 4, 5, 6]\neven = list(filter(lambda x: x % 2 == 0, numbers))\nprint(even)",
                "hint": "Use filter() with a lambda that checks if number is even",
                "points": 10,
                "explanation": "filter() creates an iterator of elements that satisfy a given condition.",
                "key_points": "- Filter function\n- Lambda functions\n- Even numbers"
            },
            {
                "id": "pm5",
                "category": "programming",
                "title": "K-tech Somali: Map Function",
                "description": "Use map() to convert all strings to uppercase in the list ['hello', 'world', 'python'].",
                "answer": "words = ['hello', 'world', 'python']\nupper_words = list(map(str.upper, words))\nprint(upper_words)",
                "hint": "Use map() with str.upper method",
                "points": 10,
                "explanation": "map() applies a given function to all items in an input list.",
                "key_points": "- Map function\n- String methods\n- List transformation"
            },
            {
                "id": "pm6",
                "category": "programming",
                "title": "K-tech Somali: Set Operations",
                "description": "Create two sets: set1 containing [1, 2, 3, 4] and set2 containing [3, 4, 5, 6]. Then find and print their intersection and union.",
                "answer": "set1 = {1, 2, 3, 4}\nset2 = {3, 4, 5, 6}\nprint(f'Intersection: {set1 & set2}')\nprint(f'Union: {set1 | set2}')",
                "hint": "Use & for intersection and | for union of sets",
                "points": 10,
                "explanation": "Sets in Python support mathematical operations like intersection (&) and union (|) to find common elements or combine unique elements.",
                "key_points": "- Set operations\n- Mathematical operations\n- Data structures"
            },
            {
                "id": "pm7",
                "category": "programming",
                "title": "K-tech Somali: List Sorting with Key",
                "description": "Sort a list of dictionaries based on the 'age' key: [{'name': 'Ali', 'age': 25}, {'name': 'Omar', 'age': 20}, {'name': 'Farah', 'age': 22}]",
                "answer": "people = [{'name': 'Ali', 'age': 25}, {'name': 'Omar', 'age': 20}, {'name': 'Farah', 'age': 22}]\nsorted_people = sorted(people, key=lambda x: x['age'])\nprint(sorted_people)",
                "hint": "Use sorted() with a lambda function as the key parameter",
                "points": 10,
                "explanation": "The sorted() function can take a key function that specifies how to sort the items. The lambda function extracts the 'age' value from each dictionary for comparison.",
                "key_points": "- Sorting with keys\n- Lambda functions\n- Dictionary operations"
            },
            {
                "id": "pm8",
                "category": "programming",
                "title": "K-tech Somali: Generator Function",
                "description": "Use enumerate to create a dictionary where keys are indices and values are the squares of indices for the first 5 numbers.",
                "answer": "squares_dict = {i: i**2 for i, _ in enumerate(range(5))}\nprint(squares_dict)",
                "hint": "Combine enumerate with dictionary comprehension",
                "points": 10,
                "explanation": "enumerate() provides both the index and value in iterations, useful for creating indexed collections.",
                "key_points": "- enumerate function\n- Dictionary comprehension\n- Index-value pairs"
            },
            {
                "id": "pm9",
                "category": "programming",
                "title": "K-tech Somali: JavaScript Array Methods",
                "description": "Using JavaScript, create a function that takes an array of numbers and returns a new array with each number doubled and only even results. Example input: [1, 2, 3, 4, 5]",
                "answer": "function processArray(arr) {\n    return arr\n        .map(num => num * 2)\n        .filter(num => num % 2 === 0);\n}\nconsole.log(processArray([1, 2, 3, 4, 5]));",
                "hint": "Use map() to double numbers and filter() for even numbers",
                "points": 10,
                "explanation": "JavaScript's array methods can be chained. map() transforms each element, and filter() selects elements based on a condition.",
                "key_points": "- JavaScript arrays\n- Array methods\n- Method chaining"
            },
            {
                "id": "pm10",
                "category": "programming",
                "title": "K-tech Somali: Java ArrayList",
                "description": "Create a Java ArrayList of integers, add numbers 1 to 5, then remove all odd numbers using removeIf().",
                "answer": "import java.util.ArrayList;\n\nArrayList<Integer> numbers = new ArrayList<>();\nfor (int i = 1; i <= 5; i++) {\n    numbers.add(i);\n}\nnumbers.removeIf(n -> n % 2 != 0);\nSystem.out.println(numbers);",
                "hint": "Use ArrayList methods and lambda expression with removeIf",
                "points": 10,
                "explanation": "Java's ArrayList provides dynamic array functionality, and removeIf() allows removing elements based on a predicate.",
                "key_points": "- Java ArrayList\n- Lambda expressions\n- Collection methods"
            },
            {
                "id": "pm11",
                "category": "programming",
                "title": "K-tech Somali: C++ Vector Operations",
                "description": "Write a C++ program that creates a vector of integers 1-5, uses an iterator to double each element, then prints the modified vector.",
                "answer": "#include <vector>\n#include <iostream>\n\nstd::vector<int> nums {1, 2, 3, 4, 5};\nfor (auto it = nums.begin(); it != nums.end(); ++it) {\n    *it *= 2;\n}\nfor (const auto& num : nums) {\n    std::cout << num << ' ';\n}",
                "hint": "Use vector iterators and range-based for loop",
                "points": 10,
                "explanation": "C++ vectors provide dynamic arrays with iterator support for element manipulation.",
                "key_points": "- C++ vectors\n- Iterators\n- Range-based loops"
            },
            {
                "id": "pm12",
                "category": "programming",
                "title": "K-tech Somali: JavaScript Promise",
                "description": "Create a JavaScript Promise that resolves after 2 seconds with the message 'Hello' and handle it with async/await.",
                "answer": "async function greet() {\n    const message = await new Promise(resolve => {\n        setTimeout(() => resolve('Hello'), 2000);\n    });\n    console.log(message);\n}\ngreet();",
                "hint": "Use Promise constructor with setTimeout and async/await",
                "points": 10,
                "explanation": "Promises handle asynchronous operations in JavaScript, and async/await provides cleaner syntax for working with promises.",
                "key_points": "- Promises\n- Async/await\n- setTimeout"
            },
            {
                "id": "pm13",
                "category": "programming",
                "title": "K-tech Somali: Java Stream API",
                "description": "Use Java Stream API to filter an array of strings to get only those starting with 'a' and convert them to uppercase.",
                "answer": "import java.util.Arrays;\n\nString[] words = {\"apple\", \"banana\", \"avocado\", \"cherry\"};\nString[] result = Arrays.stream(words)\n    .filter(s -> s.startsWith(\"a\"))\n    .map(String::toUpperCase)\n    .toArray(String[]::new);\nSystem.out.println(Arrays.toString(result));",
                "hint": "Use stream(), filter(), and map() methods",
                "points": 10,
                "explanation": "Java Stream API provides functional-style operations on streams of elements, like filtering and mapping.",
                "key_points": "- Stream API\n- Lambda expressions\n- Method references"
            },
            {
                "id": "pm14",
                "category": "programming",
                "title": "K-tech Somali: C# LINQ Query",
                "description": "Write a C# LINQ query to find all numbers greater than 5 from a list of integers [3, 7, 1, 9, 4, 6].",
                "answer": "using System.Linq;\n\nvar numbers = new List<int> { 3, 7, 1, 9, 4, 6 };\nvar result = numbers.Where(n => n > 5).ToList();\nforeach (var num in result) {\n    Console.WriteLine(num);\n}",
                "hint": "Use LINQ Where method with lambda expression",
                "points": 10,
                "explanation": "LINQ provides a unified way to query different types of data in C#.",
                "key_points": "- LINQ\n- Lambda expressions\n- Collection filtering"
            },
            {
                "id": "pm15",
                "category": "programming",
                "title": "K-tech Somali: TypeScript Interface",
                "description": "Create a TypeScript interface for a Person with name and age properties, then create a function that accepts this interface as a parameter.",
                "answer": "interface Person {\n    name: string;\n    age: number;\n}\n\nfunction greetPerson(person: Person): string {\n    return `Hello, ${person.name}! You are ${person.age} years old.`;\n}\n\nconst person: Person = { name: 'Ali', age: 25 };\nconsole.log(greetPerson(person));",
                "hint": "Define interface with required properties and use it in function parameter",
                "points": 10,
                "explanation": "TypeScript interfaces define contracts in your code and provide explicit type checking.",
                "key_points": "- TypeScript\n- Interfaces\n- Type checking"
            },
            {
                "id": "pm16",
                "category": "programming",
                "title": "K-tech Somali: JavaScript Array Methods",
                "description": "Using JavaScript, write a function that takes an array of numbers and returns a new array containing only the even numbers, sorted in ascending order.\n\nExample input: [5, 2, 8, 1, 4]\nExpected output: [2, 4, 8]",
                "answer": "function filterAndSortEven(numbers) {\n  return numbers\n    .filter(num => num % 2 === 0)\n    .sort((a, b) => a - b);\n}",
                "hint": "Use filter() to get even numbers and sort() for ordering",
                "points": 10,
                "explanation": "This solution combines two array methods: filter() to select even numbers and sort() to arrange them. The arrow function in filter checks if a number is even using the modulo operator.",
                "key_points": "- JavaScript array methods\n- Arrow functions\n- Chaining methods\n- Sorting algorithms"
            },
            {
                "id": "pm17",
                "category": "programming",
                "title": "K-tech Somali: Java ArrayList Operations",
                "description": "Create a Java method that removes all duplicate elements from an ArrayList while preserving the original order of first occurrence.\n\nExample input: [1, 3, 5, 3, 7, 1, 9, 3]\nExpected output: [1, 3, 5, 7, 9]",
                "answer": "public static ArrayList<Integer> removeDuplicates(ArrayList<Integer> list) {\n    return new ArrayList<>(new LinkedHashSet<>(list));\n}",
                "hint": "Use LinkedHashSet to maintain order while removing duplicates",
                "points": 10,
                "explanation": "LinkedHashSet maintains insertion order while automatically removing duplicates. Converting the ArrayList to a LinkedHashSet and back removes duplicates while preserving the order of first appearance.",
                "key_points": "- Java Collections\n- LinkedHashSet\n- ArrayList\n- Order preservation"
            },
            {
                "id": "pm18",
                "category": "programming",
                "title": "K-tech Somali: C++ Vector Operations",
                "description": "Write a C++ function that rotates a vector of integers to the right by k positions.\n\nExample:\nInput vector: {1, 2, 3, 4, 5}, k = 2\nOutput: {4, 5, 1, 2, 3}",
                "answer": "void rotateVector(vector<int>& nums, int k) {\n    k %= nums.size();\n    reverse(nums.begin(), nums.end());\n    reverse(nums.begin(), nums.begin() + k);\n    reverse(nums.begin() + k, nums.end());\n}",
                "hint": "Use the reverse algorithm three times",
                "points": 10,
                "explanation": "This solution uses the reverse algorithm to rotate the vector. First reverse the entire vector, then reverse the first k elements, and finally reverse the remaining elements.",
                "key_points": "- C++ STL algorithms\n- Vector manipulation\n- In-place operations\n- Time complexity"
            },
            {
                "id": "pm19",
                "category": "programming",
                "title": "K-tech Somali: JavaScript Promise Chain",
                "description": "Create a Promise chain that fetches a user's data, then their posts, and finally their comments. Handle potential errors appropriately.\n\nExample structure:\ngetUser(id) → getUserPosts(user) → getPostComments(posts)",
                "answer": "function fetchUserData(userId) {\n  return getUser(userId)\n    .then(user => getUserPosts(user))\n    .then(posts => getPostComments(posts))\n    .catch(error => console.error('Error:', error));\n}",
                "hint": "Use .then() for success cases and .catch() for error handling",
                "points": 10,
                "explanation": "This demonstrates Promise chaining in JavaScript, where each .then() handles the successful result of the previous Promise and passes data to the next operation.",
                "key_points": "- Promise chaining\n- Error handling\n- Asynchronous operations\n- Data flow"
            },
            {
                "id": "pm20",
                "category": "programming",
                "title": "K-tech Somali: Java Stream API",
                "description": "Using Java's Stream API, write a method that takes a list of strings and returns a map where the keys are the string lengths and the values are lists of strings of that length.\n\nExample input: ['cat', 'dog', 'bird', 'elephant', 'ant']\nExpected output: {3: ['cat', 'dog', 'ant'], 4: ['bird'], 8: ['elephant']}",
                "answer": "public Map<Integer, List<String>> groupByLength(List<String> words) {\n    return words.stream()\n        .collect(Collectors.groupingBy(\n            String::length\n        ));\n}",
                "hint": "Use Collectors.groupingBy with String::length",
                "points": 10,
                "explanation": "This solution uses Java's Stream API with the groupingBy collector to create a map where strings are grouped by their lengths. The method reference String::length is used as the classification function.",
                "key_points": "- Stream API\n- Collectors\n- Method references\n- Map operations"
            },
            {
                "id": "pm21",
                "category": "programming",
                "title": "K-tech Somali: C# LINQ Query",
                "description": "Write a C# LINQ query that groups a list of products by category and returns the average price for each category.\n\nExample data structure:\nclass Product { public string Category; public decimal Price; }",
                "answer": "var averagePrices = products\n    .GroupBy(p => p.Category)\n    .Select(g => new {\n        Category = g.Key,\n        AveragePrice = g.Average(p => p.Price)\n    });",
                "hint": "Use GroupBy followed by Select with Average",
                "points": 10,
                "explanation": "This LINQ query groups products by their category and calculates the average price for each group using the Average aggregate function.",
                "key_points": "- LINQ\n- GroupBy operations\n- Anonymous types\n- Aggregate functions"
            },
            {
                "id": "pm22",
                "category": "programming",
                "title": "K-tech Somali: TypeScript Interface",
                "description": "Create a TypeScript interface for a User type with optional fields and implement a function that merges two partial user objects.\n\nThe User should have: id (required), name (required), email (optional), and age (optional).",
                "answer": "interface User {\n  id: number;\n  name: string;\n  email?: string;\n  age?: number;\n}\n\nfunction mergeUsers(user1: Partial<User>, user2: Partial<User>): User {\n  return {\n    ...user1,\n    ...user2\n  } as User;\n}",
                "hint": "Use the Partial utility type and spread operator",
                "points": 10,
                "explanation": "This solution demonstrates TypeScript's interface definition with optional properties (marked by ?) and the Partial utility type for flexible object merging.",
                "key_points": "- TypeScript interfaces\n- Optional properties\n- Utility types\n- Object spreading"
            },
            {
                "id": "pm23",
                "category": "programming",
                "title": "K-tech Somali: Ruby Array Methods",
                "description": "Write a Ruby method that takes an array of strings and returns a hash where the keys are the strings and the values are arrays of all strings that are anagrams of that key.\n\nExample input: ['cat', 'dog', 'tac', 'god', 'act']\nExpected output: {'cat' => ['cat', 'tac', 'act'], 'dog' => ['dog', 'god']}",
                "answer": "def group_anagrams(words)\n  words.group_by { |word| word.chars.sort.join }\n       .transform_values { |anagrams| anagrams.sort }\n end",
                "hint": "Sort the characters of each word to find anagrams",
                "points": 10,
                "explanation": "This Ruby method uses group_by to cluster words by their sorted characters (anagram signature) and transform_values to sort each group.",
                "key_points": "- Ruby enumerable methods\n- Hash operations\n- String manipulation\n- Sorting"
            },
            {
                "id": "pm24",
                "category": "programming",
                "title": "K-tech Somali: Go Goroutine",
                "description": "Write a Go function that uses goroutines and channels to calculate the sum of squares of numbers concurrently.\n\nExample input: []int{1, 2, 3, 4, 5}\nExpected output: 55 (1² + 2² + 3² + 4² + 5²)",
                "answer": "func sumOfSquares(numbers []int) int {\n    ch := make(chan int)\n    for _, n := range numbers {\n        go func(num int) {\n            ch <- num * num\n        }(n)\n    }\n    sum := 0\n    for range numbers {\n        sum += <-ch\n    }\n    return sum\n}",
                "hint": "Use a channel to collect results from goroutines",
                "points": 10,
                "explanation": "This Go function demonstrates concurrent programming by spawning a goroutine for each number to calculate its square, using a channel to collect and sum the results.",
                "key_points": "- Goroutines\n- Channels\n- Concurrent programming\n- Anonymous functions"
            },
            {
                "id": "pm25",
                "category": "programming",
                "title": "K-tech Somali: Rust Vector Methods",
                "description": "Implement a Rust function that takes a vector of integers and returns a new vector containing running sums at each position.\n\nExample input: vec![1, 2, 3, 4]\nExpected output: vec![1, 3, 6, 10]",
                "answer": "fn running_sum(nums: Vec<i32>) -> Vec<i32> {\n    nums.iter()\n        .scan(0, |sum, &num| {\n            *sum += num;\n            Some(*sum)\n        })\n        .collect()\n}",
                "hint": "Use scan to maintain a running sum",
                "points": 10,
                "explanation": "This Rust function uses the scan iterator adapter to maintain a running sum, transforming each element into its cumulative sum position.",
                "key_points": "- Rust iterators\n- Vector operations\n- Functional programming\n- Memory safety"
            },
            {
                "id": "pm26",
                "category": "programming",
                "title": "K-tech Somali: PHP Array Functions",
                "description": "Write a PHP function that takes an array of student grades and calculates the average grade, excluding the lowest grade.\n\nExample input: [85, 92, 78, 90, 88]\nExpected output: 88.75 (average of [85, 92, 90, 88])",
                "answer": "function calculateAverageGrade($grades) {\n    if (count($grades) <= 1) return 0;\n    $min = min($grades);\n    return array_sum(array_filter($grades, fn($grade) => $grade != $min)) / (count($grades) - 1);\n}",
                "hint": "Use array_filter to exclude lowest grade and array_sum for total",
                "points": 10,
                "explanation": "This solution demonstrates PHP's array functions and arrow functions to process numerical data.",
                "key_points": "- PHP array functions\n- Arrow functions\n- Numerical calculations\n- Array filtering"
            },
            {
                "id": "pm27",
                "category": "programming",
                "title": "K-tech Somali: Swift Optional Binding",
                "description": "Create a Swift function that safely unwraps an optional String, converts it to an integer, doubles it, and returns the result as an optional.\n\nExample input: '42'\nExpected output: Optional(84)",
                "answer": "func processNumber(_ input: String?) -> Int? {\n    guard let str = input,\n          let number = Int(str) else {\n        return nil\n    }\n    return number * 2\n}",
                "hint": "Use guard let for safe optional unwrapping",
                "points": 10,
                "explanation": "This demonstrates Swift's optional binding and safe type conversion with guard statements.",
                "key_points": "- Optional binding\n- Guard statements\n- Type conversion\n- Safe unwrapping"
            },
            {
                "id": "pm28",
                "category": "programming",
                "title": "K-tech Somali: Kotlin Collections",
                "description": "Write a Kotlin function that groups strings by their length and returns a map of lengths to lists of strings.\n\nExample input: ['a', 'ab', 'abc', 'cd', 'def']\nExpected output: {1: ['a'], 2: ['ab', 'cd'], 3: ['abc', 'def']}",
                "answer": "fun groupByLength(words: List<String>): Map<Int, List<String>> =\n    words.groupBy { it.length }",
                "hint": "Use groupBy with string length as key",
                "points": 10,
                "explanation": "This showcases Kotlin's concise syntax and powerful collection operations with groupBy.",
                "key_points": "- Kotlin collections\n- GroupBy operation\n- Functional style\n- Map creation"
            },
            {
                "id": "pm29",
                "category": "programming",
                "title": "K-tech Somali: Scala Pattern Matching",
                "description": "Create a Scala function that uses pattern matching to classify numbers as 'Zero', 'Positive', or 'Negative'.\n\nExample inputs: 0, 5, -3\nExpected outputs: 'Zero', 'Positive', 'Negative'",
                "answer": "def classifyNumber(num: Int): String = num match {\n  case 0 => \"Zero\"\n  case n if n > 0 => \"Positive\"\n  case _ => \"Negative\"\n}",
                "hint": "Use pattern matching with guards",
                "points": 10,
                "explanation": "This demonstrates Scala's pattern matching with case statements and guards for number classification.",
                "key_points": "- Pattern matching\n- Case statements\n- Guard conditions\n- String return"
            },
            {
                "id": "pm30",
                "category": "programming",
                "title": "K-tech Somali: R Data Frame",
                "description": "Create an R function that takes a data frame of student records (name, age, score) and returns the mean score for students older than 20.\n\nExample input: data.frame(name=c('A','B','C'), age=c(19,21,22), score=c(85,90,88))",
                "answer": "calculate_mean_score <- function(df) {\n  mean(df$score[df$age > 20])\n}",
                "hint": "Use vector subsetting with logical condition",
                "points": 10,
                "explanation": "This shows R's data frame manipulation and vector operations for data analysis.",
                "key_points": "- Data frames\n- Vector subsetting\n- Statistical functions\n- Conditional filtering"
            },
            {
                "id": "pm31",
                "category": "programming",
                "title": "K-tech Somali: Perl Regular Expression",
                "description": "Write a Perl function that extracts all email addresses from a given text using regular expressions.\n\nExample input: 'Contact us at info@example.com or support@example.com'\nExpected output: ['info@example.com', 'support@example.com']",
                "answer": "sub extract_emails {\n    my $text = shift;\n    my @emails = $text =~ /[\\w.+-]+@[\\w.-]+\\.[\\w.-]+/g;\n    return @emails;\n}",
                "hint": "Use global regex match with email pattern",
                "points": 10,
                "explanation": "This demonstrates Perl's powerful regular expressions for pattern matching and extraction.",
                "key_points": "- Regular expressions\n- Pattern matching\n- Array operations\n- Email validation"
            },
            {
                "id": "pm32",
                "category": "programming",
                "title": "K-tech Somali: Dart Futures",
                "description": "Create a Dart function that simulates fetching user data asynchronously and handles both success and error cases.\n\nExample usage: fetchUserData(1).then(print).catchError(print)",
                "answer": "Future<Map<String, dynamic>> fetchUserData(int userId) {\n  return Future.delayed(\n    Duration(seconds: 1),\n    () {\n      if (userId > 0) {\n        return {'id': userId, 'name': 'User $userId'};\n      }\n      throw Exception('Invalid user ID');\n    },\n  );\n}",
                "hint": "Use Future.delayed for async simulation",
                "points": 10,
                "explanation": "This shows Dart's asynchronous programming with Futures and error handling.",
                "key_points": "- Async/await\n- Future objects\n- Error handling\n- Delayed execution"
            },
            {
                "id": "pm33",
                "category": "programming",
                "title": "K-tech Somali: Shell Script Array",
                "description": "Write a shell script function that takes an array of numbers and calculates their sum and average.\n\nExample input: (10 20 30 40 50)\nExpected output: 'Sum: 150, Average: 30'",
                "answer": "calculate_stats() {\n    local -a numbers=($@)\n    local sum=0\n    for num in ${numbers[@]}; do\n        ((sum += num))\n    done\n    echo \"Sum: $sum, Average: $((sum / ${#numbers[@]}))\"",
                "hint": "Use array iteration and arithmetic expansion",
                "points": 10,
                "explanation": "This demonstrates shell scripting with arrays, arithmetic operations, and string formatting.",
                "key_points": "- Shell arrays\n- Arithmetic operations\n- Loop iteration\n- String formatting"
            },
            {
                "id": "pm34",
                "category": "programming",
                "title": "K-tech Somali: MATLAB Matrix",
                "description": "Create a MATLAB function that generates a 3x3 matrix, finds its inverse, and calculates the determinant.\n\nExample output format: [matrix, inverse, determinant]",
                "answer": "function [M, I, D] = matrix_operations()\n    M = [1 2 3; 4 5 6; 7 8 9];\n    I = inv(M);\n    D = det(M);\nend",
                "hint": "Use inv() and det() functions",
                "points": 10,
                "explanation": "This shows MATLAB's matrix operations and function output formatting.",
                "key_points": "- Matrix operations\n- Function outputs\n- Linear algebra\n- Multiple returns"
            },
            {
                "id": "pm35",
                "category": "programming",
                "title": "K-tech Somali: Haskell List Comprehension",
                "description": "Create a function that generates all possible pairs (x,y) where x and y are from the range [1..5] and x is not equal to y.",
                "answer": "pairs = [(x,y) | x <- [1..5], y <- [1..5], x /= y]",
                "hint": "Use list comprehension with inequality condition",
                "points": 10,
                "explanation": "This demonstrates Haskell's list comprehension syntax for generating combinations with conditions.",
                "key_points": "- List comprehension\n- Pattern generation\n- Conditional filtering\n- Tuple creation"
            },
            {
                "id": "pm36",
                "category": "programming",
                "title": "K-tech Somali: Binary Tree Serialization",
                "description": "Implement functions to serialize a binary tree to a string and deserialize it back to a tree structure. The tree nodes contain integer values.",
                "answer": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef serialize(root):\n    if not root:\n        return 'null'\n    return f'{root.val},{serialize(root.left)},{serialize(root.right)}'\n\ndef deserialize(data):\n    def dfs():\n        val = next(values)\n        if val == 'null':\n            return None\n        node = TreeNode(int(val))\n        node.left = dfs()\n        node.right = dfs()\n        return node\n    \n    values = iter(data.split(','))\n    return dfs()",
                "hint": "Use a preorder traversal and handle null nodes with a special marker",
                "points": 15,
                "explanation": "Tree serialization allows storing tree structures in a format that can be easily transmitted or stored.",
                "key_points": "- Tree traversal\n- String parsing\n- Recursive algorithms\n- Data structure conversion"
            },
            {
                "id": "pm37",
                "category": "programming",
                "title": "K-tech Somali: Task Scheduler",
                "description": "Implement a task scheduler that can execute tasks after a specified delay and support periodic task execution with a given interval.",
                "answer": "import time\nfrom threading import Thread, Lock\nfrom queue import PriorityQueue\nfrom dataclasses import dataclass\n\n@dataclass(order=True)\nclass Task:\n    execute_at: float\n    interval: float\n    action: callable\n\nclass Scheduler:\n    def __init__(self):\n        self.tasks = PriorityQueue()\n        self.lock = Lock()\n        self.running = True\n        Thread(target=self._run).start()\n    \n    def schedule(self, delay, action, interval=0):\n        with self.lock:\n            execute_at = time.time() + delay\n            task = Task(execute_at, interval, action)\n            self.tasks.put(task)\n    \n    def _run(self):\n        while self.running:\n            if self.tasks.empty():\n                time.sleep(0.1)\n                continue\n            \n            task = self.tasks.get()\n            now = time.time()\n            \n            if now < task.execute_at:\n                time.sleep(task.execute_at - now)\n            \n            task.action()\n            \n            if task.interval > 0:\n                task.execute_at = now + task.interval\n                self.tasks.put(task)\n    \n    def stop(self):\n        self.running = False",
                "hint": "Use a priority queue to order tasks by execution time",
                "points": 15,
                "explanation": "A task scheduler manages the execution of tasks at specific times or intervals.",
                "key_points": "- Threading\n- Priority queue\n- Task management\n- Time handling"
            },
            {
                "id": "pm38",
                "category": "programming",
                "title": "K-tech Somali: Custom JSON Parser",
                "description": "Implement a simple JSON parser that can parse basic JSON data types (strings, numbers, booleans, null, arrays, and objects).",
                "answer": "def parse_json(s: str):\n    def parse_value(i):\n        while i < len(s) and s[i].isspace():\n            i += 1\n        \n        if i >= len(s):\n            raise ValueError('Unexpected end of input')\n        \n        if s[i] == '{':\n            return parse_object(i + 1)\n        elif s[i] == '[':\n            return parse_array(i + 1)\n        elif s[i] == '\"':\n            return parse_string(i + 1)\n        elif s[i].isdigit() or s[i] == '-':\n            return parse_number(i)\n        elif s[i:i+4] == 'true':\n            return True, i + 4\n        elif s[i:i+5] == 'false':\n            return False, i + 5\n        elif s[i:i+4] == 'null':\n            return None, i + 4\n        raise ValueError(f'Invalid JSON at position {i}')\n    \n    def parse_object(i):\n        obj = {}\n        while i < len(s) and s[i].isspace():\n            i += 1\n        if s[i] == '}':\n            return obj, i + 1\n        \n        while True:\n            key, i = parse_string(i)\n            while i < len(s) and s[i].isspace():\n                i += 1\n            if s[i] != ':':\n                raise ValueError(f'Expected : at position {i}')\n            i += 1\n            value, i = parse_value(i)\n            obj[key] = value\n            \n            while i < len(s) and s[i].isspace():\n                i += 1\n            if s[i] == '}':\n                return obj, i + 1\n            if s[i] != ',':\n                raise ValueError(f'Expected , or }} at position {i}')\n            i += 1\n    \n    def parse_array(i):\n        arr = []\n        while i < len(s) and s[i].isspace():\n            i += 1\n        if s[i] == ']':\n            return arr, i + 1\n        \n        while True:\n            value, i = parse_value(i)\n            arr.append(value)\n            \n            while i < len(s) and s[i].isspace():\n                i += 1\n            if s[i] == ']':\n                return arr, i + 1\n            if s[i] != ',':\n                raise ValueError(f'Expected , or ] at position {i}')\n            i += 1\n    \n    def parse_string(i):\n        result = ''\n        while i < len(s) and s[i] != '\"':\n            if s[i] == '\\\\':\n                i += 1\n                if i >= len(s):\n                    raise ValueError('Unexpected end of string')\n                result += s[i]\n            else:\n                result += s[i]\n            i += 1\n        return result, i + 1\n    \n    def parse_number(i):\n        start = i\n        while i < len(s) and (s[i].isdigit() or s[i] in '.-+e'):\n            i += 1\n        return float(s[start:i]), i\n    \n    value, i = parse_value(0)\n    while i < len(s) and s[i].isspace():\n        i += 1\n    if i < len(s):\n        raise ValueError(f'Extra data after JSON at position {i}')\n    return value",
                "hint": "Break down the parsing into separate functions for each data type",
                "points": 15,
                "explanation": "A JSON parser converts JSON text into data structures by following the JSON specification.",
                "key_points": "- Recursive descent parsing\n- String handling\n- Data type conversion\n- Error handling"
            },
            {
                "id": "pm39",
                "category": "programming",
                "title": "K-tech Somali: LRU Cache",
                "description": "Implement a Least Recently Used (LRU) cache with a specified capacity. When the cache is full, the least recently used item should be removed before adding a new item.",
                "answer": "from collections import OrderedDict\n\nclass LRUCache:\n    def __init__(self, capacity: int):\n        self.capacity = capacity\n        self.cache = OrderedDict()\n    \n    def get(self, key: int) -> int:\n        if key not in self.cache:\n            return -1\n        # Move to end (most recently used)\n        self.cache.move_to_end(key)\n        return self.cache[key]\n    \n    def put(self, key: int, value: int) -> None:\n        if key in self.cache:\n            # Move to end and update value\n            self.cache.move_to_end(key)\n        else:\n            # Remove least recently used if at capacity\n            if len(self.cache) >= self.capacity:\n                self.cache.popitem(last=False)\n        self.cache[key] = value",
                "hint": "Use OrderedDict to maintain insertion order and implement the LRU policy",
                "points": 15,
                "explanation": "An LRU cache maintains a fixed-size cache of items, removing the least recently used item when full.",
                "key_points": "- Cache implementation\n- Ordered dictionary\n- Eviction policy\n- Time complexity"
            },
            {
                "id": "pm40",
                "category": "programming",
                "title": "K-tech Somali: Rate Limiter",
                "description": "Implement a rate limiter that allows a maximum number of requests within a specified time window. Use the token bucket algorithm.",
                "answer": "import time\nfrom dataclasses import dataclass\nfrom typing import Dict\n\n@dataclass\nclass TokenBucket:\n    capacity: int\n    refill_rate: float\n    tokens: float = 0.0\n    last_refill: float = time.time()\n\nclass RateLimiter:\n    def __init__(self):\n        self.buckets: Dict[str, TokenBucket] = {}\n    \n    def add_limit(self, key: str, capacity: int, refill_rate: float):\n        self.buckets[key] = TokenBucket(capacity, refill_rate, capacity)\n    \n    def _refill(self, bucket: TokenBucket):\n        now = time.time()\n        time_passed = now - bucket.last_refill\n        new_tokens = time_passed * bucket.refill_rate\n        bucket.tokens = min(bucket.capacity, bucket.tokens + new_tokens)\n        bucket.last_refill = now\n    \n    def try_acquire(self, key: str, tokens: int = 1) -> bool:\n        if key not in self.buckets:\n            return False\n        \n        bucket = self.buckets[key]\n        self._refill(bucket)\n        \n        if bucket.tokens >= tokens:\n            bucket.tokens -= tokens\n            return True\n        return False",
                "hint": "Use the token bucket algorithm with periodic token refills",
                "points": 15,
                "explanation": "A rate limiter controls the rate of requests to protect services from overload.",
                "key_points": "- Token bucket algorithm\n- Time-based refill\n- Request throttling\n- Resource protection"
            },
            {
                "id": "ph45",
                "category": "programming",
                "title": "K-tech Somali: LFU Cache",
                "description": "Implement a Least Frequently Used (LFU) cache that removes the least frequently used item when the cache is full.",
                "answer": "from collections import defaultdict, OrderedDict\nfrom typing import Dict, Any, Optional\n\nclass LFUCache:\n    def __init__(self, capacity: int):\n        self.capacity = capacity\n        self.size = 0\n        self.min_freq = 0\n        self.key_freq: Dict[int, int] = {}\n        self.freq_keys: Dict[int, OrderedDict] = defaultdict(OrderedDict)\n    \n    def get(self, key: int) -> int:\n        if key not in self.key_freq:\n            return -1\n        \n        # Get current frequency and increase it\n        freq = self.key_freq[key]\n        value = self.freq_keys[freq][key]\n        \n        # Remove from current frequency\n        del self.freq_keys[freq][key]\n        \n        # Update min frequency if needed\n        if len(self.freq_keys[freq]) == 0 and freq == self.min_freq:\n            self.min_freq += 1\n        \n        # Add to new frequency\n        freq += 1\n        self.key_freq[key] = freq\n        self.freq_keys[freq][key] = value\n        \n        return value\n    \n    def put(self, key: int, value: int) -> None:\n        if self.capacity == 0:\n            return\n        \n        # If key exists, update value and frequency\n        if key in self.key_freq:\n            freq = self.key_freq[key]\n            self.freq_keys[freq][key] = value\n            self.get(key)  # Update frequency\n            return\n        \n        # If cache is full, remove least frequent item\n        if self.size >= self.capacity:\n            # Get least frequent items\n            lfu_dict = self.freq_keys[self.min_freq]\n            # Remove the first one (least recently used among least frequent)\n            lfu_key, _ = lfu_dict.popitem(last=False)\n            del self.key_freq[lfu_key]\n            self.size -= 1\n        \n        # Add new item with frequency 1\n        self.key_freq[key] = 1\n        self.freq_keys[1][key] = value\n        self.min_freq = 1\n        self.size += 1",
                "hint": "Use a combination of hash maps to track frequencies and maintain order within each frequency",
                "points": 15,
                "explanation": "An LFU cache evicts the least frequently used items first, with a tie-breaker based on least recently used.",
                "key_points": "- Frequency tracking\n- Cache eviction\n- O(1) operations\n- Frequency ordering"
            },
            {
                "id": "ph46",
                "category": "programming",
                "title": "K-tech Somali: Consistent Hashing",
                "description": "Implement a Consistent Hashing system that distributes keys across nodes while minimizing remapping when nodes are added or removed.",
                "answer": "import hashlib\nfrom typing import List, Optional, Dict\nfrom bisect import bisect_right\n\nclass ConsistentHash:\n    def __init__(self, num_replicas: int = 3):\n        self.num_replicas = num_replicas\n        self.ring: List[int] = []\n        self.node_map: Dict[int, str] = {}\n        self.nodes: Dict[str, List[int]] = {}\n    \n    def _hash(self, key: str) -> int:\n        return int(hashlib.md5(key.encode()).hexdigest(), 16)\n    \n    def add_node(self, node: str) -> None:\n        self.nodes[node] = []\n        for i in range(self.num_replicas):\n            hash_key = self._hash(f'{node}:{i}')\n            self.ring.insert(bisect_right(self.ring, hash_key), hash_key)\n            self.node_map[hash_key] = node\n            self.nodes[node].append(hash_key)\n    \n    def remove_node(self, node: str) -> None:\n        if node not in self.nodes:\n            return\n        for hash_key in self.nodes[node]:\n            index = bisect_right(self.ring, hash_key) - 1\n            del self.ring[index]\n            del self.node_map[hash_key]\n        del self.nodes[node]\n    \n    def get_node(self, key: str) -> Optional[str]:\n        if not self.ring:\n            return None\n        hash_key = self._hash(key)\n        index = bisect_right(self.ring, hash_key)\n        if index == len(self.ring):\n            index = 0\n        return self.node_map[self.ring[index]]\n    \n    def get_nodes(self, key: str, count: int) -> List[str]:\n        if not self.ring:\n            return []\n        result = []\n        seen = set()\n        hash_key = self._hash(key)\n        index = bisect_right(self.ring, hash_key)\n        if index == len(self.ring):\n            index = 0\n        while len(result) < min(count, len(self.nodes)):\n            node = self.node_map[self.ring[index]]\n            if node not in seen:\n                seen.add(node)\n                result.append(node)\n            index = (index + 1) % len(self.ring)\n        return result",
                "hint": "Use a hash ring with virtual nodes for better distribution",
                "points": 15,
                "explanation": "Consistent hashing minimizes the number of keys that need to be remapped when the set of nodes changes.",
                "key_points": "- Hash ring\n- Virtual nodes\n- Key distribution\n- Node management"
            },
            {
                "id": "ph47",
                "category": "programming",
                "title": "K-tech Somali: Distributed Rate Limiter",
                "description": "Implement a distributed rate limiter using Redis that can limit requests across multiple application instances.",
                "answer": "import time\nimport redis\nfrom typing import Optional\n\nclass DistributedRateLimiter:\n    def __init__(self, redis_client: redis.Redis, key_prefix: str,\n                 max_requests: int, window_seconds: int):\n        self.redis = redis_client\n        self.key_prefix = key_prefix\n        self.max_requests = max_requests\n        self.window_seconds = window_seconds\n    \n    def _get_window_key(self, key: str, window_number: int) -> str:\n        return f'{self.key_prefix}:{key}:{window_number}'\n    \n    def is_allowed(self, key: str) -> bool:\n        current_time = int(time.time())\n        window_number = current_time // self.window_seconds\n        \n        pipeline = self.redis.pipeline()\n        current_window_key = self._get_window_key(key, window_number)\n        prev_window_key = self._get_window_key(key, window_number - 1)\n        \n        # Get counts for current and previous windows\n        pipeline.get(current_window_key)\n        pipeline.get(prev_window_key)\n        current_count, prev_count = pipeline.execute()\n        \n        # Convert counts to integers, default to 0 if None\n        current_count = int(current_count) if current_count else 0\n        prev_count = int(prev_count) if prev_count else 0\n        \n        # Calculate weight of previous window\n        time_passed = current_time % self.window_seconds\n        weight = 1 - (time_passed / self.window_seconds)\n        weighted_prev_count = int(prev_count * weight)\n        \n        # Calculate total count\n        total_count = current_count + weighted_prev_count\n        \n        if total_count >= self.max_requests:\n            return False\n        \n        # Increment current window\n        pipeline.incr(current_window_key)\n        pipeline.expire(current_window_key, self.window_seconds * 2)\n        pipeline.execute()\n        \n        return True\n    \n    def get_remaining(self, key: str) -> int:\n        current_time = int(time.time())\n        window_number = current_time // self.window_seconds\n        \n        pipeline = self.redis.pipeline()\n        current_window_key = self._get_window_key(key, window_number)\n        prev_window_key = self._get_window_key(key, window_number - 1)\n        \n        pipeline.get(current_window_key)\n        pipeline.get(prev_window_key)\n        current_count, prev_count = pipeline.execute()\n        \n        current_count = int(current_count) if current_count else 0\n        prev_count = int(prev_count) if prev_count else 0\n        \n        time_passed = current_time % self.window_seconds\n        weight = 1 - (time_passed / self.window_seconds)\n        weighted_prev_count = int(prev_count * weight)\n        \n        total_count = current_count + weighted_prev_count\n        return max(0, self.max_requests - total_count)",
                "hint": "Use Redis for distributed state and implement sliding window rate limiting",
                "points": 15,
                "explanation": "A distributed rate limiter ensures consistent request limiting across multiple application instances.",
                "key_points": "- Distributed systems\n- Redis operations\n- Sliding window\n- Atomic operations"
            },
            {
                "id": "ph48",
                "category": "programming",
                "title": "K-tech Somali: Distributed Lock",
                "description": "Implement a distributed lock using Redis that provides mutual exclusion across multiple processes or servers.",
                "answer": "import time\nimport uuid\nfrom typing import Optional\nimport redis\n\nclass DistributedLock:\n    def __init__(self, redis_client: redis.Redis, lock_name: str,\n                 expire_seconds: int = 10, retry_times: int = 3,\n                 retry_delay: float = 0.2):\n        self.redis = redis_client\n        self.lock_name = lock_name\n        self.expire_seconds = expire_seconds\n        self.retry_times = retry_times\n        self.retry_delay = retry_delay\n        self.lock_key = f'lock:{self.lock_name}'\n        self.owner_id = str(uuid.uuid4())\n    \n    def acquire(self) -> bool:\n        for _ in range(self.retry_times):\n            # Try to acquire lock with owner ID and expiration\n            if self.redis.set(\n                self.lock_key,\n                self.owner_id,\n                nx=True,  # Only set if key doesn't exist\n                ex=self.expire_seconds\n            ):\n                return True\n            \n            time.sleep(self.retry_delay)\n        return False\n    \n    def release(self) -> bool:\n        # Lua script for atomic check-and-delete\n        script = \"\"\"\n        if redis.call('get', KEYS[1]) == ARGV[1] then\n            return redis.call('del', KEYS[1])\n        else\n            return 0\n        end\n        \"\"\"\n        \n        # Execute script atomically\n        result = self.redis.eval(\n            script,\n            1,  # Number of keys\n            self.lock_key,  # KEYS[1]\n            self.owner_id   # ARGV[1]\n        )\n        \n        return bool(result)\n    \n    def extend(self, additional_seconds: int) -> bool:\n        # Lua script for atomic check-and-extend\n        script = \"\"\"\n        if redis.call('get', KEYS[1]) == ARGV[1] then\n            return redis.call('expire', KEYS[1], ARGV[2])\n        else\n            return 0\n        end\n        \"\"\"\n        \n        # Execute script atomically\n        result = self.redis.eval(\n            script,\n            1,  # Number of keys\n            self.lock_key,  # KEYS[1]\n            self.owner_id,  # ARGV[1]\n            additional_seconds  # ARGV[2]\n        )\n        \n        return bool(result)\n    \n    def __enter__(self) -> 'DistributedLock':\n        if not self.acquire():\n            raise TimeoutError('Failed to acquire lock')\n        return self\n    \n    def __exit__(self, exc_type, exc_val, exc_tb) -> None:\n        self.release()",
                "hint": "Use Redis SET NX command and Lua scripts for atomic operations",
                "points": 15,
                "explanation": "A distributed lock ensures mutual exclusion in distributed systems by using Redis for coordination.",
                "key_points": "- Distributed systems\n- Atomic operations\n- Lock management\n- Resource safety"
            },
            {
                "id": "ph49",
                "category": "programming",
                "title": "K-tech Somali: Distributed Counter",
                "description": "Implement a distributed counter using Redis that can handle concurrent increments and decrements across multiple servers.",
                "answer": "import time\nfrom typing import Dict, Optional\nimport redis\n\nclass DistributedCounter:\n    def __init__(self, redis_client: redis.Redis, counter_name: str,\n                 shard_count: int = 10):\n        self.redis = redis_client\n        self.counter_name = counter_name\n        self.shard_count = shard_count\n    \n    def _get_shard_key(self, shard_id: int) -> str:\n        return f'counter:{self.counter_name}:shard:{shard_id}'\n    \n    def increment(self, amount: int = 1) -> bool:\n        # Choose a random shard to distribute load\n        shard_id = int(time.time() * 1000) % self.shard_count\n        shard_key = self._get_shard_key(shard_id)\n        \n        try:\n            self.redis.incrby(shard_key, amount)\n            return True\n        except redis.RedisError:\n            return False\n    \n    def decrement(self, amount: int = 1) -> bool:\n        return self.increment(-amount)\n    \n    def get_value(self) -> Optional[int]:\n        try:\n            pipeline = self.redis.pipeline()\n            \n            # Get all shard values\n            for i in range(self.shard_count):\n                shard_key = self._get_shard_key(i)\n                pipeline.get(shard_key)\n            \n            # Sum up all shards\n            total = 0\n            for value in pipeline.execute():\n                if value is not None:\n                    total += int(value)\n            \n            return total\n        except (redis.RedisError, ValueError):\n            return None\n    \n    def reset(self) -> bool:\n        try:\n            pipeline = self.redis.pipeline()\n            \n            # Delete all shards\n            for i in range(self.shard_count):\n                shard_key = self._get_shard_key(i)\n                pipeline.delete(shard_key)\n            \n            pipeline.execute()\n            return True\n        except redis.RedisError:\n            return False\n    \n    def get_shard_values(self) -> Dict[int, int]:\n        try:\n            pipeline = self.redis.pipeline()\n            \n            # Get all shard values\n            for i in range(self.shard_count):\n                shard_key = self._get_shard_key(i)\n                pipeline.get(shard_key)\n            \n            # Create shard map\n            shard_values = {}\n            for i, value in enumerate(pipeline.execute()):\n                if value is not None:\n                    shard_values[i] = int(value)\n                else:\n                    shard_values[i] = 0\n            \n            return shard_values\n        except (redis.RedisError, ValueError):\n            return {}",
                "hint": "Use Redis sharding to distribute counter updates and handle concurrent modifications",
                "points": 15,
                "explanation": "A distributed counter enables counting across multiple servers while handling concurrent updates.",
                "key_points": "- Distributed counting\n- Sharding\n- Concurrent updates\n- Data consistency"
            },
            {
                "id": "ph50",
                "category": "programming",
                "title": "K-tech Somali: Distributed Cache with Write-Through",
                "description": "Implement a distributed cache with write-through capability that maintains consistency between cache and persistent storage.",
                "answer": "import json\nfrom typing import Any, Optional, Dict\nimport redis\nfrom abc import ABC, abstractmethod\n\nclass Storage(ABC):\n    @abstractmethod\n    def get(self, key: str) -> Optional[Any]:\n        pass\n    \n    @abstractmethod\n    def set(self, key: str, value: Any) -> bool:\n        pass\n    \n    @abstractmethod\n    def delete(self, key: str) -> bool:\n        pass\n\nclass RedisStorage(Storage):\n    def __init__(self, redis_client: redis.Redis):\n        self.redis = redis_client\n    \n    def get(self, key: str) -> Optional[Any]:\n        try:\n            value = self.redis.get(key)\n            return json.loads(value) if value else None\n        except:\n            return None\n    \n    def set(self, key: str, value: Any) -> bool:\n        try:\n            self.redis.set(key, json.dumps(value))\n            return True\n        except:\n            return False\n    \n    def delete(self, key: str) -> bool:\n        try:\n            self.redis.delete(key)\n            return True\n        except:\n            return False\n\nclass DatabaseStorage(Storage):\n    def __init__(self, db_connection):\n        self.db = db_connection\n    \n    def get(self, key: str) -> Optional[Any]:\n        try:\n            cursor = self.db.cursor()\n            cursor.execute('SELECT value FROM cache_store WHERE key = %s', (key,))\n            row = cursor.fetchone()\n            return json.loads(row[0]) if row else None\n        except:\n            return None\n        finally:\n            cursor.close()\n    \n    def set(self, key: str, value: Any) -> bool:\n        try:\n            cursor = self.db.cursor()\n            serialized = json.dumps(value)\n            cursor.execute(\n                'INSERT INTO cache_store (key, value) VALUES (%s, %s) '\n                'ON DUPLICATE KEY UPDATE value = %s',\n                (key, serialized, serialized)\n            )\n            self.db.commit()\n            return True\n        except:\n            self.db.rollback()\n            return False\n        finally:\n            cursor.close()\n    \n    def delete(self, key: str) -> bool:\n        try:\n            cursor = self.db.cursor()\n            cursor.execute('DELETE FROM cache_store WHERE key = %s', (key,))\n            self.db.commit()\n            return True\n        except:\n            self.db.rollback()\n            return False\n        finally:\n            cursor.close()\n\nclass WriteThruCache:\n    def __init__(self, cache: Storage, persistent: Storage,\n                 ttl_seconds: int = 3600):\n        self.cache = cache\n        self.persistent = persistent\n        self.ttl_seconds = ttl_seconds\n    \n    def get(self, key: str) -> Optional[Any]:\n        # Try cache first\n        value = self.cache.get(key)\n        if value is not None:\n            return value\n        \n        # Cache miss, try persistent storage\n        value = self.persistent.get(key)\n        if value is not None:\n            # Update cache\n            self.cache.set(key, value)\n        \n        return value\n    \n    def set(self, key: str, value: Any) -> bool:\n        # Write to persistent storage first\n        if not self.persistent.set(key, value):\n            return False\n        \n        # Then update cache\n        return self.cache.set(key, value)\n    \n    def delete(self, key: str) -> bool:\n        # Delete from persistent storage first\n        if not self.persistent.delete(key):\n            return False\n        \n        # Then remove from cache\n        return self.cache.delete(key)\n    \n    def invalidate(self, key: str) -> bool:\n        # Only remove from cache\n        return self.cache.delete(key)",
                "hint": "Implement write-through caching with Redis as cache and a database as persistent storage",
                "points": 15,
                "explanation": "A write-through cache maintains data consistency by writing to both cache and persistent storage.",
                "key_points": "- Cache consistency\n- Write-through policy\n- Error handling\n- Data persistence"
            },
            {
                "id": "pm47",
                "category": "programming",
                "title": "K-tech Somali: Custom Queue",
                "description": "Implement a queue data structure with enqueue, dequeue, and peek operations using a linked list.",
                "answer": "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n\nclass Queue:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n        self.size = 0\n    \n    def enqueue(self, value):\n        new_node = Node(value)\n        if not self.head:\n            self.head = new_node\n            self.tail = new_node\n        else:\n            self.tail.next = new_node\n            self.tail = new_node\n        self.size += 1\n    \n    def dequeue(self):\n        if not self.head:\n            raise IndexError('Queue is empty')\n        value = self.head.value\n        self.head = self.head.next\n        if not self.head:\n            self.tail = None\n        self.size -= 1\n        return value\n    \n    def peek(self):\n        if not self.head:\n            raise IndexError('Queue is empty')\n        return self.head.value\n    \n    def is_empty(self):\n        return self.size == 0\n    \n    def __len__(self):\n        return self.size",
                "hint": "Use a linked list with head and tail pointers for O(1) operations",
                "points": 10,
                "explanation": "A queue is a FIFO (First-In-First-Out) data structure, and using a linked list allows for efficient operations.",
                "key_points": "- Queue implementation\n- Linked list\n- FIFO operations\n- Time complexity"
            },
            {
                "id": "pm48",
                "category": "programming",
                "title": "K-tech Somali: Binary Search Tree",
                "description": "Implement a binary search tree with insert and search operations.",
                "answer": "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\nclass BinarySearchTree:\n    def __init__(self):\n        self.root = None\n    \n    def insert(self, value):\n        if not self.root:\n            self.root = Node(value)\n            return\n        \n        current = self.root\n        while True:\n            if value < current.value:\n                if not current.left:\n                    current.left = Node(value)\n                    break\n                current = current.left\n            else:\n                if not current.right:\n                    current.right = Node(value)\n                    break\n                current = current.right\n    \n    def search(self, value):\n        current = self.root\n        while current:\n            if current.value == value:\n                return True\n            elif value < current.value:\n                current = current.left\n            else:\n                current = current.right\n        return False",
                "hint": "Remember that all values in the left subtree must be less than the current node",
                "points": 10,
                "explanation": "A binary search tree maintains the property that left child values are less than the parent, and right child values are greater.",
                "key_points": "- Binary search tree\n- Tree traversal\n- Node insertion\n- Search operations"
            },
            {
                "id": "pm49",
                "category": "programming",
                "title": "K-tech Somali: Stack Implementation",
                "description": "Implement a stack data structure with push, pop, and peek operations using a dynamic array.",
                "answer": "class Stack:\n    def __init__(self):\n        self.items = []\n    \n    def push(self, item):\n        self.items.append(item)\n    \n    def pop(self):\n        if not self.items:\n            raise IndexError('Stack is empty')\n        return self.items.pop()\n    \n    def peek(self):\n        if not self.items:\n            raise IndexError('Stack is empty')\n        return self.items[-1]\n    \n    def is_empty(self):\n        return len(self.items) == 0\n    \n    def size(self):\n        return len(self.items)",
                "hint": "Use a list's append and pop methods for stack operations",
                "points": 10,
                "explanation": "A stack is a LIFO (Last-In-First-Out) data structure that can be efficiently implemented using a dynamic array.",
                "key_points": "- Stack implementation\n- LIFO operations\n- Dynamic array\n- Error handling"
            },
            {
                "id": "pm50",
                "category": "programming",
                "title": "K-tech Somali: Priority Queue",
                "description": "Implement a priority queue using a binary heap that supports insert and extract_max operations.",
                "answer": "class PriorityQueue:\n    def __init__(self):\n        self.heap = []\n    \n    def parent(self, i):\n        return (i - 1) // 2\n    \n    def left_child(self, i):\n        return 2 * i + 1\n    \n    def right_child(self, i):\n        return 2 * i + 2\n    \n    def swap(self, i, j):\n        self.heap[i], self.heap[j] = self.heap[j], self.heap[i]\n    \n    def insert(self, key):\n        self.heap.append(key)\n        self._sift_up(len(self.heap) - 1)\n    \n    def extract_max(self):\n        if not self.heap:\n            raise IndexError('Priority queue is empty')\n        \n        max_val = self.heap[0]\n        last_val = self.heap.pop()\n        \n        if self.heap:\n            self.heap[0] = last_val\n            self._sift_down(0)\n        \n        return max_val\n    \n    def _sift_up(self, i):\n        while i > 0 and self.heap[self.parent(i)] < self.heap[i]:\n            self.swap(i, self.parent(i))\n            i = self.parent(i)\n    \n    def _sift_down(self, i):\n        max_index = i\n        size = len(self.heap)\n        \n        while True:\n            left = self.left_child(i)\n            right = self.right_child(i)\n            \n            if left < size and self.heap[left] > self.heap[max_index]:\n                max_index = left\n            \n            if right < size and self.heap[right] > self.heap[max_index]:\n                max_index = right\n            \n            if i != max_index:\n                self.swap(i, max_index)\n                i = max_index\n            else:\n                break"
            }
        ],
        "hard": [
            {
                "id": "ph1",
                "category": "programming",
                "title": "K-tech Somali: Decorator Implementation",
                "description": "Create a timing decorator that measures and prints the execution time of any function it decorates.",
                "answer": "import time\n\ndef timing_decorator(func):\n    def wrapper(*args, **kwargs):\n        start = time.time()\n        result = func(*args, **kwargs)\n        end = time.time()\n        print(f'{func.__name__} took {end - start:.2f} seconds')\n        return result\n    return wrapper",
                "hint": "Use time.time() to measure duration and create a wrapper function",
                "points": 15,
                "explanation": "Decorators wrap functions to add functionality. This one measures execution time using a wrapper function.",
                "key_points": "- Function decorators\n- Wrapper functions\n- Time measurement"
            },
            {
                "id": "ph2",
                "category": "programming",
                "title": "K-tech Somali: Context Manager",
                "description": "Create a context manager class that measures and prints the time spent inside a with block.",
                "answer": "class Timer:\n    def __enter__(self):\n        self.start = time.time()\n        return self\n    \n    def __exit__(self, *args):\n        self.end = time.time()\n        print(f'Time spent: {self.end - self.start:.2f} seconds')",
                "hint": "Implement __enter__ and __exit__ methods",
                "points": 15,
                "explanation": "Context managers provide setup and cleanup code for with blocks using __enter__ and __exit__ methods.",
                "key_points": "- Context managers\n- Special methods\n- Resource management"
            },
            {
                "id": "ph3",
                "category": "programming",
                "title": "K-tech Somali: Custom Iterator",
                "description": "Create a FibonacciIterator class that generates Fibonacci numbers up to a specified limit.",
                "answer": "class FibonacciIterator:\n    def __init__(self, limit):\n        self.limit = limit\n        self.prev = 0\n        self.curr = 1\n    \n    def __iter__(self):\n        return self\n    \n    def __next__(self):\n        if self.prev > self.limit:\n            raise StopIteration\n        result = self.prev\n        self.prev, self.curr = self.curr, self.prev + self.curr\n        return result",
                "hint": "Implement __iter__ and __next__ methods with Fibonacci logic",
                "points": 15,
                "explanation": "Custom iterators allow objects to be used in for loops by implementing the iterator protocol.",
                "key_points": "- Iterator protocol\n- Fibonacci sequence\n- State management"
            },
            {
                "id": "ph4",
                "category": "programming",
                "title": "K-tech Somali: Thread Pool Implementation",
                "description": "Implement a thread pool class that can execute multiple tasks concurrently with a fixed number of worker threads.",
                "answer": "import threading\nfrom queue import Queue\n\nclass ThreadPool:\n    def __init__(self, num_threads):\n        self.tasks = Queue()\n        self.workers = []\n        for _ in range(num_threads):\n            worker = threading.Thread(target=self._worker)\n            worker.start()\n            self.workers.append(worker)\n    \n    def _worker(self):\n        while True:\n            task = self.tasks.get()\n            if task is None:\n                break\n            task()\n            self.tasks.task_done()\n    \n    def submit(self, task):\n        self.tasks.put(task)\n    \n    def shutdown(self):\n        for _ in self.workers:\n            self.tasks.put(None)\n        for worker in self.workers:\n            worker.join()",
                "hint": "Use Queue for task management and Thread class for workers",
                "points": 15,
                "explanation": "Thread pools manage a fixed set of worker threads to execute tasks concurrently, improving resource utilization.",
                "key_points": "- Thread management\n- Task queuing\n- Concurrent execution"
            },
            {
                "id": "ph5",
                "category": "programming",
                "title": "K-tech Somali: Custom Metaclass",
                "description": "Create a metaclass that automatically logs all method calls of classes created with it.",
                "answer": "class LoggedMeta(type):\n    def __new__(cls, name, bases, attrs):\n        for attr_name, attr_value in attrs.items():\n            if callable(attr_value) and not attr_name.startswith('__'):\n                attrs[attr_name] = cls.log_call(attr_value)\n        return super().__new__(cls, name, bases, attrs)\n    \n    @staticmethod\n    def log_call(func):\n        def wrapper(*args, **kwargs):\n            print(f'Calling {func.__name__} with args={args}, kwargs={kwargs}')\n            result = func(*args, **kwargs)\n            print(f'{func.__name__} returned {result}')\n            return result\n        return wrapper",
                "hint": "Override __new__ in metaclass to modify class creation",
                "points": 15,
                "explanation": "Metaclasses allow customizing class creation behavior, enabling features like automatic method logging.",
                "key_points": "- Metaclasses\n- Method wrapping\n- Logging system"
            },
            {
                "id": "ph6",
                "category": "programming",
                "title": "K-tech Somali: Memory-Efficient Generator",
                "description": "Implement a memory-efficient generator that yields all possible combinations of k items from a list of n items.",
                "answer": "def combinations(items, k):\n    def backtrack(start, combo):\n        if len(combo) == k:\n            yield combo.copy()\n            return\n        for i in range(start, len(items)):\n            combo.append(items[i])\n            yield from backtrack(i + 1, combo)\n            combo.pop()\n    \n    yield from backtrack(0, [])",
                "hint": "Use backtracking with yield to generate combinations",
                "points": 15,
                "explanation": "Generators with backtracking allow generating combinations without storing all results in memory.",
                "key_points": "- Generators\n- Backtracking\n- Memory optimization"
            },
            {
                "id": "ph7",
                "category": "programming",
                "title": "K-tech Somali: Custom Context Manager",
                "description": "Create a context manager for managing database transactions that automatically rolls back on error and commits on success.",
                "answer": "class TransactionManager:\n    def __init__(self, connection):\n        self.connection = connection\n    \n    def __enter__(self):\n        self.cursor = self.connection.cursor()\n        return self.cursor\n    \n    def __exit__(self, exc_type, exc_val, exc_tb):\n        if exc_type is not None:\n            self.connection.rollback()\n            return False\n        try:\n            self.connection.commit()\n        except:\n            self.connection.rollback()\n            raise\n        finally:\n            self.cursor.close()",
                "hint": "Implement __enter__ and __exit__ methods with proper error handling",
                "points": 15,
                "explanation": "Custom context managers provide clean resource management with automatic cleanup.",
                "key_points": "- Context managers\n- Transaction handling\n- Resource cleanup"
            },
            {
                "id": "ph8",
                "category": "programming",
                "title": "K-tech Somali: Async Event System",
                "description": "Implement an asynchronous event system with publish-subscribe pattern using asyncio.",
                "answer": "import asyncio\nfrom collections import defaultdict\n\nclass EventSystem:\n    def __init__(self):\n        self.subscribers = defaultdict(set)\n    \n    async def subscribe(self, event_type, callback):\n        self.subscribers[event_type].add(callback)\n    \n    async def unsubscribe(self, event_type, callback):\n        self.subscribers[event_type].discard(callback)\n    \n    async def publish(self, event_type, data):\n        tasks = []\n        for callback in self.subscribers[event_type]:\n            task = asyncio.create_task(callback(data))\n            tasks.append(task)\n        await asyncio.gather(*tasks)",
                "hint": "Use asyncio.create_task for non-blocking event handling",
                "points": 15,
                "explanation": "Async event systems enable non-blocking event handling with publish-subscribe pattern.",
                "key_points": "- Async/await\n- Event handling\n- Pub/sub pattern"
            },
            {
                "id": "ph9",
                "category": "programming",
                "title": "K-tech Somali: Blockchain Implementation",
                "description": "Implement a simple blockchain with proof-of-work consensus mechanism and transaction validation.",
                "answer": "import hashlib\nimport time\nfrom typing import List, Dict\n\nclass Block:\\n    def __init__(self, index: int, transactions: List[Dict], timestamp: float, previous_hash: str):\\n        self.index = index\\n        self.transactions = transactions\\n        self.timestamp = timestamp\\n        self.previous_hash = previous_hash\\n        self.nonce = 0\\n        self.hash = self.calculate_hash()\\n    \\n    def calculate_hash(self) -> str:\\n        block_string = f'{self.index}{self.transactions}{self.timestamp}{self.previous_hash}{self.nonce}'\\n        return hashlib.sha256(block_string.encode()).hexdigest()\\n\\nclass Blockchain:\\n    def __init__(self, difficulty: int = 4):\\n        self.difficulty = difficulty\\n        self.unconfirmed_transactions: List[Dict] = []\\n        self.chain: List[Block] = []\\n        self.create_genesis_block()\\n    \\n    def create_genesis_block(self):\\n        genesis_block = Block(0, [], time.time(), '0')\\n        self.mine_block(genesis_block)\\n        self.chain.append(genesis_block)\\n    \\n    def mine_block(self, block: Block):\\n        target = '0' * self.difficulty\\n        while block.hash[:self.difficulty] != target:\\n            block.nonce += 1\\n            block.hash = block.calculate_hash()\\n    \\n    def add_transaction(self, sender: str, recipient: str, amount: float):\\n        self.unconfirmed_transactions.append({\\n            'sender': sender,\\n            'recipient': recipient,\\n            'amount': amount\\n        })\\n    \\n    def mine_pending_transactions(self, miner_address: str):\\n        if not self.unconfirmed_transactions:\\n            return False\\n        \\n        new_block = Block(\\n            len(self.chain),\\n            self.unconfirmed_transactions,\\n            time.time(),\\n            self.chain[-1].hash\\n        )\\n        \\n        self.mine_block(new_block)\\n        self.chain.append(new_block)\\n        self.unconfirmed_transactions = [\\n            {'sender': 'network', 'recipient': miner_address, 'amount': 10.0}\\n        ]\\n        return True\\n    \\n    def is_chain_valid(self) -> bool:\\n        for i in range(1, len(self.chain)):\\n            current = self.chain[i]\\n            previous = self.chain[i-1]\\n            \\n            if current.hash != current.calculate_hash():\\n                return False\\n            \\n            if current.previous_hash != previous.hash:\\n                return False\\n            \\n            target = '0' * self.difficulty\\n            if current.hash[:self.difficulty] != target:\\n                return False\\n        \\n        return True",
                "hint": "Use SHA-256 for hashing and implement proof-of-work mining",
                "points": 15,
                "explanation": "Blockchain technology uses cryptographic hashing and consensus mechanisms to maintain a secure, distributed ledger.",
                "key_points": "- Blockchain structure\n- Proof-of-work mining\n- Transaction validation"
            },
            {
                "id": "ph10",
                "category": "programming",
                "title": "K-tech Somali: Graph Database Engine",
                "description": "Implement a simple graph database engine supporting nodes, relationships, and basic graph traversal.",
                "answer": "from typing import Dict, List, Optional, Set\n\nclass Node:\\n    def __init__(self, id: str, properties: Dict):\\n        self.id = id\\n        self.properties = properties\\n        self.relationships_out: Dict[str, List['Relationship']] = {}\\n        self.relationships_in: Dict[str, List['Relationship']] = {}\\n\\nclass Relationship:\\n    def __init__(self, type: str, start_node: Node, end_node: Node, properties: Dict):\\n        self.type = type\\n        self.start_node = start_node\\n        self.end_node = end_node\\n        self.properties = properties\\n\\nclass GraphDatabase:\\n    def __init__(self):\\n        self.nodes: Dict[str, Node] = {}\\n    \\n    def create_node(self, id: str, properties: Dict) -> Node:\\n        if id in self.nodes:\\n            raise ValueError(f'Node with id {id} already exists')\\n        node = Node(id, properties)\\n        self.nodes[id] = node\\n        return node\\n    \\n    def create_relationship(self, type: str, start_id: str, end_id: str, properties: Dict) -> Relationship:\\n        if start_id not in self.nodes or end_id not in self.nodes:\\n            raise ValueError('Start or end node does not exist')\\n        \\n        start_node = self.nodes[start_id]\\n        end_node = self.nodes[end_id]\\n        \\n        relationship = Relationship(type, start_node, end_node, properties)\\n        \\n        if type not in start_node.relationships_out:\\n            start_node.relationships_out[type] = []\\n        start_node.relationships_out[type].append(relationship)\\n        \\n        if type not in end_node.relationships_in:\\n            end_node.relationships_in[type] = []\\n        end_node.relationships_in[type].append(relationship)\\n        \\n        return relationship\\n    \\n    def find_node(self, id: str) -> Optional[Node]:\\n        return self.nodes.get(id)\\n    \\n    def get_related_nodes(self, node_id: str, relationship_type: str, direction: str = 'OUT') -> List[Node]:\\n        node = self.nodes.get(node_id)\\n        if not node:\\n            return []\\n        \\n        result = []\\n        if direction in ('OUT', 'BOTH'):\\n            for rel in node.relationships_out.get(relationship_type, []):\\n                result.append(rel.end_node)\\n        \\n        if direction in ('IN', 'BOTH'):\\n            for rel in node.relationships_in.get(relationship_type, []):\\n                result.append(rel.start_node)\\n        \\n        return result\\n    \\n    def traverse_graph(self, start_id: str, relationship_type: str, max_depth: int) -> Set[Node]:\\n        visited = set()\\n        def dfs(node_id: str, depth: int):\\n            if depth > max_depth:\\n                return\\n            \\n            node = self.nodes.get(node_id)\\n            if not node or node in visited:\\n                return\\n            \\n            visited.add(node)\\n            for rel in node.relationships_out.get(relationship_type, []):\\n                dfs(rel.end_node.id, depth + 1)\\n        \\n        dfs(start_id, 0)\\n        return visited",
                "hint": "Use adjacency lists for relationships and implement depth-first traversal",
                "points": 15,
                "explanation": "Graph databases store data in nodes and relationships, allowing for complex traversal queries.",
                "key_points": "- Graph data structure\n- Relationship management\n- Graph traversal"
            },
            {
                "id": "ph11",
                "category": "programming",
                "title": "K-tech Somali: Distributed Cache",
                "description": "Implement a distributed cache system with consistent hashing and replication support.",
                "answer": "import hashlib\nfrom typing import Dict, List, Any, Optional\nfrom bisect import bisect\n\nclass ConsistentHash:\\n    def __init__(self, nodes: List[str], replicas: int = 3):\\n        self.replicas = replicas\\n        self.ring: List[int] = []\\n        self.nodes: Dict[int, str] = {}\\n        \\n        for node in nodes:\\n            self.add_node(node)\\n    \\n    def add_node(self, node: str):\\n        for i in range(self.replicas):\\n            key = self._hash(f'{node}:{i}')\\n            self.ring.insert(bisect(self.ring, key), key)\\n            self.nodes[key] = node\\n    \\n    def remove_node(self, node: str):\\n        for i in range(self.replicas):\\n            key = self._hash(f'{node}:{i}')\\n            self.ring.remove(key)\\n            del self.nodes[key]\\n    \\n    def get_node(self, key: str) -> str:\\n        if not self.ring:\\n            raise ValueError('Ring is empty')\\n        \\n        hash_key = self._hash(key)\\n        index = bisect(self.ring, hash_key) % len(self.ring)\\n        return self.nodes[self.ring[index]]\\n    \\n    def _hash(self, key: str) -> int:\\n        return int(hashlib.md5(key.encode()).hexdigest(), 16)\\n\\nclass CacheNode:\\n    def __init__(self, name: str):\\n        self.name = name\\n        self.data: Dict[str, Any] = {}\\n    \\n    def get(self, key: str) -> Optional[Any]:\\n        return self.data.get(key)\\n    \\n    def set(self, key: str, value: Any):\\n        self.data[key] = value\\n    \\n    def delete(self, key: str):\\n        if key in self.data:\\n            del self.data[key]\\n\\nclass DistributedCache:\\n    def __init__(self, nodes: List[str], replicas: int = 3):\\n        self.consistent_hash = ConsistentHash(nodes, replicas)\\n        self.cache_nodes: Dict[str, CacheNode] = {\\n            node: CacheNode(node) for node in nodes\\n        }\\n    \\n    def get(self, key: str) -> Optional[Any]:\\n        node_name = self.consistent_hash.get_node(key)\\n        return self.cache_nodes[node_name].get(key)\\n    \\n    def set(self, key: str, value: Any):\\n        node_name = self.consistent_hash.get_node(key)\\n        self.cache_nodes[node_name].set(key, value)\\n        \\n        # Replicate to backup nodes\\n        backup_nodes = self._get_backup_nodes(node_name)\\n        for backup_node in backup_nodes:\\n            self.cache_nodes[backup_node].set(key, value)\\n    \\n    def delete(self, key: str):\\n        node_name = self.consistent_hash.get_node(key)\\n        self.cache_nodes[node_name].delete(key)\\n        \\n        # Delete from backup nodes\\n        backup_nodes = self._get_backup_nodes(node_name)\\n        for backup_node in backup_nodes:\\n            self.cache_nodes[backup_node].delete(key)\\n    \\n    def add_node(self, node: str):\\n        self.consistent_hash.add_node(node)\\n        self.cache_nodes[node] = CacheNode(node)\\n        self._rebalance()\\n    \\n    def remove_node(self, node: str):\\n        self.consistent_hash.remove_node(node)\\n        del self.cache_nodes[node]\\n        self._rebalance()\\n    \\n    def _get_backup_nodes(self, primary_node: str) -> List[str]:\\n        nodes = list(self.cache_nodes.keys())\\n        start_idx = nodes.index(primary_node)\\n        return [nodes[(start_idx + i) % len(nodes)]\\n                for i in range(1, min(3, len(nodes)))]\\n    \\n    def _rebalance(self):\\n        # Implement rebalancing logic here\\n        pass",
                "hint": "Use consistent hashing for distribution and implement replication for fault tolerance",
                "points": 15,
                "explanation": "Distributed caches use consistent hashing to distribute data across nodes and replication for reliability.",
                "key_points": "- Consistent hashing\n- Data replication\n- Cache distribution"
            },
            {
                "id": "ph12",
                "category": "programming",
                "title": "K-tech Somali: Task Scheduler",
                "description": "Create a task scheduler that can schedule and execute tasks at specified intervals or times.",
                "answer": "import asyncio\nfrom datetime import datetime, timedelta\n\nclass TaskScheduler:\n    def __init__(self):\n        self.tasks = []\n    \n    async def schedule(self, task, interval=None, at_time=None):\n        if interval:\n            while True:\n                await task()\n                await asyncio.sleep(interval)\n        elif at_time:\n            while True:\n                now = datetime.now()\n                if now.time() >= at_time:\n                    await task()\n                    tomorrow = now + timedelta(days=1)\n                    tomorrow = tomorrow.replace(\n                        hour=at_time.hour,\n                        minute=at_time.minute,\n                        second=at_time.second\n                    )\n                    delay = (tomorrow - now).total_seconds()\n                    await asyncio.sleep(delay)\n                else:\n                    delay = (datetime.combine(now.date(), at_time) - now).total_seconds()\n                    await asyncio.sleep(delay)\n    \n    def add_task(self, task, interval=None, at_time=None):\n        self.tasks.append(\n            asyncio.create_task(\n                self.schedule(task, interval, at_time)\n            )\n        )\n    \n    async def run(self):\n        await asyncio.gather(*self.tasks)",
                "hint": "Use asyncio for task scheduling and execution",
                "points": 15,
                "explanation": "Task schedulers manage the execution of tasks based on time or intervals.",
                "key_points": "- Task scheduling\n- Time management\n- Async execution"
            },
            {
                "id": "ph13",
                "category": "programming",
                "title": "K-tech Somali: Custom Protocol",
                "description": "Implement a custom network protocol with message framing and error detection.",
                "answer": "import struct\nimport zlib\n\nclass Protocol:\n    HEADER_FORMAT = '!IIB'  # length, checksum, msg_type\n    HEADER_SIZE = struct.calcsize(HEADER_FORMAT)\n    \n    @classmethod\n    def pack(cls, message, msg_type):\n        data = message.encode()\n        checksum = zlib.crc32(data)\n        header = struct.pack(\n            cls.HEADER_FORMAT,\n            len(data),\n            checksum,\n            msg_type\n        )\n        return header + data\n    \n    @classmethod\n    def unpack(cls, data):\n        header = data[:cls.HEADER_SIZE]\n        length, checksum, msg_type = struct.unpack(\n            cls.HEADER_FORMAT,\n            header\n        )\n        message = data[cls.HEADER_SIZE:cls.HEADER_SIZE+length]\n        if zlib.crc32(message) != checksum:\n            raise ValueError('Checksum mismatch')\n        return message.decode(), msg_type",
                "hint": "Use struct for message framing and CRC32 for error detection",
                "points": 15,
                "explanation": "Custom protocols define message formats and handling for network communication.",
                "key_points": "- Protocol design\n- Message framing\n- Error detection"
            },
            {
                "id": "ph14",
                "category": "programming",
                "title": "K-tech Somali: Process Pool",
                "description": "Implement a process pool for CPU-bound tasks with work stealing and load balancing.",
                "answer": "import multiprocessing as mp\nfrom queue import Empty\nfrom time import sleep\n\nclass ProcessPool:\n    def __init__(self, num_processes):\n        self.task_queues = [mp.Queue() for _ in range(num_processes)]\n        self.result_queue = mp.Queue()\n        self.processes = []\n        \n        for i in range(num_processes):\n            p = mp.Process(target=self._worker, args=(i,))\n            p.start()\n            self.processes.append(p)\n    \n    def _worker(self, worker_id):\n        while True:\n            try:\n                task = self.task_queues[worker_id].get_nowait()\n            except Empty:\n                # Work stealing\n                for i in range(len(self.task_queues)):\n                    if i != worker_id:\n                        try:\n                            task = self.task_queues[i].get_nowait()\n                            break\n                        except Empty:\n                            continue\n                else:\n                    sleep(0.1)\n                    continue\n            \n            if task is None:\n                break\n            \n            func, args = task\n            result = func(*args)\n            self.result_queue.put(result)\n    \n    def submit(self, func, *args):\n        # Load balancing - submit to shortest queue\n        shortest_queue = min(\n            range(len(self.task_queues)),\n            key=lambda i: self.task_queues[i].qsize()\n        )\n        self.task_queues[shortest_queue].put((func, args))\n    \n    def shutdown(self):\n        for _ in self.processes:\n            for q in self.task_queues:\n                q.put(None)\n        for p in self.processes:\n            p.join()",
                "hint": "Use multiple queues with work stealing for better load distribution",
                "points": 15,
                "explanation": "Process pools manage parallel execution of CPU-bound tasks across multiple processes.",
                "key_points": "- Process management\n- Work stealing\n- Load balancing"
            },
            {
                "id": "ph15",
                "category": "programming",
                "title": "K-tech Somali: Custom Async Iterator",
                "description": "Implement a custom async iterator that generates Fibonacci numbers with configurable delay.",
                "answer": "import asyncio\n\nclass AsyncFibonacci:\n    def __init__(self, limit, delay):\n        self.limit = limit\n        self.delay = delay\n        self.current = 0\n        self.next = 1\n        self.count = 0\n    \n    def __aiter__(self):\n        return self\n    \n    async def __anext__(self):\n        if self.count >= self.limit:\n            raise StopAsyncIteration\n        \n        await asyncio.sleep(self.delay)\n        result = self.current\n        self.current, self.next = (\n            self.next,\n            self.current + self.next\n        )\n        self.count += 1\n        return result\n\nasync def main():\n    async for num in AsyncFibonacci(10, 0.5):\n        print(num)",
                "hint": "Implement __aiter__ and __anext__ with asyncio.sleep",
                "points": 15,
                "explanation": "Async iterators allow iteration over asynchronous sequences of values.",
                "key_points": "- Async iteration\n- Fibonacci sequence\n- Delayed generation"
            },
            {
                "id": "ph16",
                "category": "programming",
                "title": "K-tech Somali: Custom Async Context Manager",
                "description": "Create an async context manager for managing a pool of database connections.",
                "answer": "import asyncio\nfrom collections import deque\n\nclass ConnectionPool:\n    def __init__(self, max_size, connect_func):\n        self.max_size = max_size\n        self.connect_func = connect_func\n        self.connections = deque()\n        self.size = 0\n        self._lock = asyncio.Lock()\n    \n    async def acquire(self):\n        async with self._lock:\n            while True:\n                if self.connections:\n                    return self.connections.popleft()\n                if self.size < self.max_size:\n                    self.size += 1\n                    break\n                await asyncio.sleep(0.1)\n        \n        conn = await self.connect_func()\n        return conn\n    \n    async def release(self, conn):\n        async with self._lock:\n            self.connections.append(conn)\n    \n    async def __aenter__(self):\n        self._conn = await self.acquire()\n        return self._conn\n    \n    async def __aexit__(self, exc_type, exc, tb):\n        await self.release(self._conn)",
                "hint": "Use async context manager protocol with connection pooling",
                "points": 15,
                "explanation": "Async context managers provide resource management for async code.",
                "key_points": "- Connection pooling\n- Async context management\n- Resource management"
            },
            {
                "id": "ph17",
                "category": "programming",
                "title": "K-tech Somali: Distributed Task Queue",
                "description": "Implement a distributed task queue system with Redis as the backend, supporting task prioritization and result storage.",
                "answer": "import redis\nimport json\nfrom datetime import datetime\n\nclass TaskQueue:\\n    def __init__(self, redis_url):\\n        self.redis = redis.from_url(redis_url)\\n        self.task_queue = 'tasks'\\n        self.result_store = 'results'\\n    \\n    def enqueue(self, task_data, priority=0):\\n        task = {\\n            'id': str(datetime.now().timestamp()),\\n            'data': task_data,\\n            'priority': priority,\\n            'status': 'pending'\\n        }\\n        self.redis.zadd(self.task_queue, {json.dumps(task): priority})\\n        return task['id']\\n    \\n    def dequeue(self):\\n        task = self.redis.zpopmax(self.task_queue)\\n        if task:\\n            return json.loads(task[0][0])\\n        return None\\n    \\n    def store_result(self, task_id, result):\\n        self.redis.hset(self.result_store, task_id, json.dumps(result))\\n    \\n    def get_result(self, task_id):\\n        result = self.redis.hget(self.result_store, task_id)\\n        return json.loads(result) if result else None",
                "hint": "Use Redis sorted sets for priority queue and hash for result storage",
                "points": 15,
                "explanation": "Distributed task queues enable processing tasks across multiple workers with priority handling.",
                "key_points": "- Redis integration\n- Task prioritization\n- Result management"
            },
            {
                "id": "ph18",
                "category": "programming",
                "title": "K-tech Somali: Custom Database Engine",
                "description": "Create a simple key-value database engine with support for transactions and persistence.",
                "answer": "import pickle\nimport threading\nfrom collections import defaultdict\n\nclass Database:\\n    def __init__(self, path):\\n        self.path = path\\n        self.data = {}\\n        self.transaction_log = []\\n        self.lock = threading.Lock()\\n        self._load()\\n    \\n    def _load(self):\\n        try:\\n            with open(self.path, 'rb') as f:\\n                self.data = pickle.load(f)\\n        except FileNotFoundError:\\n            pass\\n    \\n    def _save(self):\\n        with open(self.path, 'wb') as f:\\n            pickle.dump(self.data, f)\\n    \\n    def begin_transaction(self):\\n        return Transaction(self)\\n    \\n    def commit(self, changes):\\n        with self.lock:\\n            for key, value in changes.items():\\n                if value is None:\\n                    self.data.pop(key, None)\\n                else:\\n                    self.data[key] = value\\n            self._save()\\n    \\n    def get(self, key):\\n        return self.data.get(key)\\n    \\n    def set(self, key, value):\\n        with self.lock:\\n            self.data[key] = value\\n            self._save()\\n    \\n    def delete(self, key):\\n        with self.lock:\\n            self.data.pop(key, None)\\n            self._save()\\n\\nclass Transaction:\\n    def __init__(self, db):\\n        self.db = db\\n        self.changes = {}\\n    \\n    def __enter__(self):\\n        return self\\n    \\n    def __exit__(self, exc_type, exc_val, exc_tb):\\n        if exc_type is None:\\n            self.db.commit(self.changes)\\n    \\n    def set(self, key, value):\\n        self.changes[key] = value\\n    \\n    def delete(self, key):\\n        self.changes[key] = None",
                "hint": "Use file-based persistence and implement ACID properties",
                "points": 15,
                "explanation": "Database engines need to handle concurrent access and ensure data consistency.",
                "key_points": "- Transaction handling\n- Data persistence\n- Concurrency control"
            },
            {
                "id": "ph19",
                "category": "programming",
                "title": "K-tech Somali: Neural Network",
                "description": "Implement a simple neural network with backpropagation from scratch.",
                "answer": "import numpy as np\n\nclass NeuralNetwork:\\n    def __init__(self, layers):\\n        self.layers = layers\\n        self.weights = []\\n        self.biases = []\\n        \\n        for i in range(len(layers)-1):\\n            self.weights.append(np.random.randn(layers[i], layers[i+1]))\\n            self.biases.append(np.random.randn(1, layers[i+1]))\\n    \\n    def sigmoid(self, x):\\n        return 1 / (1 + np.exp(-x))\\n    \\n    def sigmoid_derivative(self, x):\\n        return x * (1 - x)\\n    \\n    def forward(self, X):\\n        self.activations = [X]\\n        \\n        for i in range(len(self.weights)):\\n            net = np.dot(self.activations[-1], self.weights[i]) + self.biases[i]\\n            self.activations.append(self.sigmoid(net))\\n        \\n        return self.activations[-1]\\n    \\n    def backward(self, X, y, learning_rate):\\n        m = X.shape[0]\\n        delta = self.activations[-1] - y\\n        \\n        for i in range(len(self.weights) - 1, -1, -1):\\n            dW = np.dot(self.activations[i].T, delta) / m\\n            db = np.sum(delta, axis=0, keepdims=True) / m\\n            \\n            if i > 0:\\n                delta = np.dot(delta, self.weights[i].T) * self.sigmoid_derivative(self.activations[i])\\n            \\n            self.weights[i] -= learning_rate * dW\\n            self.biases[i] -= learning_rate * db\\n    \\n    def train(self, X, y, epochs, learning_rate):\\n        for _ in range(epochs):\\n            output = self.forward(X)\\n            self.backward(X, y, learning_rate)",
                "hint": "Implement forward propagation and backpropagation using numpy",
                "points": 15,
                "explanation": "Neural networks learn by adjusting weights through forward and backward propagation.",
                "key_points": "- Neural networks\n- Backpropagation\n- Gradient descent"
            },
            {
                "id": "ph20",
                "category": "programming",
                "title": "K-tech Somali: Compiler Frontend",
                "description": "Create a simple compiler frontend that performs lexical analysis and parsing for a basic arithmetic expression language.",
                "answer": "from enum import Enum\nfrom dataclasses import dataclass\n\nclass TokenType(Enum):\\n    NUMBER = 'NUMBER'\\n    PLUS = 'PLUS'\\n    MINUS = 'MINUS'\\n    MULTIPLY = 'MULTIPLY'\\n    DIVIDE = 'DIVIDE'\\n    LPAREN = 'LPAREN'\\n    RPAREN = 'RPAREN'\\n    EOF = 'EOF'\\n\\n@dataclass\\nclass Token:\\n    type: TokenType\\n    value: str\\n\\nclass Lexer:\\n    def __init__(self, text):\\n        self.text = text\\n        self.pos = 0\\n    \\n    def get_next_token(self):\\n        while self.pos < len(self.text):\\n            char = self.text[self.pos]\\n            \\n            if char.isspace():\\n                self.pos += 1\\n                continue\\n            \\n            if char.isdigit():\\n                num = ''\\n                while self.pos < len(self.text) and self.text[self.pos].isdigit():\\n                    num += self.text[self.pos]\\n                    self.pos += 1\\n                return Token(TokenType.NUMBER, num)\\n            \\n            if char == '+':\\n                self.pos += 1\\n                return Token(TokenType.PLUS, char)\\n            if char == '-':\\n                self.pos += 1\\n                return Token(TokenType.MINUS, char)\\n            if char == '*':\\n                self.pos += 1\\n                return Token(TokenType.MULTIPLY, char)\\n            if char == '/':\\n                self.pos += 1\\n                return Token(TokenType.DIVIDE, char)\\n            if char == '(':\\n                self.pos += 1\\n                return Token(TokenType.LPAREN, char)\\n            if char == ')':\\n                self.pos += 1\\n                return Token(TokenType.RPAREN, char)\\n            \\n            raise SyntaxError(f'Invalid character: {char}')\\n        \\n        return Token(TokenType.EOF, None)\\n\\nclass Parser:\\n    def __init__(self, lexer):\\n        self.lexer = lexer\\n        self.current_token = self.lexer.get_next_token()\\n    \\n    def eat(self, token_type):\\n        if self.current_token.type == token_type:\\n            self.current_token = self.lexer.get_next_token()\\n        else:\\n            raise SyntaxError(f'Expected {token_type}, got {self.current_token.type}')\\n    \\n    def factor(self):\\n        token = self.current_token\\n        if token.type == TokenType.NUMBER:\\n            self.eat(TokenType.NUMBER)\\n            return int(token.value)\\n        elif token.type == TokenType.LPAREN:\\n            self.eat(TokenType.LPAREN)\\n            result = self.expr()\\n            self.eat(TokenType.RPAREN)\\n            return result\\n        raise SyntaxError('Invalid factor')\\n    \\n    def term(self):\\n        result = self.factor()\\n        \\n        while self.current_token.type in (TokenType.MULTIPLY, TokenType.DIVIDE):\\n            token = self.current_token\\n            if token.type == TokenType.MULTIPLY:\\n                self.eat(TokenType.MULTIPLY)\\n                result *= self.factor()\\n            elif token.type == TokenType.DIVIDE:\\n                self.eat(TokenType.DIVIDE)\\n                result /= self.factor()\\n        \\n        return result\\n    \\n    def expr(self):\\n        result = self.term()\\n        \\n        while self.current_token.type in (TokenType.PLUS, TokenType.MINUS):\\n            token = self.current_token\\n            if token.type == TokenType.PLUS:\\n                self.eat(TokenType.PLUS)\\n                result += self.term()\\n            elif token.type == TokenType.MINUS:\\n                self.eat(TokenType.MINUS)\\n                result -= self.term()\\n        \\n        return result\\n    \\n    def parse(self):\\n        return self.expr()",
                "hint": "Implement lexical analysis for tokens and recursive descent parsing",
                "points": 15,
                "explanation": "Compiler frontends convert source code into an intermediate representation through lexing and parsing.",
                "key_points": "- Lexical analysis\n- Parsing\n- Grammar implementation"
            },
            {
                "id": "ph21",
                "category": "programming",
                "title": "K-tech Somali: Virtual Machine",
                "description": "Implement a simple stack-based virtual machine that can execute basic arithmetic operations.",
                "answer": "from enum import Enum\nfrom typing import List, Union\n\nclass OpCode(Enum):\\n    PUSH = 'PUSH'\\n    POP = 'POP'\\n    ADD = 'ADD'\\n    SUB = 'SUB'\\n    MUL = 'MUL'\\n    DIV = 'DIV'\\n    PRINT = 'PRINT'\\n    HALT = 'HALT'\\n\\nclass Instruction:\\n    def __init__(self, opcode: OpCode, operand: Union[int, None] = None):\\n        self.opcode = opcode\\n        self.operand = operand\\n\\nclass VirtualMachine:\\n    def __init__(self):\\n        self.stack: List[int] = []\\n        self.ip = 0  # instruction pointer\\n    \\n    def push(self, value: int):\\n        self.stack.append(value)\\n    \\n    def pop(self) -> int:\\n        if not self.stack:\\n            raise RuntimeError('Stack underflow')\\n        return self.stack.pop()\\n    \\n    def execute(self, program: List[Instruction]):\\n        while self.ip < len(program):\\n            instruction = program[self.ip]\\n            \\n            if instruction.opcode == OpCode.PUSH:\\n                self.push(instruction.operand)\\n            elif instruction.opcode == OpCode.POP:\\n                self.pop()\\n            elif instruction.opcode == OpCode.ADD:\\n                b = self.pop()\\n                a = self.pop()\\n                self.push(a + b)\\n            elif instruction.opcode == OpCode.SUB:\\n                b = self.pop()\\n                a = self.pop()\\n                self.push(a - b)\\n            elif instruction.opcode == OpCode.MUL:\\n                b = self.pop()\\n                a = self.pop()\\n                self.push(a * b)\\n            elif instruction.opcode == OpCode.DIV:\\n                b = self.pop()\\n                a = self.pop()\\n                if b == 0:\\n                    raise RuntimeError('Division by zero')\\n                self.push(a // b)\\n            elif instruction.opcode == OpCode.PRINT:\\n                print(self.stack[-1])\\n            elif instruction.opcode == OpCode.HALT:\\n                break\\n            \\n            self.ip += 1\\n\\n# Example usage:\\n# program = [\\n#     Instruction(OpCode.PUSH, 10),\\n#     Instruction(OpCode.PUSH, 20),\\n#     Instruction(OpCode.ADD),\\n#     Instruction(OpCode.PRINT),\\n#     Instruction(OpCode.HALT)\\n# ]\\n# vm = VirtualMachine()\\n# vm.execute(program)",
                "hint": "Implement stack operations and instruction execution loop",
                "points": 15,
                "explanation": "Virtual machines execute instructions by manipulating a stack and maintaining program state.",
                "key_points": "- Stack operations\n- Instruction set\n- Program execution"
            },
            {
                "id": "ph22",
                "category": "programming",
                "title": "K-tech Somali: Memory Allocator",
                "description": "Implement a simple memory allocator with support for allocation and deallocation of memory blocks.",
                "answer": "from typing import Optional, Dict\n\nclass MemoryBlock:\\n    def __init__(self, size: int, start: int, is_free: bool = True):\\n        self.size = size\\n        self.start = start\\n        self.is_free = is_free\\n        self.next: Optional[MemoryBlock] = None\\n\\nclass MemoryAllocator:\\n    def __init__(self, total_size: int):\\n        self.total_size = total_size\\n        self.head = MemoryBlock(total_size, 0)\\n        self.allocations: Dict[int, MemoryBlock] = {}\\n    \\n    def allocate(self, size: int) -> Optional[int]:\\n        current = self.head\\n        while current:\\n            if current.is_free and current.size >= size:\\n                if current.size > size:\\n                    # Split block\\n                    new_block = MemoryBlock(\\n                        current.size - size,\\n                        current.start + size\\n                    )\\n                    new_block.next = current.next\\n                    current.size = size\\n                    current.next = new_block\\n                \\n                current.is_free = False\\n                self.allocations[current.start] = current\\n                return current.start\\n            current = current.next\\n        return None  # No suitable block found\\n    \\n    def free(self, ptr: int) -> bool:\\n        if ptr not in self.allocations:\\n            return False\\n        \\n        block = self.allocations[ptr]\\n        block.is_free = True\\n        del self.allocations[ptr]\\n        \\n        # Merge with next block if free\\n        if block.next and block.next.is_free:\\n            block.size += block.next.size\\n            block.next = block.next.next\\n        \\n        # Merge with previous block if free\\n        current = self.head\\n        while current and current.next != block:\\n            current = current.next\\n        \\n        if current and current.is_free:\\n            current.size += block.size\\n            current.next = block.next\\n        \\n        return True\\n    \\n    def get_free_memory(self) -> int:\\n        free_memory = 0\\n        current = self.head\\n        while current:\\n            if current.is_free:\\n                free_memory += current.size\\n            current = current.next\\n        return free_memory",
                "hint": "Use linked list of memory blocks and implement block splitting/merging",
                "points": 15,
                "explanation": "Memory allocators manage memory blocks efficiently by tracking allocations and merging free blocks.",
                "key_points": "- Memory management\n- Block allocation\n- Memory fragmentation"
            },
            {
                "id": "ph23",
                "category": "programming",
                "title": "K-tech Somali: Distributed Lock Manager",
                "description": "Implement a distributed lock manager with deadlock detection and prevention using a wait-for graph.",
                "answer": "import threading\nfrom collections import defaultdict\n\nclass DistributedLockManager:\n    def __init__(self):\n        self.locks = {}\n        self.wait_for = defaultdict(set)\n        self.lock = threading.Lock()\n    \n    def acquire_lock(self, transaction_id, resource_id):\n        with self.lock:\n            if resource_id in self.locks:\n                holder = self.locks[resource_id]\n                self.wait_for[transaction_id].add(holder)\n                if self._detect_deadlock(transaction_id):\n                    self.wait_for[transaction_id].remove(holder)\n                    raise DeadlockException(f'Deadlock detected for transaction {transaction_id}')\n                return False\n            self.locks[resource_id] = transaction_id\n            return True\n    \n    def release_lock(self, transaction_id, resource_id):\n        with self.lock:\n            if resource_id in self.locks and self.locks[resource_id] == transaction_id:\n                del self.locks[resource_id]\n                # Remove from wait-for graph\n                for waits in self.wait_for.values():\n                    waits.discard(transaction_id)\n    \n    def _detect_deadlock(self, start_tid, visited=None):\n        if visited is None:\n            visited = set()\n        if start_tid in visited:\n            return True\n        visited.add(start_tid)\n        for next_tid in self.wait_for[start_tid]:\n            if self._detect_deadlock(next_tid, visited):\n                return True\n        visited.remove(start_tid)\n        return False",
                "hint": "Use a wait-for graph to detect cycles (deadlocks)",
                "points": 15,
                "explanation": "A distributed lock manager handles resource locking across distributed systems, using deadlock detection to prevent circular wait conditions.",
                "key_points": "- Distributed systems\n- Lock management\n- Deadlock detection\n- Graph algorithms"
            },
            {
                "id": "ph24",
                "category": "programming",
                "title": "K-tech Somali: Time Series Database",
                "description": "Implement a time series database with efficient storage and querying capabilities, supporting downsampling and aggregation.",
                "answer": "from collections import defaultdict\nimport bisect\nfrom datetime import datetime, timedelta\n\nclass TimeSeriesDB:\n    def __init__(self):\n        self.series = defaultdict(list)\n        self.timestamps = []\n        self.values = defaultdict(list)\n    \n    def insert(self, series_name, timestamp, value):\n        idx = bisect.bisect_left(self.timestamps, timestamp)\n        self.timestamps.insert(idx, timestamp)\n        self.values[series_name].insert(idx, value)\n    \n    def query_range(self, series_name, start_time, end_time, aggregation='avg', interval=None):\n        start_idx = bisect.bisect_left(self.timestamps, start_time)\n        end_idx = bisect.bisect_right(self.timestamps, end_time)\n        \n        if interval:\n            return self._downsample(\n                series_name, start_idx, end_idx,\n                interval, aggregation\n            )\n        \n        values = self.values[series_name][start_idx:end_idx]\n        if not values:\n            return []\n        \n        if aggregation == 'avg':\n            return sum(values) / len(values)\n        elif aggregation == 'sum':\n            return sum(values)\n        elif aggregation == 'max':\n            return max(values)\n        elif aggregation == 'min':\n            return min(values)\n    \n    def _downsample(self, series_name, start_idx, end_idx, interval, aggregation):\n        if start_idx >= end_idx:\n            return []\n        \n        result = []\n        current_time = self.timestamps[start_idx]\n        bucket_values = []\n        \n        for i in range(start_idx, end_idx):\n            if self.timestamps[i] - current_time >= interval:\n                if bucket_values:\n                    if aggregation == 'avg':\n                        value = sum(bucket_values) / len(bucket_values)\n                    elif aggregation == 'sum':\n                        value = sum(bucket_values)\n                    elif aggregation == 'max':\n                        value = max(bucket_values)\n                    elif aggregation == 'min':\n                        value = min(bucket_values)\n                    \n                    result.append((current_time, value))\n                current_time += interval\n                bucket_values = []\n            \n            bucket_values.append(self.values[series_name][i])\n        \n        if bucket_values:\n            if aggregation == 'avg':\n                value = sum(bucket_values) / len(bucket_values)\n            elif aggregation == 'sum':\n                value = sum(bucket_values)\n            elif aggregation == 'max':\n                value = max(bucket_values)\n            elif aggregation == 'min':\n                value = min(bucket_values)\n            \n            result.append((current_time, value))\n        \n        return result",
                "hint": "Use binary search for efficient time-based queries and implement downsampling",
                "points": 15,
                "explanation": "Time series databases efficiently store and query time-based data, with features like downsampling for handling large datasets.",
                "key_points": "- Time series data\n- Binary search\n- Data aggregation\n- Efficient storage"
            },
            {
                "id": "ph25",
                "category": "programming",
                "title": "K-tech Somali: Stream Processing Engine",
                "description": "Implement a stream processing engine that supports windowed operations and aggregations on continuous data streams.",
                "answer": "from collections import deque\nfrom datetime import datetime, timedelta\n\nclass StreamProcessor:\n    def __init__(self):\n        self.streams = {}\n        self.windows = {}\n        self.processors = {}\n    \n    def create_stream(self, stream_id):\n        self.streams[stream_id] = deque()\n        self.windows[stream_id] = {}\n    \n    def add_window(self, stream_id, window_id, size, slide=None):\n        self.windows[stream_id][window_id] = {\n            'size': size,\n            'slide': slide or size,\n            'buffer': deque(),\n            'last_emit': None\n        }\n    \n    def add_processor(self, stream_id, window_id, func):\n        key = (stream_id, window_id)\n        self.processors[key] = func\n    \n    def process_event(self, stream_id, timestamp, value):\n        self.streams[stream_id].append((timestamp, value))\n        \n        for window_id, window in self.windows[stream_id].items():\n            window['buffer'].append((timestamp, value))\n            \n            # Remove old events\n            while window['buffer'] and \\\n                  window['buffer'][0][0] < timestamp - window['size']:\n                window['buffer'].popleft()\n            \n            # Check if we should emit\n            if not window['last_emit'] or \\\n               timestamp - window['last_emit'] >= window['slide']:\n                if (stream_id, window_id) in self.processors:\n                    processor = self.processors[(stream_id, window_id)]\n                    result = processor(list(window['buffer']))\n                    window['last_emit'] = timestamp\n                    yield window_id, result\n    \n    def query_window(self, stream_id, window_id, aggregation):\n        if stream_id not in self.windows or \\\n           window_id not in self.windows[stream_id]:\n            return None\n        \n        window = self.windows[stream_id][window_id]\n        values = [v for _, v in window['buffer']]\n        \n        if aggregation == 'sum':\n            return sum(values)\n        elif aggregation == 'avg':\n            return sum(values) / len(values) if values else None\n        elif aggregation == 'count':\n            return len(values)\n        elif aggregation == 'max':\n            return max(values) if values else None\n        elif aggregation == 'min':\n            return min(values) if values else None",
                "hint": "Use sliding windows and event-time processing",
                "points": 15,
                "explanation": "Stream processing engines handle continuous data streams with windowing operations for real-time analytics.",
                "key_points": "- Stream processing\n- Window operations\n- Event time\n- Real-time analytics"
            },
            {
                "id": "ph26",
                "category": "programming",
                "title": "K-tech Somali: Distributed Cache",
                "description": "Implement a distributed cache system with support for cache coherence, eviction policies, and replication.",
                "answer": "import socket\nimport threading\nimport time\nimport json\nfrom typing import Dict, Any, List, Optional\nfrom collections import OrderedDict\n\nclass CacheNode:\n    def __init__(self, node_id: str, capacity: int):\n        self.node_id = node_id\n        self.capacity = capacity\n        self.cache: OrderedDict[str, Any] = OrderedDict()\n        self.peers: Dict[str, socket.socket] = {}\n        self.lock = threading.Lock()\n        self.version_map: Dict[str, int] = {}\n    \n    def connect_peer(self, peer_id: str, peer_socket: socket.socket):\n        self.peers[peer_id] = peer_socket\n    \n    def get(self, key: str) -> Optional[Any]:\n        with self.lock:\n            if key in self.cache:\n                value = self.cache[key]\n                # Move to end (most recently used)\n                self.cache.move_to_end(key)\n                return value\n            return None\n    \n    def put(self, key: str, value: Any):\n        with self.lock:\n            if key in self.cache:\n                self.cache.move_to_end(key)\n            else:\n                if len(self.cache) >= self.capacity:\n                    # Remove least recently used item\n                    self.cache.popitem(last=False)\n            \n            self.cache[key] = value\n            self.version_map[key] = self.version_map.get(key, 0) + 1\n            \n            # Notify peers\n            self._notify_peers(key, value, self.version_map[key])\n    \n    def _notify_peers(self, key: str, value: Any, version: int):\n        message = {\n            'type': 'update',\n            'key': key,\n            'value': value,\n            'version': version,\n            'source': self.node_id\n        }\n        \n        for peer_socket in self.peers.values():\n            try:\n                peer_socket.send(json.dumps(message).encode())\n            except:\n                continue\n    \n    def handle_peer_update(self, message: Dict[str, Any]):\n        key = message['key']\n        value = message['value']\n        version = message['version']\n        \n        with self.lock:\n            current_version = self.version_map.get(key, 0)\n            if version > current_version:\n                self.put(key, value)\n                self.version_map[key] = version\n    \n    def invalidate(self, key: str):\n        with self.lock:\n            if key in self.cache:\n                del self.cache[key]\n                del self.version_map[key]\n    \n    def clear(self):\n        with self.lock:\n            self.cache.clear()\n            self.version_map.clear()",
                "hint": "Use LRU eviction policy and version numbers for cache coherence",
                "points": 15,
                "explanation": "A distributed cache system improves application performance by storing frequently accessed data across multiple nodes.",
                "key_points": "- Cache coherence\n- LRU eviction\n- Peer synchronization\n- Version control"
            },
            {
                "id": "ph27",
                "category": "programming",
                "title": "K-tech Somali: Custom Virtual Machine",
                "description": "Implement a simple virtual machine that can execute a custom bytecode instruction set with basic arithmetic, control flow, and memory operations.",
                "answer": "from dataclasses import dataclass\nfrom typing import List, Dict, Any\n\n@dataclass\nclass Instruction:\n    opcode: str\n    operands: List[Any]\n\nclass VirtualMachine:\n    def __init__(self):\n        self.stack = []\n        self.memory = [0] * 256\n        self.registers = {'ip': 0, 'sp': -1}\n        self.instructions = []\n    \n    def load_program(self, bytecode: List[Instruction]):\n        self.instructions = bytecode\n        self.registers['ip'] = 0\n        self.registers['sp'] = -1\n        self.stack = []\n    \n    def push(self, value):\n        self.stack.append(value)\n        self.registers['sp'] += 1\n    \n    def pop(self):\n        if self.registers['sp'] < 0:\n            raise Exception('Stack underflow')\n        value = self.stack.pop()\n        self.registers['sp'] -= 1\n        return value\n    \n    def execute_instruction(self, instruction: Instruction):\n        if instruction.opcode == 'PUSH':\n            self.push(instruction.operands[0])\n        \n        elif instruction.opcode == 'POP':\n            self.pop()\n        \n        elif instruction.opcode == 'ADD':\n            b = self.pop()\n            a = self.pop()\n            self.push(a + b)\n        \n        elif instruction.opcode == 'SUB':\n            b = self.pop()\n            a = self.pop()\n            self.push(a - b)\n        \n        elif instruction.opcode == 'MUL':\n            b = self.pop()\n            a = self.pop()\n            self.push(a * b)\n        \n        elif instruction.opcode == 'DIV':\n            b = self.pop()\n            a = self.pop()\n            self.push(a // b)\n        \n        elif instruction.opcode == 'STORE':\n            addr = instruction.operands[0]\n            value = self.pop()\n            self.memory[addr] = value\n        \n        elif instruction.opcode == 'LOAD':\n            addr = instruction.operands[0]\n            self.push(self.memory[addr])\n        \n        elif instruction.opcode == 'JMP':\n            self.registers['ip'] = instruction.operands[0] - 1\n        \n        elif instruction.opcode == 'JZ':\n            value = self.pop()\n            if value == 0:\n                self.registers['ip'] = instruction.operands[0] - 1\n        \n        self.registers['ip'] += 1\n    \n    def run(self):\n        while self.registers['ip'] < len(self.instructions):\n            instruction = self.instructions[self.registers['ip']]\n            self.execute_instruction(instruction)\n        return self.stack",
                "hint": "Start with basic arithmetic operations and gradually add control flow and memory management",
                "points": 15,
                "explanation": "A virtual machine provides an abstraction layer between hardware and software, enabling platform independence and security isolation.",
                "key_points": "- Instruction set architecture\n- Stack-based operations\n- Memory management\n- Control flow instructions"
            },
            {
                "id": "ph28",
                "category": "programming",
                "title": "K-tech Somali: Binary Tree Serialization",
                "description": "Implement functions to serialize a binary tree to a string and deserialize it back to a tree structure. The tree nodes contain integer values.",
                "answer": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef serialize(root):\n    if not root:\n        return 'null'\n    return f'{root.val},{serialize(root.left)},{serialize(root.right)}'\n\ndef deserialize(data):\n    def dfs():\n        val = next(values)\n        if val == 'null':\n            return None\n        node = TreeNode(int(val))\n        node.left = dfs()\n        node.right = dfs()\n        return node\n    \n    values = iter(data.split(','))\n    return dfs()",
                "hint": "Use a preorder traversal and handle null nodes with a special marker",
                "points": 15,
                "explanation": "Tree serialization allows storing tree structures in a format that can be easily transmitted or stored.",
                "key_points": "- Tree traversal\n- String parsing\n- Recursive algorithms\n- Data structure conversion"
            },
            {
                "id": "ph29",
                "category": "programming",
                "title": "K-tech Somali: Task Scheduler",
                "description": "Implement a task scheduler that can execute tasks after a specified delay and support periodic task execution with a given interval.",
                "answer": "import time\nfrom threading import Thread, Lock\nfrom queue import PriorityQueue\nfrom dataclasses import dataclass\n\n@dataclass(order=True)\nclass Task:\n    execute_at: float\n    interval: float\n    action: callable\n\nclass Scheduler:\n    def __init__(self):\n        self.tasks = PriorityQueue()\n        self.lock = Lock()\n        self.running = True\n        Thread(target=self._run).start()\n    \n    def schedule(self, delay, action, interval=0):\n        with self.lock:\n            execute_at = time.time() + delay\n            task = Task(execute_at, interval, action)\n            self.tasks.put(task)\n    \n    def _run(self):\n        while self.running:\n            if self.tasks.empty():\n                time.sleep(0.1)\n                continue\n            \n            task = self.tasks.get()\n            now = time.time()\n            \n            if now < task.execute_at:\n                time.sleep(task.execute_at - now)\n            \n            task.action()\n            \n            if task.interval > 0:\n                task.execute_at = now + task.interval\n                self.tasks.put(task)\n    \n    def stop(self):\n        self.running = False",
                "hint": "Use a priority queue to order tasks by execution time",
                "points": 15,
                "explanation": "A task scheduler manages the execution of tasks at specific times or intervals.",
                "key_points": "- Threading\n- Priority queue\n- Task management\n- Time handling"
            },
            {
                "id": "ph30",
                "category": "programming",
                "title": "K-tech Somali: Custom JSON Parser",
                "description": "Implement a simple JSON parser that can parse basic JSON data types (strings, numbers, booleans, null, arrays, and objects).",
                "answer": "def parse_json(s: str):\n    def parse_value(i):\n        while i < len(s) and s[i].isspace():\n            i += 1\n        \n        if i >= len(s):\n            raise ValueError('Unexpected end of input')\n        \n        if s[i] == '{':\n            return parse_object(i + 1)\n        elif s[i] == '[':\n            return parse_array(i + 1)\n        elif s[i] == '\"':\n            return parse_string(i + 1)\n        elif s[i].isdigit() or s[i] == '-':\n            return parse_number(i)\n        elif s[i:i+4] == 'true':\n            return True, i + 4\n        elif s[i:i+5] == 'false':\n            return False, i + 5\n        elif s[i:i+4] == 'null':\n            return None, i + 4\n        raise ValueError(f'Invalid JSON at position {i}')\n    \n    def parse_object(i):\n        obj = {}\n        while i < len(s) and s[i].isspace():\n            i += 1\n        if s[i] == '}':\n            return obj, i + 1\n        \n        while True:\n            key, i = parse_string(i)\n            while i < len(s) and s[i].isspace():\n                i += 1\n            if s[i] != ':':\n                raise ValueError(f'Expected : at position {i}')\n            i += 1\n            value, i = parse_value(i)\n            obj[key] = value\n            \n            while i < len(s) and s[i].isspace():\n                i += 1\n            if s[i] == '}':\n                return obj, i + 1\n            if s[i] != ',':\n                raise ValueError(f'Expected , or }} at position {i}')\n            i += 1\n    \n    def parse_array(i):\n        arr = []\n        while i < len(s) and s[i].isspace():\n            i += 1\n        if s[i] == ']':\n            return arr, i + 1\n        \n        while True:\n            value, i = parse_value(i)\n            arr.append(value)\n            \n            while i < len(s) and s[i].isspace():\n                i += 1\n            if s[i] == ']':\n                return arr, i + 1\n            if s[i] != ',':\n                raise ValueError(f'Expected , or ] at position {i}')\n            i += 1\n    \n    def parse_string(i):\n        result = ''\n        while i < len(s) and s[i] != '\"':\n            if s[i] == '\\\\':\n                i += 1\n                if i >= len(s):\n                    raise ValueError('Unexpected end of string')\n                result += s[i]\n            else:\n                result += s[i]\n            i += 1\n        return result, i + 1\n    \n    def parse_number(i):\n        start = i\n        while i < len(s) and (s[i].isdigit() or s[i] in '.-+e'):\n            i += 1\n        return float(s[start:i]), i\n    \n    value, i = parse_value(0)\n    while i < len(s) and s[i].isspace():\n        i += 1\n    if i < len(s):\n        raise ValueError(f'Extra data after JSON at position {i}')\n    return value",
                "hint": "Break down the parsing into separate functions for each data type",
                "points": 15,
                "explanation": "A JSON parser converts JSON text into data structures by following the JSON specification.",
                "key_points": "- Recursive descent parsing\n- String handling\n- Data type conversion\n- Error handling"
            },
            {
                "id": "ph31",
                "category": "programming",
                "title": "K-tech Somali: LRU Cache",
                "description": "Implement a Least Recently Used (LRU) cache with a specified capacity. When the cache is full, the least recently used item should be removed before adding a new item.",
                "answer": "from collections import OrderedDict\n\nclass LRUCache:\n    def __init__(self, capacity: int):\n        self.capacity = capacity\n        self.cache = OrderedDict()\n    \n    def get(self, key: int) -> int:\n        if key not in self.cache:\n            return -1\n        # Move to end (most recently used)\n        self.cache.move_to_end(key)\n        return self.cache[key]\n    \n    def put(self, key: int, value: int) -> None:\n        if key in self.cache:\n            # Move to end and update value\n            self.cache.move_to_end(key)\n        else:\n            # Remove least recently used if at capacity\n            if len(self.cache) >= self.capacity:\n                self.cache.popitem(last=False)\n        self.cache[key] = value",
                "hint": "Use OrderedDict to maintain insertion order and implement the LRU policy",
                "points": 15,
                "explanation": "An LRU cache maintains a fixed-size cache of items, removing the least recently used item when full.",
                "key_points": "- Cache implementation\n- Ordered dictionary\n- Eviction policy\n- Time complexity"
            },
            {
                "id": "ph32",
                "category": "programming",
                "title": "K-tech Somali: Rate Limiter",
                "description": "Implement a rate limiter that allows a maximum number of requests within a specified time window. Use the token bucket algorithm.",
                "answer": "import time\nfrom dataclasses import dataclass\nfrom typing import Dict\n\n@dataclass\nclass TokenBucket:\n    capacity: int\n    refill_rate: float\n    tokens: float = 0.0\n    last_refill: float = time.time()\n\nclass RateLimiter:\n    def __init__(self):\n        self.buckets: Dict[str, TokenBucket] = {}\n    \n    def add_limit(self, key: str, capacity: int, refill_rate: float):\n        self.buckets[key] = TokenBucket(capacity, refill_rate, capacity)\n    \n    def _refill(self, bucket: TokenBucket):\n        now = time.time()\n        time_passed = now - bucket.last_refill\n        new_tokens = time_passed * bucket.refill_rate\n        bucket.tokens = min(bucket.capacity, bucket.tokens + new_tokens)\n        bucket.last_refill = now\n    \n    def try_acquire(self, key: str, tokens: int = 1) -> bool:\n        if key not in self.buckets:\n            return False\n        \n        bucket = self.buckets[key]\n        self._refill(bucket)\n        \n        if bucket.tokens >= tokens:\n            bucket.tokens -= tokens\n            return True\n        return False",
                "hint": "Use the token bucket algorithm with periodic token refills",
                "points": 15,
                "explanation": "A rate limiter controls the rate of requests to protect services from overload.",
                "key_points": "- Token bucket algorithm\n- Time-based refill\n- Request throttling\n- Resource protection"
            },
            {
                "id": "ph33",
                "category": "programming",
                "title": "K-tech Somali: Event Emitter",
                "description": "Implement an event emitter class that supports subscribing to events, emitting events with data, and unsubscribing from events.",
                "answer": "from typing import Dict, List, Callable, Any\n\nclass EventEmitter:\n    def __init__(self):\n        self.listeners: Dict[str, List[Callable]] = {}\n    \n    def on(self, event: str, callback: Callable) -> Callable:\n        if event not in self.listeners:\n            self.listeners[event] = []\n        self.listeners[event].append(callback)\n        \n        def unsubscribe():\n            if event in self.listeners and callback in self.listeners[event]:\n                self.listeners[event].remove(callback)\n        return unsubscribe\n    \n    def once(self, event: str, callback: Callable) -> Callable:\n        def one_time_callback(*args, **kwargs):\n            unsubscribe()\n            callback(*args, **kwargs)\n        \n        unsubscribe = self.on(event, one_time_callback)\n        return unsubscribe\n    \n    def emit(self, event: str, *args, **kwargs) -> bool:\n        if event not in self.listeners:\n            return False\n        \n        for callback in self.listeners[event]:\n            callback(*args, **kwargs)\n        return True\n    \n    def remove_all_listeners(self, event: str = None) -> None:\n        if event:\n            self.listeners[event] = []\n        else:\n            self.listeners.clear()",
                "hint": "Use a dictionary to store event callbacks and implement one-time event listeners",
                "points": 15,
                "explanation": "Event emitters enable asynchronous communication between components through a publish-subscribe pattern.",
                "key_points": "- Event handling\n- Callback management\n- Pub/sub pattern\n- One-time events"
            },
            {
                "id": "ph34",
                "category": "programming",
                "title": "K-tech Somali: Connection Pool",
                "description": "Implement a connection pool that manages a fixed number of reusable connections with timeout and health check features.",
                "answer": "import time\nfrom typing import List, Optional\nfrom dataclasses import dataclass\nfrom threading import Lock\n\n@dataclass\nclass PooledConnection:\n    connection: Any\n    last_used: float\n    in_use: bool\n    created_at: float\n\nclass ConnectionPool:\n    def __init__(self, create_connection, max_size: int = 10,\n                 timeout: float = 30, max_age: float = 300):\n        self.create_connection = create_connection\n        self.max_size = max_size\n        self.timeout = timeout\n        self.max_age = max_age\n        self.pool: List[PooledConnection] = []\n        self.lock = Lock()\n    \n    def get_connection(self) -> Optional[Any]:\n        with self.lock:\n            self._remove_stale_connections()\n            \n            # Try to find an available connection\n            for conn in self.pool:\n                if not conn.in_use:\n                    conn.in_use = True\n                    conn.last_used = time.time()\n                    return conn.connection\n            \n            # Create new connection if pool not full\n            if len(self.pool) < self.max_size:\n                connection = self.create_connection()\n                pooled = PooledConnection(\n                    connection=connection,\n                    last_used=time.time(),\n                    in_use=True,\n                    created_at=time.time()\n                )\n                self.pool.append(pooled)\n                return connection\n            \n            return None\n    \n    def release_connection(self, connection: Any) -> None:\n        with self.lock:\n            for conn in self.pool:\n                if conn.connection == connection:\n                    conn.in_use = False\n                    conn.last_used = time.time()\n                    break\n    \n    def _remove_stale_connections(self) -> None:\n        now = time.time()\n        self.pool = [\n            conn for conn in self.pool\n            if not (\n                (now - conn.last_used > self.timeout and not conn.in_use) or\n                (now - conn.created_at > self.max_age)\n            )\n        ]",
                "hint": "Use a list of connection objects with metadata and implement connection lifecycle management",
                "points": 15,
                "explanation": "Connection pools improve performance by reusing expensive connections instead of creating new ones for each request.",
                "key_points": "- Resource pooling\n- Connection management\n- Thread safety\n- Resource cleanup"
            },
            {
                "id": "ph35",
                "category": "programming",
                "title": "K-tech Somali: Object Pool",
                "description": "Implement a generic object pool that can manage and reuse expensive objects with validation and cleanup capabilities.",
                "answer": "from typing import TypeVar, Generic, Callable, List, Optional\nfrom dataclasses import dataclass\nfrom threading import Lock\nimport time\n\nT = TypeVar('T')\n\n@dataclass\nclass PooledObject(Generic[T]):\n    obj: T\n    created_at: float\n    last_used: float\n    in_use: bool\n\nclass ObjectPool(Generic[T]):\n    def __init__(self, factory: Callable[[], T],\n                 validator: Callable[[T], bool],\n                 cleanup: Callable[[T], None],\n                 max_size: int = 10,\n                 max_age: float = 300):\n        self.factory = factory\n        self.validator = validator\n        self.cleanup = cleanup\n        self.max_size = max_size\n        self.max_age = max_age\n        self.pool: List[PooledObject[T]] = []\n        self.lock = Lock()\n    \n    def acquire(self) -> Optional[T]:\n        with self.lock:\n            self._remove_invalid_objects()\n            \n            # Find available object\n            for pooled in self.pool:\n                if not pooled.in_use and self.validator(pooled.obj):\n                    pooled.in_use = True\n                    pooled.last_used = time.time()\n                    return pooled.obj\n            \n            # Create new object if pool not full\n            if len(self.pool) < self.max_size:\n                obj = self.factory()\n                if self.validator(obj):\n                    pooled = PooledObject(\n                        obj=obj,\n                        created_at=time.time(),\n                        last_used=time.time(),\n                        in_use=True\n                    )\n                    self.pool.append(pooled)\n                    return obj\n            \n            return None\n    \n    def release(self, obj: T) -> None:\n        with self.lock:\n            for pooled in self.pool:\n                if pooled.obj == obj:\n                    if self.validator(obj):\n                        pooled.in_use = False\n                        pooled.last_used = time.time()\n                    else:\n                        self.cleanup(obj)\n                        self.pool.remove(pooled)\n                    break\n    \n    def _remove_invalid_objects(self) -> None:\n        now = time.time()\n        to_remove = [\n            pooled for pooled in self.pool\n            if (\n                not self.validator(pooled.obj) or\n                (now - pooled.created_at > self.max_age)\n            )\n        ]\n        \n        for pooled in to_remove:\n            self.cleanup(pooled.obj)\n            self.pool.remove(pooled)",
                "hint": "Use generics to create a type-safe pool and implement object lifecycle management",
                "points": 15,
                "explanation": "Object pools optimize resource usage by reusing expensive objects and managing their lifecycle.",
                "key_points": "- Generic types\n- Resource management\n- Object validation\n- Cleanup handling"
            },
            {
                "id": "ph36",
                "category": "programming",
                "title": "K-tech Somali: Job Queue",
                "description": "Implement a job queue system that can schedule, execute, and track the status of background jobs with retry capabilities.",
                "answer": "from dataclasses import dataclass\nfrom enum import Enum\nfrom typing import Dict, List, Callable, Any\nfrom queue import PriorityQueue\nfrom threading import Thread, Lock\nimport time\n\nclass JobStatus(Enum):\n    PENDING = 'pending'\n    RUNNING = 'running'\n    COMPLETED = 'completed'\n    FAILED = 'failed'\n\n@dataclass\nclass Job:\n    id: str\n    func: Callable\n    args: tuple\n    kwargs: dict\n    priority: int\n    max_retries: int\n    retries: int = 0\n    status: JobStatus = JobStatus.PENDING\n    result: Any = None\n    error: Exception = None\n\nclass JobQueue:\n    def __init__(self, num_workers: int = 3):\n        self.queue = PriorityQueue()\n        self.jobs: Dict[str, Job] = {}\n        self.lock = Lock()\n        self.workers: List[Thread] = []\n        self.running = True\n        \n        for _ in range(num_workers):\n            worker = Thread(target=self._worker_loop)\n            worker.daemon = True\n            worker.start()\n            self.workers.append(worker)\n    \n    def add_job(self, job_id: str, func: Callable,\n                args: tuple = (), kwargs: dict = None,\n                priority: int = 0, max_retries: int = 3) -> None:\n        kwargs = kwargs or {}\n        job = Job(\n            id=job_id,\n            func=func,\n            args=args,\n            kwargs=kwargs,\n            priority=priority,\n            max_retries=max_retries\n        )\n        \n        with self.lock:\n            self.jobs[job_id] = job\n            self.queue.put((priority, job_id))\n    \n    def get_job_status(self, job_id: str) -> Dict[str, Any]:\n        with self.lock:\n            if job_id not in self.jobs:\n                return {'error': 'Job not found'}\n            \n            job = self.jobs[job_id]\n            return {\n                'status': job.status.value,\n                'retries': job.retries,\n                'result': job.result,\n                'error': str(job.error) if job.error else None\n            }\n    \n    def _worker_loop(self) -> None:\n        while self.running:\n            try:\n                _, job_id = self.queue.get(timeout=1)\n                with self.lock:\n                    job = self.jobs[job_id]\n                    job.status = JobStatus.RUNNING\n                \n                try:\n                    result = job.func(*job.args, **job.kwargs)\n                    with self.lock:\n                        job.status = JobStatus.COMPLETED\n                        job.result = result\n                except Exception as e:\n                    with self.lock:\n                        if job.retries < job.max_retries:\n                            job.retries += 1\n                            job.status = JobStatus.PENDING\n                            self.queue.put((job.priority, job_id))\n                        else:\n                            job.status = JobStatus.FAILED\n                            job.error = e\n            except:\n                continue\n    \n    def shutdown(self) -> None:\n        self.running = False\n        for worker in self.workers:\n            worker.join()",
                "hint": "Use a priority queue for job scheduling and implement worker threads for execution",
                "points": 15,
                "explanation": "A job queue system enables asynchronous execution of tasks with priority and retry mechanisms.",
                "key_points": "- Job scheduling\n- Worker threads\n- Priority handling\n- Error recovery"
            },
            {
                "id": "ph37",
                "category": "programming",
                "title": "K-tech Somali: Custom Iterator",
                "description": "Implement a circular buffer with a custom iterator that supports iteration over a fixed-size circular buffer of elements.",
                "answer": "from typing import Generic, TypeVar, Optional, Iterator\n\nT = TypeVar('T')\n\nclass CircularBuffer(Generic[T]):\n    def __init__(self, capacity: int):\n        self.capacity = capacity\n        self.buffer = [None] * capacity\n        self.head = 0  # Write position\n        self.tail = 0  # Read position\n        self.size = 0\n    \n    def push(self, item: T) -> None:\n        self.buffer[self.head] = item\n        self.head = (self.head + 1) % self.capacity\n        if self.size < self.capacity:\n            self.size += 1\n        else:\n            self.tail = (self.tail + 1) % self.capacity\n    \n    def pop(self) -> Optional[T]:\n        if self.size == 0:\n            return None\n        item = self.buffer[self.tail]\n        self.tail = (self.tail + 1) % self.capacity\n        self.size -= 1\n        return item\n    \n    def __iter__(self) -> Iterator[T]:\n        return self.CircularIterator(self)\n    \n    class CircularIterator:\n        def __init__(self, buffer: 'CircularBuffer[T]'):\n            self.buffer = buffer\n            self.position = buffer.tail\n            self.items_seen = 0\n        \n        def __iter__(self) -> Iterator[T]:\n            return self\n        \n        def __next__(self) -> T:\n            if self.items_seen >= self.buffer.size:\n                raise StopIteration\n            item = self.buffer.buffer[self.position]\n            self.position = (self.position + 1) % self.buffer.capacity\n            self.items_seen += 1\n            return item",
                "hint": "Use a fixed-size array and track read/write positions with modulo arithmetic",
                "points": 15,
                "explanation": "A circular buffer is a fixed-size queue that wraps around when full, useful for buffering data streams.",
                "key_points": "- Custom iterators\n- Generic types\n- Circular data structure\n- Iterator protocol"
            },
            {
                "id": "ph38",
                "category": "programming",
                "title": "K-tech Somali: Thread Pool",
                "description": "Implement a thread pool that can execute tasks concurrently with a fixed number of worker threads and a task queue.",
                "answer": "from concurrent.futures import Future\nfrom queue import Queue\nfrom threading import Thread, Event\nfrom typing import Callable, List, Any\n\nclass ThreadPool:\n    def __init__(self, num_threads: int):\n        self.tasks = Queue()\n        self.workers: List[Thread] = []\n        self.shutdown_event = Event()\n        \n        for _ in range(num_threads):\n            worker = Thread(target=self._worker_loop)\n            worker.daemon = True\n            worker.start()\n            self.workers.append(worker)\n    \n    def _worker_loop(self) -> None:\n        while not self.shutdown_event.is_set():\n            try:\n                future, func, args, kwargs = self.tasks.get(timeout=0.1)\n                if future is None:\n                    break\n                \n                try:\n                    result = func(*args, **kwargs)\n                    future.set_result(result)\n                except Exception as e:\n                    future.set_exception(e)\n                finally:\n                    self.tasks.task_done()\n            except:\n                continue\n    \n    def submit(self, func: Callable, *args, **kwargs) -> Future:\n        future = Future()\n        if self.shutdown_event.is_set():\n            future.set_exception(RuntimeError('ThreadPool is shutting down'))\n            return future\n        \n        self.tasks.put((future, func, args, kwargs))\n        return future\n    \n    def shutdown(self, wait: bool = True) -> None:\n        self.shutdown_event.set()\n        \n        # Add None tasks to unblock workers\n        for _ in self.workers:\n            self.tasks.put((None, None, None, None))\n        \n        if wait:\n            for worker in self.workers:\n                worker.join()\n            self.workers.clear()",
                "hint": "Use a task queue and worker threads to process tasks concurrently",
                "points": 15,
                "explanation": "A thread pool manages a fixed set of threads to execute tasks concurrently, improving resource utilization.",
                "key_points": "- Thread management\n- Task queuing\n- Concurrent execution\n- Resource pooling"
            },
            {
                "id": "ph39",
                "category": "programming",
                "title": "K-tech Somali: Custom Context Manager",
                "description": "Implement a database transaction context manager that automatically handles commit and rollback operations.",
                "answer": "from typing import Any, Optional\nfrom contextlib import contextmanager\n\nclass DatabaseConnection:\n    def __init__(self):\n        self.in_transaction = False\n    \n    def execute(self, query: str) -> None:\n        # Simulated query execution\n        pass\n    \n    def commit(self) -> None:\n        if not self.in_transaction:\n            raise RuntimeError('No transaction is active')\n        self.in_transaction = False\n    \n    def rollback(self) -> None:\n        if not self.in_transaction:\n            raise RuntimeError('No transaction is active')\n        self.in_transaction = False\n    \n    def begin_transaction(self) -> None:\n        if self.in_transaction:\n            raise RuntimeError('Transaction already in progress')\n        self.in_transaction = True\n\nclass TransactionManager:\n    def __init__(self, connection: DatabaseConnection):\n        self.connection = connection\n        self.error: Optional[Exception] = None\n    \n    def __enter__(self) -> 'TransactionManager':\n        self.connection.begin_transaction()\n        return self\n    \n    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> bool:\n        if exc_type is not None:\n            self.error = exc_val\n            self.connection.rollback()\n            return False  # Re-raise the exception\n        \n        try:\n            self.connection.commit()\n            return True\n        except Exception as e:\n            self.error = e\n            self.connection.rollback()\n            raise\n\n@contextmanager\ndef transaction(connection: DatabaseConnection):\n    with TransactionManager(connection) as tm:\n        yield tm",
                "hint": "Use context manager protocol to handle transaction boundaries and error cases",
                "points": 15,
                "explanation": "A transaction context manager ensures database operations are atomic by handling commits and rollbacks automatically.",
                "key_points": "- Context managers\n- Transaction handling\n- Error management\n- Resource cleanup"
            },
            {
                "id": "ph40",
                "category": "programming",
                "title": "K-tech Somali: Custom Generator",
                "description": "Implement a memory-efficient generator that produces all possible combinations of elements from multiple iterables.",
                "answer": "from typing import TypeVar, List, Iterator, Any\nfrom itertools import chain\n\nT = TypeVar('T')\n\ndef combinations(*iterables: Iterator[T]) -> Iterator[List[T]]:\n    def _combine(current: List[T], remaining: List[Iterator[T]]) -> Iterator[List[T]]:\n        if not remaining:\n            yield current.copy()\n            return\n        \n        iterator = remaining[0]\n        next_remaining = remaining[1:]\n        \n        # Save iterator state\n        saved = []\n        try:\n            while True:\n                item = next(iterator)\n                saved.append(item)\n                current.append(item)\n                yield from _combine(current, next_remaining)\n                current.pop()\n        except StopIteration:\n            pass\n        \n        # Restore iterator state\n        iterator = chain(saved, iterator)\n        remaining[0] = iterator\n    \n    if not iterables:\n        yield []\n        return\n    \n    # Convert all iterables to iterators\n    iterators = [iter(it) for it in iterables]\n    yield from _combine([], iterators)\n\n# Example usage:\ndef range_generator(start: int, end: int) -> Iterator[int]:\n    current = start\n    while current < end:\n        yield current\n        current += 1\n\n# Generate combinations of numbers from different ranges\nranges = [\n    range_generator(0, 2),\n    range_generator(0, 3),\n    range_generator(0, 2)\n]\n\nfor combo in combinations(*ranges):\n    print(combo)  # Prints combinations like [0,0,0], [0,0,1], [0,1,0], etc.",
                "hint": "Use recursive generator function with iterator state management",
                "points": 15,
                "explanation": "A custom generator enables memory-efficient iteration over combinations by generating values on-demand.",
                "key_points": "- Generator functions\n- Iterator protocol\n- Memory efficiency\n- Recursive generation"
            },
            {
                "id": "ph41",
                "category": "programming",
                "title": "K-tech Somali: Custom Descriptor",
                "description": "Implement a custom descriptor that validates and converts attribute values according to specified type and validation rules.",
                "answer": "from typing import Any, Type, Callable, Dict, Optional\nfrom dataclasses import dataclass\n\n@dataclass\nclass Validator:\n    type_: Type\n    validators: list[Callable[[Any], bool]]\n    converter: Optional[Callable[[Any], Any]] = None\n    default: Any = None\n\nclass ValidatedProperty:\n    def __init__(self, validator: Validator):\n        self.validator = validator\n        self.name = ''\n        self.values: Dict[int, Any] = {}\n    \n    def __set_name__(self, owner: Type, name: str) -> None:\n        self.name = name\n    \n    def __get__(self, instance: Any, owner: Type) -> Any:\n        if instance is None:\n            return self\n        \n        if id(instance) not in self.values:\n            return self.validator.default\n        \n        return self.values[id(instance)]\n    \n    def __set__(self, instance: Any, value: Any) -> None:\n        if value is None and self.validator.default is not None:\n            value = self.validator.default\n        \n        if not isinstance(value, self.validator.type_):\n            if self.validator.converter:\n                try:\n                    value = self.validator.converter(value)\n                except (ValueError, TypeError) as e:\n                    raise ValueError(\n                        f'{self.name}: Cannot convert {value} to {self.validator.type_.__name__}'\n                    ) from e\n            else:\n                raise TypeError(\n                    f'{self.name}: Expected {self.validator.type_.__name__}, got {type(value).__name__}'\n                )\n        \n        for validator in self.validator.validators:\n            if not validator(value):\n                raise ValueError(\n                    f'{self.name}: Validation failed for value {value}'\n                )\n        \n        self.values[id(instance)] = value\n    \n    def __delete__(self, instance: Any) -> None:\n        self.values.pop(id(instance), None)\n\n# Example usage:\nclass Person:\n    age = ValidatedProperty(\n        Validator(\n            type_=int,\n            validators=[\n                lambda x: x >= 0,\n                lambda x: x <= 150\n            ],\n            converter=int,\n            default=0\n        )\n    )\n    \n    name = ValidatedProperty(\n        Validator(\n            type_=str,\n            validators=[\n                lambda x: len(x) >= 2,\n                lambda x: len(x) <= 50,\n                lambda x: x.strip() == x\n            ],\n            converter=str\n        )\n    )\n\n# Usage example:\nperson = Person()\nperson.age = '25'  # Automatically converted to int\nperson.name = 'John'  # Validated for length and whitespace\n\ntry:\n    person.age = -5  # Raises ValueError\nexcept ValueError:\n    pass\n\ntry:\n    person.name = ' Bob '  # Raises ValueError (has whitespace)\nexcept ValueError:\n    pass",
                "hint": "Use descriptor protocol to implement attribute access control and validation",
                "points": 15,
                "explanation": "Custom descriptors provide a way to control attribute access and implement validation and type conversion logic.",
                "key_points": "- Descriptors\n- Type validation\n- Value conversion\n- Attribute management"
            },
            {
                "id": "ph42",
                "category": "programming",
                "title": "K-tech Somali: Trie Implementation",
                "description": "Implement a Trie (prefix tree) data structure that supports inserting words, searching for words, and finding words with a given prefix.",
                "answer": "from typing import Dict, Optional\n\nclass TrieNode:\n    def __init__(self):\n        self.children: Dict[str, TrieNode] = {}\n        self.is_end = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word: str) -> None:\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.is_end = True\n    \n    def search(self, word: str) -> bool:\n        node = self._find_node(word)\n        return node is not None and node.is_end\n    \n    def starts_with(self, prefix: str) -> bool:\n        return self._find_node(prefix) is not None\n    \n    def _find_node(self, prefix: str) -> Optional[TrieNode]:\n        node = self.root\n        for char in prefix:\n            if char not in node.children:\n                return None\n            node = node.children[char]\n        return node\n    \n    def find_words_with_prefix(self, prefix: str) -> list[str]:\n        node = self._find_node(prefix)\n        if not node:\n            return []\n        \n        words = []\n        self._collect_words(node, prefix, words)\n        return words\n    \n    def _collect_words(self, node: TrieNode, prefix: str, words: list[str]) -> None:\n        if node.is_end:\n            words.append(prefix)\n        \n        for char, child in node.children.items():\n            self._collect_words(child, prefix + char, words)",
                "hint": "Use a tree structure where each node represents a character and contains links to child nodes",
                "points": 15,
                "explanation": "A Trie is an efficient data structure for storing and retrieving strings, commonly used in autocomplete and spell checkers.",
                "key_points": "- Tree data structure\n- String operations\n- Prefix matching\n- Recursive traversal"
            },
            {
                "id": "ph43",
                "category": "programming",
                "title": "K-tech Somali: Skip List",
                "description": "Implement a Skip List data structure that provides O(log n) average time complexity for insertion, deletion, and search operations.",
                "answer": "import random\nfrom typing import Optional, List\n\nclass Node:\n    def __init__(self, value: int, level: int):\n        self.value = value\n        self.forward: List[Optional[Node]] = [None] * (level + 1)\n\nclass SkipList:\n    def __init__(self, max_level: int = 16, p: float = 0.5):\n        self.max_level = max_level\n        self.p = p\n        self.level = 0\n        self.head = Node(-float('inf'), max_level)\n    \n    def _random_level(self) -> int:\n        level = 0\n        while random.random() < self.p and level < self.max_level:\n            level += 1\n        return level\n    \n    def insert(self, value: int) -> None:\n        update = [None] * (self.max_level + 1)\n        current = self.head\n        \n        for i in range(self.level, -1, -1):\n            while (current.forward[i] and \n                   current.forward[i].value < value):\n                current = current.forward[i]\n            update[i] = current\n        \n        level = self._random_level()\n        if level > self.level:\n            for i in range(self.level + 1, level + 1):\n                update[i] = self.head\n            self.level = level\n        \n        new_node = Node(value, level)\n        for i in range(level + 1):\n            new_node.forward[i] = update[i].forward[i]\n            update[i].forward[i] = new_node\n    \n    def delete(self, value: int) -> bool:\n        update = [None] * (self.max_level + 1)\n        current = self.head\n        \n        for i in range(self.level, -1, -1):\n            while (current.forward[i] and \n                   current.forward[i].value < value):\n                current = current.forward[i]\n            update[i] = current\n        \n        current = current.forward[0]\n        if current and current.value == value:\n            for i in range(self.level + 1):\n                if update[i].forward[i] != current:\n                    break\n                update[i].forward[i] = current.forward[i]\n            \n            while self.level > 0 and not self.head.forward[self.level]:\n                self.level -= 1\n            return True\n        return False\n    \n    def search(self, value: int) -> bool:\n        current = self.head\n        \n        for i in range(self.level, -1, -1):\n            while (current.forward[i] and \n                   current.forward[i].value < value):\n                current = current.forward[i]\n        \n        current = current.forward[0]\n        return current and current.value == value",
                "hint": "Use multiple layers of linked lists with probabilistic level assignment",
                "points": 15,
                "explanation": "A Skip List is a probabilistic data structure that allows for faster search within an ordered sequence of elements.",
                "key_points": "- Probabilistic data structure\n- Multiple levels\n- Logarithmic operations\n- Balanced structure"
            },
            {
                "id": "ph44",
                "category": "programming",
                "title": "K-tech Somali: Bloom Filter",
                "description": "Implement a Bloom Filter that can efficiently test whether an element is definitely not in a set or possibly in a set.",
                "answer": "import math\nfrom typing import Callable, List\nfrom hashlib import md5, sha1, sha256\n\nclass BloomFilter:\n    def __init__(self, size: int, num_hash_functions: int):\n        self.size = size\n        self.num_hash_functions = num_hash_functions\n        self.bit_array = [False] * size\n        self.hash_functions = self._create_hash_functions()\n    \n    def _create_hash_functions(self) -> List[Callable[[str], int]]:\n        def create_hash(salt: str) -> Callable[[str], int]:\n            def hash_func(item: str) -> int:\n                value = salt + str(item)\n                hash_obj = md5(value.encode())\n                return int(hash_obj.hexdigest(), 16) % self.size\n            return hash_func\n        \n        return [create_hash(f'salt{i}') for i in range(self.num_hash_functions)]\n    \n    def add(self, item: str) -> None:\n        for hash_function in self.hash_functions:\n            index = hash_function(item)\n            self.bit_array[index] = True\n    \n    def might_contain(self, item: str) -> bool:\n        return all(\n            self.bit_array[hash_function(item)]\n            for hash_function in self.hash_functions\n        )\n    \n    @staticmethod\n    def get_optimal_params(num_items: int, false_positive_rate: float) -> tuple[int, int]:\n        size = int(-num_items * math.log(false_positive_rate) / (math.log(2) ** 2))\n        num_hash_functions = int(size * math.log(2) / num_items)\n        return size, num_hash_functions",
                "hint": "Use multiple hash functions and a bit array to track potential membership",
                "points": 15,
                "explanation": "A Bloom Filter is a space-efficient probabilistic data structure used to test whether an element is a member of a set.",
                "key_points": "- Probabilistic data structure\n- Space efficiency\n- Multiple hash functions\n- False positive handling"
            },
            {
                "id": "ph45",
                "category": "programming",
                "title": "K-tech Somali: LFU Cache",
                "description": "Implement a Least Frequently Used (LFU) cache that removes the least frequently used item when the cache is full.",
                "answer": "from collections import defaultdict, OrderedDict\nfrom typing import Dict, Any, Optional\n\nclass LFUCache:\n    def __init__(self, capacity: int):\n        self.capacity = capacity\n        self.size = 0\n        self.min_freq = 0\n        self.key_freq: Dict[int, int] = {}\n        self.freq_keys: Dict[int, OrderedDict] = defaultdict(OrderedDict)\n    \n    def get(self, key: int) -> int:\n        if key not in self.key_freq:\n            return -1\n        \n        # Get current frequency and increase it\n        freq = self.key_freq[key]\n        value = self.freq_keys[freq][key]\n        \n        # Remove from current frequency\n        del self.freq_keys[freq][key]\n        \n        # Update min frequency if needed\n        if len(self.freq_keys[freq]) == 0 and freq == self.min_freq:\n            self.min_freq += 1\n        \n        # Add to new frequency\n        freq += 1\n        self.key_freq[key] = freq\n        self.freq_keys[freq][key] = value\n        \n        return value\n    \n    def put(self, key: int, value: int) -> None:\n        if self.capacity == 0:\n            return\n        \n        # If key exists, update value and frequency\n        if key in self.key_freq:\n            freq = self.key_freq[key]\n            self.freq_keys[freq][key] = value\n            self.get(key)  # Update frequency\n            return\n        \n        # If cache is full, remove least frequent item\n        if self.size >= self.capacity:\n            # Get least frequent items\n            lfu_dict = self.freq_keys[self.min_freq]\n            # Remove the first one (least recently used among least frequent)\n            lfu_key, _ = lfu_dict.popitem(last=False)\n            del self.key_freq[lfu_key]\n            self.size -= 1\n        \n        # Add new item with frequency 1\n        self.key_freq[key] = 1\n        self.freq_keys[1][key] = value\n        self.min_freq = 1\n        self.size += 1",
                "hint": "Use a combination of hash maps to track frequencies and maintain order within each frequency",
                "points": 15,
                "explanation": "An LFU cache evicts the least frequently used items first, with a tie-breaker based on least recently used.",
                "key_points": "- Frequency tracking\n- Cache eviction\n- O(1) operations\n- Frequency ordering"
            },
            {
                "id": "ph46",
                "category": "programming",
                "title": "K-tech Somali: Consistent Hashing",
                "description": "Implement a Consistent Hashing system that distributes keys across nodes while minimizing remapping when nodes are added or removed.",
                "answer": "import hashlib\nfrom typing import List, Optional, Dict\nfrom bisect import bisect_right\n\nclass ConsistentHash:\n    def __init__(self, num_replicas: int = 3):\n        self.num_replicas = num_replicas\n        self.ring: List[int] = []\n        self.node_map: Dict[int, str] = {}\n        self.nodes: Dict[str, List[int]] = {}\n    \n    def _hash(self, key: str) -> int:\n        return int(hashlib.md5(key.encode()).hexdigest(), 16)\n    \n    def add_node(self, node: str) -> None:\n        self.nodes[node] = []\n        for i in range(self.num_replicas):\n            hash_key = self._hash(f'{node}:{i}')\n            self.ring.insert(bisect_right(self.ring, hash_key), hash_key)\n            self.node_map[hash_key] = node\n            self.nodes[node].append(hash_key)\n    \n    def remove_node(self, node: str) -> None:\n        if node not in self.nodes:\n            return\n        for hash_key in self.nodes[node]:\n            index = bisect_right(self.ring, hash_key) - 1\n            del self.ring[index]\n            del self.node_map[hash_key]\n        del self.nodes[node]\n    \n    def get_node(self, key: str) -> Optional[str]:\n        if not self.ring:\n            return None\n        hash_key = self._hash(key)\n        index = bisect_right(self.ring, hash_key)\n        if index == len(self.ring):\n            index = 0\n        return self.node_map[self.ring[index]]\n    \n    def get_nodes(self, key: str, count: int) -> List[str]:\n        if not self.ring:\n            return []\n        result = []\n        seen = set()\n        hash_key = self._hash(key)\n        index = bisect_right(self.ring, hash_key)\n        if index == len(self.ring):\n            index = 0\n        while len(result) < min(count, len(self.nodes)):\n            node = self.node_map[self.ring[index]]\n            if node not in seen:\n                seen.add(node)\n                result.append(node)\n            index = (index + 1) % len(self.ring)\n        return result",
                "hint": "Use a hash ring with virtual nodes for better distribution",
                "points": 15,
                "explanation": "Consistent hashing minimizes the number of keys that need to be remapped when the set of nodes changes.",
                "key_points": "- Hash ring\n- Virtual nodes\n- Key distribution\n- Node management"
            },
            {
                "id": "ph47",
                "category": "programming",
                "title": "K-tech Somali: Distributed Rate Limiter",
                "description": "Implement a distributed rate limiter using Redis that can limit requests across multiple application instances.",
                "answer": "import time\nimport redis\nfrom typing import Optional\n\nclass DistributedRateLimiter:\n    def __init__(self, redis_client: redis.Redis, key_prefix: str,\n                 max_requests: int, window_seconds: int):\n        self.redis = redis_client\n        self.key_prefix = key_prefix\n        self.max_requests = max_requests\n        self.window_seconds = window_seconds\n    \n    def _get_window_key(self, key: str, window_number: int) -> str:\n        return f'{self.key_prefix}:{key}:{window_number}'\n    \n    def is_allowed(self, key: str) -> bool:\n        current_time = int(time.time())\n        window_number = current_time // self.window_seconds\n        \n        pipeline = self.redis.pipeline()\n        current_window_key = self._get_window_key(key, window_number)\n        prev_window_key = self._get_window_key(key, window_number - 1)\n        \n        # Get counts for current and previous windows\n        pipeline.get(current_window_key)\n        pipeline.get(prev_window_key)\n        current_count, prev_count = pipeline.execute()\n        \n        # Convert counts to integers, default to 0 if None\n        current_count = int(current_count) if current_count else 0\n        prev_count = int(prev_count) if prev_count else 0\n        \n        # Calculate weight of previous window\n        time_passed = current_time % self.window_seconds\n        weight = 1 - (time_passed / self.window_seconds)\n        weighted_prev_count = int(prev_count * weight)\n        \n        # Calculate total count\n        total_count = current_count + weighted_prev_count\n        \n        if total_count >= self.max_requests:\n            return False\n        \n        # Increment current window\n        pipeline.incr(current_window_key)\n        pipeline.expire(current_window_key, self.window_seconds * 2)\n        pipeline.execute()\n        \n        return True\n    \n    def get_remaining(self, key: str) -> int:\n        current_time = int(time.time())\n        window_number = current_time // self.window_seconds\n        \n        pipeline = self.redis.pipeline()\n        current_window_key = self._get_window_key(key, window_number)\n        prev_window_key = self._get_window_key(key, window_number - 1)\n        \n        pipeline.get(current_window_key)\n        pipeline.get(prev_window_key)\n        current_count, prev_count = pipeline.execute()\n        \n        current_count = int(current_count) if current_count else 0\n        prev_count = int(prev_count) if prev_count else 0\n        \n        time_passed = current_time % self.window_seconds\n        weight = 1 - (time_passed / self.window_seconds)\n        weighted_prev_count = int(prev_count * weight)\n        \n        total_count = current_count + weighted_prev_count\n        return max(0, self.max_requests - total_count)",
                "hint": "Use Redis for distributed state and implement sliding window rate limiting",
                "points": 15,
                "explanation": "A distributed rate limiter ensures consistent request limiting across multiple application instances.",
                "key_points": "- Distributed systems\n- Redis operations\n- Sliding window\n- Atomic operations"
            },
            {
                "id": "ph48",
                "category": "programming",
                "title": "K-tech Somali: Distributed Lock",
                "description": "Implement a distributed lock using Redis that provides mutual exclusion across multiple processes or servers.",
                "answer": "import time\nimport uuid\nfrom typing import Optional\nimport redis\n\nclass DistributedLock:\n    def __init__(self, redis_client: redis.Redis, lock_name: str,\n                 expire_seconds: int = 10, retry_times: int = 3,\n                 retry_delay: float = 0.2):\n        self.redis = redis_client\n        self.lock_name = lock_name\n        self.expire_seconds = expire_seconds\n        self.retry_times = retry_times\n        self.retry_delay = retry_delay\n        self.lock_key = f'lock:{self.lock_name}'\n        self.owner_id = str(uuid.uuid4())\n    \n    def acquire(self) -> bool:\n        for _ in range(self.retry_times):\n            # Try to acquire lock with owner ID and expiration\n            if self.redis.set(\n                self.lock_key,\n                self.owner_id,\n                nx=True,  # Only set if key doesn't exist\n                ex=self.expire_seconds\n            ):\n                return True\n            \n            time.sleep(self.retry_delay)\n        return False\n    \n    def release(self) -> bool:\n        # Lua script for atomic check-and-delete\n        script = \"\"\"\n        if redis.call('get', KEYS[1]) == ARGV[1] then\n            return redis.call('del', KEYS[1])\n        else\n            return 0\n        end\n        \"\"\"\n        \n        # Execute script atomically\n        result = self.redis.eval(\n            script,\n            1,  # Number of keys\n            self.lock_key,  # KEYS[1]\n            self.owner_id   # ARGV[1]\n        )\n        \n        return bool(result)\n    \n    def extend(self, additional_seconds: int) -> bool:\n        # Lua script for atomic check-and-extend\n        script = \"\"\"\n        if redis.call('get', KEYS[1]) == ARGV[1] then\n            return redis.call('expire', KEYS[1], ARGV[2])\n        else\n            return 0\n        end\n        \"\"\"\n        \n        # Execute script atomically\n        result = self.redis.eval(\n            script,\n            1,  # Number of keys\n            self.lock_key,  # KEYS[1]\n            self.owner_id,  # ARGV[1]\n            additional_seconds  # ARGV[2]\n        )\n        \n        return bool(result)\n    \n    def __enter__(self) -> 'DistributedLock':\n        if not self.acquire():\n            raise TimeoutError('Failed to acquire lock')\n        return self\n    \n    def __exit__(self, exc_type, exc_val, exc_tb) -> None:\n        self.release()",
                "hint": "Use Redis SET NX command and Lua scripts for atomic operations",
                "points": 15,
                "explanation": "A distributed lock ensures mutual exclusion in distributed systems by using Redis for coordination.",
                "key_points": "- Distributed systems\n- Atomic operations\n- Lock management\n- Resource safety"
            },
            {
                "id": "ph49",
                "category": "programming",
                "title": "K-tech Somali: Distributed Counter",
                "description": "Implement a distributed counter using Redis that can handle concurrent increments and decrements across multiple servers.",
                "answer": "import time\nfrom typing import Dict, Optional\nimport redis\n\nclass DistributedCounter:\n    def __init__(self, redis_client: redis.Redis, counter_name: str,\n                 shard_count: int = 10):\n        self.redis = redis_client\n        self.counter_name = counter_name\n        self.shard_count = shard_count\n    \n    def _get_shard_key(self, shard_id: int) -> str:\n        return f'counter:{self.counter_name}:shard:{shard_id}'\n    \n    def increment(self, amount: int = 1) -> bool:\n        # Choose a random shard to distribute load\n        shard_id = int(time.time() * 1000) % self.shard_count\n        shard_key = self._get_shard_key(shard_id)\n        \n        try:\n            self.redis.incrby(shard_key, amount)\n            return True\n        except redis.RedisError:\n            return False\n    \n    def decrement(self, amount: int = 1) -> bool:\n        return self.increment(-amount)\n    \n    def get_value(self) -> Optional[int]:\n        try:\n            pipeline = self.redis.pipeline()\n            \n            # Get all shard values\n            for i in range(self.shard_count):\n                shard_key = self._get_shard_key(i)\n                pipeline.get(shard_key)\n            \n            # Sum up all shards\n            total = 0\n            for value in pipeline.execute():\n                if value is not None:\n                    total += int(value)\n            \n            return total\n        except (redis.RedisError, ValueError):\n            return None\n    \n    def reset(self) -> bool:\n        try:\n            pipeline = self.redis.pipeline()\n            \n            # Delete all shards\n            for i in range(self.shard_count):\n                shard_key = self._get_shard_key(i)\n                pipeline.delete(shard_key)\n            \n            pipeline.execute()\n            return True\n        except redis.RedisError:\n            return False\n    \n    def get_shard_values(self) -> Dict[int, int]:\n        try:\n            pipeline = self.redis.pipeline()\n            \n            # Get all shard values\n            for i in range(self.shard_count):\n                shard_key = self._get_shard_key(i)\n                pipeline.get(shard_key)\n            \n            # Create shard map\n            shard_values = {}\n            for i, value in enumerate(pipeline.execute()):\n                if value is not None:\n                    shard_values[i] = int(value)\n                else:\n                    shard_values[i] = 0\n            \n            return shard_values\n        except (redis.RedisError, ValueError):\n            return {}",
                "hint": "Use Redis sharding to distribute counter updates and handle concurrent modifications",
                "points": 15,
                "explanation": "A distributed counter enables counting across multiple servers while handling concurrent updates.",
                "key_points": "- Distributed counting\n- Sharding\n- Concurrent updates\n- Data consistency"
            },
            {
                "id": "ph50",
                "category": "programming",
                "title": "K-tech Somali: Distributed Cache with Write-Through",
                "description": "Implement a distributed cache with write-through capability that maintains consistency between cache and persistent storage.",
                "answer": "import json\nfrom typing import Any, Optional, Dict\nimport redis\nfrom abc import ABC, abstractmethod\n\nclass Storage(ABC):\n    @abstractmethod\n    def get(self, key: str) -> Optional[Any]:\n        pass\n        \n    @abstractmethod\n    def set(self, key: str, value: Any) -> bool:\n        pass\n        \n    @abstractmethod\n    def delete(self, key: str) -> bool:\n        pass\n\nclass RedisStorage(Storage):\n    def __init__(self, redis_client: redis.Redis):\n        self.redis = redis_client\n    \n    def get(self, key: str) -> Optional[Any]:\n        try:\n            value = self.redis.get(key)\n            return json.loads(value) if value else None\n        except:\n            return None\n    \n    def set(self, key: str, value: Any) -> bool:\n        try:\n            self.redis.set(key, json.dumps(value))\n            return True\n        except:\n            return False\n    \n    def delete(self, key: str) -> bool:\n        try:\n            self.redis.delete(key)\n            return True\n        except:\n            return False\n\nclass DatabaseStorage(Storage):\n    def __init__(self, db_connection):\n        self.db = db_connection\n    \n    def get(self, key: str) -> Optional[Any]:\n        try:\n            cursor = self.db.cursor()\n            cursor.execute('SELECT value FROM cache_store WHERE key = %s', (key,))\n            row = cursor.fetchone()\n            return json.loads(row[0]) if row else None\n        except:\n            return None\n        finally:\n            cursor.close()\n    \n    def set(self, key: str, value: Any) -> bool:\n        try:\n            cursor = self.db.cursor()\n            serialized = json.dumps(value)\n            cursor.execute(\\n                'INSERT INTO cache_store (key, value) VALUES (%s, %s) '\\n                'ON DUPLICATE KEY UPDATE value = %s',\\n                (key, serialized, serialized)\\n            )\\n            self.db.commit()\n            return True\n        except:\\n            self.db.rollback()\n            return False\n        finally:\\n            cursor.close()\n    \\n    def delete(self, key: str) -> bool:\\n        try:\\n            cursor = self.db.cursor()\\n            cursor.execute('DELETE FROM cache_store WHERE key = %s', (key,))\\n            self.db.commit()\\n            return True\\n        except:\\n            self.db.rollback()\\n            return False\\n        finally:\\n            cursor.close()\\n\\nclass WriteThruCache:\\n    def __init__(self, cache: Storage, persistent: Storage,\\n                 ttl_seconds: int = 3600):\\n        self.cache = cache\\n        self.persistent = persistent\\n        self.ttl_seconds = ttl_seconds\\n    \\n    def get(self, key: str) -> Optional[Any]:\\n        # Try cache first\\n        value = self.cache.get(key)\\n        if value is not None:\\n            return value\\n        \\n        # Cache miss, try persistent storage\\n        value = self.persistent.get(key)\\n        if value is not None:\\n            # Update cache\\n            self.cache.set(key, value)\\n        \\n        return value\\n    \\n    def set(self, key: str, value: Any) -> bool:\\n        # Write to persistent storage first\\n        if not self.persistent.set(key, value):\\n            return False\\n        \\n        # Then update cache\\n        return self.cache.set(key, value)\\n    \\n    def delete(self, key: str) -> bool:\\n        # Delete from persistent storage first\\n        if not self.persistent.delete(key):\\n            return False\\n        \\n        # Then remove from cache\\n        return self.cache.delete(key)\\n    \\n    def invalidate(self, key: str) -> bool:\\n        # Only remove from cache\\n        return self.cache.delete(key)"
            }
        ]
    },
    "web_development": {
        "easy": [
            {
                "id": "w1",
                "category": "web_development",
                "title": "K-tech Somali: HTML Basics",
                "description": "Create a simple HTML page with a heading that says 'Welcome to K-tech Somali' and a paragraph below it.",
                "answer": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Welcome</title>\n</head>\n<body>\n    <h1>Welcome to K-tech Somali</h1>\n    <p>This is my first HTML page.</p>\n</body>\n</html>",
                "hint": "Use the h1 tag for the heading and p tag for the paragraph",
                "points": 5,
                "explanation": "HTML uses tags to structure content. The h1 tag is for main headings and p tag is for paragraphs.",
                "key_points": "- HTML document structure\n- Basic HTML tags\n- Text formatting"
            },
            {
                "id": "w2",
                "category": "web_development",
                "title": "K-tech Somali: CSS Styling",
                "description": "Add CSS to make the text color of the heading blue and center align it.",
                "answer": "<h1 style=\"color: blue; text-align: center;\">Welcome to K-tech Somali</h1>",
                "hint": "Use the style attribute with color and text-align properties",
                "points": 5,
                "explanation": "CSS can be added inline using the style attribute. The color property changes text color and text-align centers the content.",
                "key_points": "- Inline CSS\n- Color property\n- Text alignment"
            },
            {
                "id": "w3",
                "category": "web_development",
                "title": "K-tech Somali: HTML Links",
                "description": "Create a link that opens the K-tech Somali website (https://ktech.so) in a new tab.",
                "answer": "<a href=\"https://ktech.so\" target=\"_blank\">Visit K-tech Somali</a>",
                "hint": "Use the a tag with href and target attributes",
                "points": 5,
                "explanation": "The a tag creates hyperlinks. The target=\"_blank\" attribute opens the link in a new tab.",
                "key_points": "- HTML links\n- Anchor tags\n- Link attributes"
            },
            {
                "id": "w4",
                "category": "web_development",
                "title": "K-tech Somali: Image Element",
                "description": "Add an image to your webpage with the source 'logo.png' and alternative text 'K-tech Logo'.",
                "answer": "<img src=\"logo.png\" alt=\"K-tech Logo\">",
                "hint": "Use the img tag with src and alt attributes",
                "points": 5,
                "explanation": "The img tag displays images. The src attribute specifies the image source, and alt provides alternative text for accessibility.",
                "key_points": "- HTML images\n- Image attributes\n- Accessibility"
            },
            {
                "id": "w5",
                "category": "web_development",
                "title": "K-tech Somali: Lists",
                "description": "Create an unordered list with three programming languages: HTML, CSS, and JavaScript.",
                "answer": "<ul>\n    <li>HTML</li>\n    <li>CSS</li>\n    <li>JavaScript</li>\n</ul>",
                "hint": "Use ul for unordered list and li for list items",
                "points": 5,
                "explanation": "Unordered lists (ul) create bullet-point lists. Each item is wrapped in list item (li) tags.",
                "key_points": "- HTML lists\n- List items\n- Content organization"
            },
            {
                "id": "w6",
                "category": "web_development",
                "title": "K-tech Somali: Button Styling",
                "description": "Create a button with a green background, white text, and rounded corners.",
                "answer": "<button style=\"background-color: green; color: white; border-radius: 5px; padding: 10px;\">Click Me</button>",
                "hint": "Use the style attribute with background-color, color, and border-radius properties",
                "points": 5,
                "explanation": "CSS properties can style buttons. Background-color sets the fill color, color sets text color, and border-radius rounds corners.",
                "key_points": "- Button styling\n- CSS colors\n- Border properties"
            },
            {
                "id": "w7",
                "category": "web_development",
                "title": "K-tech Somali: Div Container",
                "description": "Create a div container with a light gray background and 20 pixels of padding.",
                "answer": "<div style=\"background-color: lightgray; padding: 20px;\">\n    <p>Content inside the container</p>\n</div>",
                "hint": "Use the div tag with background-color and padding properties",
                "points": 5,
                "explanation": "Div elements are containers that help organize content. Padding creates space inside the container.",
                "key_points": "- Container elements\n- Box model\n- Spacing properties"
            },
            {
                "id": "w8",
                "category": "web_development",
                "title": "K-tech Somali: Input Field",
                "description": "Create a text input field with a placeholder that says 'Enter your name'.",
                "answer": "<input type=\"text\" placeholder=\"Enter your name\">",
                "hint": "Use the input tag with type and placeholder attributes",
                "points": 5,
                "explanation": "Input fields collect user data. The type attribute specifies the input type, and placeholder shows hint text.",
                "key_points": "- Form elements\n- Input types\n- User interaction"
            },
            {
                "id": "w9",
                "category": "web_development",
                "title": "K-tech Somali: Simple Form",
                "description": "Create a form with an email input and a submit button.",
                "answer": "<form>\n    <input type=\"email\" placeholder=\"Enter your email\">\n    <button type=\"submit\">Subscribe</button>\n</form>",
                "hint": "Use the form tag with input and button elements",
                "points": 5,
                "explanation": "Forms collect and submit user data. The email input type validates email format automatically.",
                "key_points": "- HTML forms\n- Input validation\n- Form submission"
            },
            {
                "id": "w10",
                "category": "web_development",
                "title": "K-tech Somali: Text Formatting",
                "description": "Create a paragraph with bold, italic, and underlined text.",
                "answer": "<p>This is <strong>bold</strong>, <em>italic</em>, and <u>underlined</u> text.</p>",
                "hint": "Use strong, em, and u tags for text formatting",
                "points": 5,
                "explanation": "HTML provides specific tags for text formatting. Strong makes text bold, em creates italics, and u underlines text.",
                "key_points": "- Text formatting\n- Semantic markup\n- Typography"
            },
            {
                "id": "w11",
                "category": "web_development",
                "title": "K-tech Somali: Navigation Menu",
                "description": "Create a horizontal navigation menu with three links: Home, About, and Contact. Style the links to have padding and change color when hovered.",
                "answer": "<nav style=\"background-color: #f8f9fa; padding: 10px;\">\n    <a href=\"#\" style=\"color: black; text-decoration: none; padding: 10px; margin-right: 10px; display: inline-block;\" onmouseover=\"this.style.color='blue'\" onmouseout=\"this.style.color='black'\">Home</a>\n    <a href=\"#\" style=\"color: black; text-decoration: none; padding: 10px; margin-right: 10px; display: inline-block;\" onmouseover=\"this.style.color='blue'\" onmouseout=\"this.style.color='black'\">About</a>\n    <a href=\"#\" style=\"color: black; text-decoration: none; padding: 10px; display: inline-block;\" onmouseover=\"this.style.color='blue'\" onmouseout=\"this.style.color='black'\">Contact</a>\n</nav>",
                "hint": "Use the nav element for navigation and style the a tags with padding and hover effects",
                "points": 5,
                "explanation": "Navigation menus are essential for website structure. The nav element groups navigation links, and CSS styles make them visually appealing and interactive.",
                "key_points": "- Navigation structure\n- Link styling\n- Hover effects\n- Spacing properties"
            },
            {
                "id": "w12",
                "category": "web_development",
                "title": "K-tech Somali: Footer Section",
                "description": "Create a footer with copyright text centered at the bottom of the page and a dark background.",
                "answer": "<footer style=\"background-color: #333; color: white; text-align: center; padding: 20px; position: fixed; bottom: 0; width: 100%;\">\n    <p style=\"margin: 0;\">&copy; 2024 K-tech Somali. All rights reserved.</p>\n</footer>",
                "hint": "Use the footer element with fixed positioning and full width",
                "points": 5,
                "explanation": "Footers typically contain copyright information and stay at the bottom of the page. Fixed positioning ensures it remains visible.",
                "key_points": "- Footer element\n- Fixed positioning\n- Copyright symbol\n- Full width layout"
            },
            {
                "id": "w13",
                "category": "web_development",
                "title": "K-tech Somali: Profile Card",
                "description": "Create a profile card with an image placeholder (50x50px), name, and title. Add a border and shadow to the card.",
                "answer": "<div style=\"border: 1px solid #ddd; border-radius: 8px; padding: 20px; width: 200px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\n    <img src=\"profile.jpg\" alt=\"Profile Picture\" style=\"width: 50px; height: 50px; border-radius: 50%; display: block; margin: 0 auto;\">\n    <h3 style=\"text-align: center; margin: 10px 0;\">John Doe</h3>\n    <p style=\"text-align: center; color: #666; margin: 0;\">Web Developer</p>\n</div>",
                "hint": "Use a div container with border and box-shadow properties",
                "points": 5,
                "explanation": "Profile cards are common UI elements that display user information. CSS properties like border-radius and box-shadow enhance visual appeal.",
                "key_points": "- Card layout\n- Image styling\n- Box shadow\n- Border radius"
            },
            {
                "id": "w14",
                "category": "web_development",
                "title": "K-tech Somali: Responsive Image",
                "description": "Add an image that maintains its aspect ratio and never exceeds its container's width.",
                "answer": "<div style=\"max-width: 600px;\">\n    <img src=\"example.jpg\" alt=\"Responsive Image\" style=\"width: 100%; height: auto; display: block;\">\n</div>",
                "hint": "Use width: 100% and height: auto for responsive scaling",
                "points": 5,
                "explanation": "Responsive images automatically adjust their size based on the container width while maintaining aspect ratio, ensuring proper display on all devices.",
                "key_points": "- Responsive design\n- Image scaling\n- Aspect ratio\n- Container constraints"
            },
            {
                "id": "w15",
                "category": "web_development",
                "title": "K-tech Somali: Contact Form",
                "description": "Create a contact form with name, email, and message fields, properly labeled and styled.",
                "answer": "<form style=\"max-width: 400px; margin: 0 auto;\">\n    <div style=\"margin-bottom: 15px;\">\n        <label for=\"name\" style=\"display: block; margin-bottom: 5px;\">Name:</label>\n        <input type=\"text\" id=\"name\" name=\"name\" style=\"width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;\">\n    </div>\n    <div style=\"margin-bottom: 15px;\">\n        <label for=\"email\" style=\"display: block; margin-bottom: 5px;\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" style=\"width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;\">\n    </div>\n    <div style=\"margin-bottom: 15px;\">\n        <label for=\"message\" style=\"display: block; margin-bottom: 5px;\">Message:</label>\n        <textarea id=\"message\" name=\"message\" style=\"width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; height: 100px;\"></textarea>\n    </div>\n    <button type=\"submit\" style=\"background-color: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer;\">Send Message</button>\n</form>",
                "hint": "Use form, label, input, and textarea elements with proper styling",
                "points": 5,
                "explanation": "Contact forms collect user information. Labels improve accessibility, and proper styling enhances user experience.",
                "key_points": "- Form structure\n- Input styling\n- Labels\n- Submit button"
            },
            {
                "id": "w16",
                "category": "web_development",
                "title": "K-tech Somali: Alert Message",
                "description": "Create three different alert messages: success (green), warning (yellow), and error (red).",
                "answer": "<div style=\"margin-bottom: 10px; padding: 10px; border-radius: 4px; background-color: #d4edda; color: #155724; border: 1px solid #c3e6cb;\">\n    Success! Your changes have been saved.\n</div>\n<div style=\"margin-bottom: 10px; padding: 10px; border-radius: 4px; background-color: #fff3cd; color: #856404; border: 1px solid #ffeeba;\">\n    Warning! Please save your changes before leaving.\n</div>\n<div style=\"margin-bottom: 10px; padding: 10px; border-radius: 4px; background-color: #f8d7da; color: #721c24; border: 1px solid #f5c6cb;\">\n    Error! Something went wrong.\n</div>",
                "hint": "Use different background colors and border colors for each alert type",
                "points": 5,
                "explanation": "Alert messages provide feedback to users. Different colors help users quickly understand the message type.",
                "key_points": "- Alert styles\n- Color coding\n- Message types\n- Visual feedback"
            },
            {
                "id": "w17",
                "category": "web_development",
                "title": "K-tech Somali: Progress Bar",
                "description": "Create a progress bar that shows 75% completion with a blue background.",
                "answer": "<div style=\"background-color: #f0f0f0; border-radius: 4px; padding: 3px; width: 300px;\">\n    <div style=\"background-color: #007bff; width: 75%; height: 20px; border-radius: 2px; text-align: center; color: white; line-height: 20px;\">75%</div>\n</div>",
                "hint": "Use nested divs with percentage width to show progress",
                "points": 5,
                "explanation": "Progress bars visually represent completion status. The outer div acts as a container while the inner div shows the progress percentage.",
                "key_points": "- Progress indication\n- Percentage display\n- Visual feedback\n- Container nesting"
            },
            {
                "id": "w18",
                "category": "web_development",
                "title": "K-tech Somali: Social Media Icons",
                "description": "Create a row of three social media icons (using # as placeholders) with hover effects.",
                "answer": "<div style=\"text-align: center;\">\n    <a href=\"#\" style=\"display: inline-block; margin: 0 10px; width: 40px; height: 40px; background-color: #333; color: white; text-decoration: none; border-radius: 50%; line-height: 40px; transition: background-color 0.3s;\" onmouseover=\"this.style.backgroundColor='#1da1f2'\" onmouseout=\"this.style.backgroundColor='#333'\">T</a>\n    <a href=\"#\" style=\"display: inline-block; margin: 0 10px; width: 40px; height: 40px; background-color: #333; color: white; text-decoration: none; border-radius: 50%; line-height: 40px; transition: background-color 0.3s;\" onmouseover=\"this.style.backgroundColor='#4267b2'\" onmouseout=\"this.style.backgroundColor='#333'\">F</a>\n    <a href=\"#\" style=\"display: inline-block; margin: 0 10px; width: 40px; height: 40px; background-color: #333; color: white; text-decoration: none; border-radius: 50%; line-height: 40px; transition: background-color 0.3s;\" onmouseover=\"this.style.backgroundColor='#e1306c'\" onmouseout=\"this.style.backgroundColor='#333'\">I</a>\n</div>",
                "hint": "Style links as circles and add hover effects with transitions",
                "points": 5,
                "explanation": "Social media icons are common navigation elements. Hover effects provide visual feedback and improve user interaction.",
                "key_points": "- Icon styling\n- Hover effects\n- Transitions\n- Link spacing"
            },
            {
                "id": "w19",
                "category": "web_development",
                "title": "K-tech Somali: Pricing Card",
                "description": "Create a pricing card for a 'Basic Plan' with a title, price, three features, and a sign-up button.",
                "answer": "<div style=\"border: 1px solid #ddd; border-radius: 8px; padding: 20px; width: 250px; text-align: center;\">\n    <h3 style=\"margin: 0 0 10px 0; color: #333;\">Basic Plan</h3>\n    <div style=\"font-size: 24px; color: #007bff; margin: 15px 0;\">\n        <span style=\"font-size: 16px;\">$</span>19<span style=\"font-size: 16px;\">/mo</span>\n    </div>\n    <ul style=\"list-style: none; padding: 0; margin: 0 0 20px 0; text-align: left;\">\n        <li style=\"padding: 5px 0;\">✓ Feature 1</li>\n        <li style=\"padding: 5px 0;\">✓ Feature 2</li>\n        <li style=\"padding: 5px 0;\">✓ Feature 3</li>\n    </ul>\n    <button style=\"background-color: #007bff; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer; width: 100%;\">Sign Up</button>\n</div>",
                "hint": "Use a container div with centered content and styled list items",
                "points": 5,
                "explanation": "Pricing cards display subscription options. Clear layout and styling help users compare different plans.",
                "key_points": "- Card layout\n- Price display\n- Feature list\n- Call-to-action button"
            },
            {
                "id": "w20",
                "category": "web_development",
                "title": "K-tech Somali: Search Bar",
                "description": "Create a search bar with a search icon and placeholder text that expands on focus.",
                "answer": "<div style=\"max-width: 300px; margin: 0 auto;\">\n    <div style=\"position: relative;\">\n        <input type=\"text\" placeholder=\"Search...\" style=\"width: 200px; padding: 10px 40px 10px 10px; border: 2px solid #ddd; border-radius: 20px; outline: none; transition: width 0.3s;\" onfocus=\"this.style.width='300px'\" onblur=\"this.style.width='200px'\">\n        <span style=\"position: absolute; right: 12px; top: 50%; transform: translateY(-50%); color: #666;\">🔍</span>\n    </div>\n</div>",
                "hint": "Use input with transition effect and absolute positioning for the search icon",
                "points": 5,
                "explanation": "Search bars are crucial navigation elements. The expansion effect provides a better user experience by offering more space for typing.",
                "key_points": "- Input styling\n- Transitions\n- Icon placement\n- Focus effects"
            },
            {
                "id": "w21",
                "category": "web_development",
                "title": "K-tech Somali: Toggle Switch",
                "description": "Create a toggle switch that changes color when clicked (from gray to blue).",
                "answer": "<label style=\"position: relative; display: inline-block; width: 60px; height: 34px;\">\n    <input type=\"checkbox\" style=\"opacity: 0; width: 0; height: 0;\" onclick=\"this.nextElementSibling.style.backgroundColor = this.checked ? '#2196F3' : '#ccc';\">\n    <span style=\"position: absolute; cursor: pointer; top: 0; left: 0; right: 0; bottom: 0; background-color: #ccc; transition: .4s; border-radius: 34px;\">\n        <span style=\"position: absolute; content: ''; height: 26px; width: 26px; left: 4px; bottom: 4px; background-color: white; transition: .4s; border-radius: 50%;\"></span>\n    </span>\n</label>",
                "hint": "Use a checkbox input with styled spans for the switch appearance",
                "points": 5,
                "explanation": "Toggle switches provide a visual way to switch between two states. The checkbox controls the state while CSS creates the switch appearance.",
                "key_points": "- Custom checkbox\n- State transitions\n- Visual feedback\n- Interactive elements"
            },
            {
                "id": "w22",
                "category": "web_development",
                "title": "K-tech Somali: Tooltip",
                "description": "Create a button with a tooltip that appears on hover above the button.",
                "answer": "<div style=\"position: relative; display: inline-block;\">\n    <button style=\"padding: 10px 20px; border: none; background-color: #007bff; color: white; border-radius: 4px; cursor: pointer;\">Hover Me</button>\n    <span style=\"visibility: hidden; background-color: #333; color: white; text-align: center; padding: 5px 10px; border-radius: 4px; position: absolute; bottom: 100%; left: 50%; transform: translateX(-50%); white-space: nowrap; margin-bottom: 5px;\" onmouseover=\"this.style.visibility='visible'\" onmouseout=\"this.style.visibility='hidden'\">This is a tooltip</span>\n</div>",
                "hint": "Use absolute positioning and visibility property for the tooltip",
                "points": 5,
                "explanation": "Tooltips provide additional information when users hover over elements. Positioning ensures the tooltip appears in the correct location.",
                "key_points": "- Tooltip positioning\n- Hover effects\n- Visibility control\n- User interaction"
            },
            {
                "id": "w23",
                "category": "web_development",
                "title": "K-tech Somali: Badge Counter",
                "description": "Create a notification badge that displays the number 5 in the top right corner of a button.",
                "answer": "<button style=\"position: relative; padding: 10px 20px; background-color: #007bff; color: white; border: none; border-radius: 4px;\">\n    Notifications\n    <span style=\"position: absolute; top: -8px; right: -8px; background-color: #dc3545; color: white; font-size: 12px; padding: 2px 6px; border-radius: 50%; min-width: 20px; text-align: center;\">5</span>\n</button>",
                "hint": "Use absolute positioning for the badge and border-radius for circular shape",
                "points": 5,
                "explanation": "Notification badges show counters or status indicators. Absolute positioning places the badge relative to its container.",
                "key_points": "- Badge positioning\n- Circular design\n- Counter display\n- Visual indicators"
            },
            {
                "id": "w24",
                "category": "web_development",
                "title": "K-tech Somali: Accordion Panel",
                "description": "Create a simple accordion panel that shows/hides content when the header is clicked.",
                "answer": "<div style=\"max-width: 300px; border: 1px solid #ddd; border-radius: 4px;\">\n    <div style=\"background-color: #f8f9fa; padding: 10px; cursor: pointer; user-select: none;\" onclick=\"this.nextElementSibling.style.display = this.nextElementSibling.style.display === 'none' ? 'block' : 'none'\">\n        Click to Toggle ▼\n    </div>\n    <div style=\"padding: 10px; border-top: 1px solid #ddd; display: none;\">\n        This is the content that will be shown or hidden when you click the header above.\n    </div>\n</div>",
                "hint": "Use onclick event to toggle the display property of the content panel",
                "points": 5,
                "explanation": "Accordions help organize content by showing/hiding sections. The click event toggles visibility of the content panel.",
                "key_points": "- Content toggle\n- Click events\n- Display property\n- Interactive panels"
            },
            {
                "id": "w25",
                "category": "web_development",
                "title": "K-tech Somali: Loading Spinner",
                "description": "Create a spinning loading animation using border properties.",
                "answer": "<div style=\"width: 40px; height: 40px; border: 4px solid #f3f3f3; border-top: 4px solid #3498db; border-radius: 50%; animation: spin 1s linear infinite;\">\n</div>\n<style>\n@keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n}\n</style>",
                "hint": "Use border properties and CSS animation to create the spinning effect",
                "points": 5,
                "explanation": "Loading spinners provide visual feedback during wait times. CSS animations create the spinning motion.",
                "key_points": "- CSS animation\n- Border styling\n- Keyframes\n- Loading indicators"
            },
            {
                "id": "w26",
                "category": "web_development",
                "title": "K-tech Somali: Rating Stars",
                "description": "Create a 5-star rating display showing 3 filled stars and 2 empty stars.",
                "answer": "<div style=\"color: #ffd700;\">\n    <span style=\"font-size: 24px;\">★</span>\n    <span style=\"font-size: 24px;\">★</span>\n    <span style=\"font-size: 24px;\">★</span>\n    <span style=\"font-size: 24px; color: #e4e5e9;\">★</span>\n    <span style=\"font-size: 24px; color: #e4e5e9;\">★</span>\n</div>",
                "hint": "Use star symbols (★) with different colors for filled and empty states",
                "points": 5,
                "explanation": "Star ratings visually represent ratings or scores. Different colors distinguish between filled and empty states.",
                "key_points": "- Star symbols\n- Color states\n- Rating display\n- Visual feedback"
            },
            {
                "id": "w27",
                "category": "web_development",
                "title": "K-tech Somali: File Upload Button",
                "description": "Create a styled file upload button that shows 'Choose File' and hides the default input appearance.",
                "answer": "<label style=\"display: inline-block; padding: 10px 20px; background-color: #007bff; color: white; border-radius: 4px; cursor: pointer;\">\n    Choose File\n    <input type=\"file\" style=\"display: none;\">\n</label>",
                "hint": "Hide the default file input and style a label as the button",
                "points": 5,
                "explanation": "Custom file upload buttons improve the visual appearance of file inputs. The label acts as a styled button trigger.",
                "key_points": "- Custom input styling\n- File upload\n- Label styling\n- Input hiding"
            },
            {
                "id": "w28",
                "category": "web_development",
                "title": "K-tech Somali: Cookie Notice",
                "description": "Create a fixed cookie notice at the bottom of the page with an 'Accept' button.",
                "answer": "<div style=\"position: fixed; bottom: 0; left: 0; right: 0; background-color: #f8f9fa; padding: 15px; text-align: center; border-top: 1px solid #ddd;\">\n    <p style=\"margin: 0; display: inline-block; margin-right: 20px;\">This website uses cookies to ensure you get the best experience.</p>\n    <button onclick=\"this.parentElement.style.display='none'\" style=\"background-color: #007bff; color: white; border: none; padding: 8px 20px; border-radius: 4px; cursor: pointer;\">Accept</button>\n</div>",
                "hint": "Use fixed positioning for the notice and onclick to hide it",
                "points": 5,
                "explanation": "Cookie notices inform users about website cookies. Fixed positioning keeps the notice visible until accepted.",
                "key_points": "- Fixed positioning\n- Notice display\n- Accept button\n- User consent"
            },
            {
                "id": "w29",
                "category": "web_development",
                "title": "K-tech Somali: Share Buttons",
                "description": "Create a row of social media share buttons with icons and share counts.",
                "answer": "<div style=\"display: flex; gap: 10px; justify-content: center;\">\n    <button style=\"display: flex; align-items: center; padding: 8px 16px; border: none; border-radius: 4px; background-color: #1da1f2; color: white;\">\n        <span style=\"margin-right: 5px;\">🐦</span> Tweet\n        <span style=\"margin-left: 5px; background-color: rgba(255,255,255,0.2); padding: 2px 6px; border-radius: 10px; font-size: 12px;\">125</span>\n    </button>\n    <button style=\"display: flex; align-items: center; padding: 8px 16px; border: none; border-radius: 4px; background-color: #4267b2; color: white;\">\n        <span style=\"margin-right: 5px;\">👍</span> Share\n        <span style=\"margin-left: 5px; background-color: rgba(255,255,255,0.2); padding: 2px 6px; border-radius: 10px; font-size: 12px;\">84</span>\n    </button>\n</div>",
                "hint": "Use flexbox for layout and add counters with semi-transparent backgrounds",
                "points": 5,
                "explanation": "Share buttons encourage social media sharing. The counters show sharing statistics and encourage engagement.",
                "key_points": "- Social sharing\n- Counter display\n- Button styling\n- Flexbox layout"
            },
            {
                "id": "w30",
                "category": "web_development",
                "title": "K-tech Somali: Color Picker",
                "description": "Create a color picker input with a label and preview of the selected color.",
                "answer": "<div style=\"display: flex; align-items: center; gap: 10px;\">\n    <label for=\"colorPicker\">Choose a color:</label>\n    <input type=\"color\" id=\"colorPicker\" value=\"#007bff\" oninput=\"this.nextElementSibling.style.backgroundColor = this.value\">\n    <div style=\"width: 30px; height: 30px; border: 1px solid #ddd; border-radius: 4px; background-color: #007bff;\"></div>\n</div>",
                "hint": "Use the color input type and update a preview div with the selected color",
                "points": 5,
                "explanation": "Color pickers allow users to select colors. The preview provides immediate visual feedback of the selection.",
                "key_points": "- Color input\n- Live preview\n- Event handling\n- Visual feedback"
            },
            {
                "id": "w31",
                "category": "web_development",
                "title": "K-tech Somali: Breadcrumb Navigation",
                "description": "Create a breadcrumb navigation showing: Home > Products > Electronics",
                "answer": "<nav style=\"padding: 10px; background-color: #f8f9fa;\">\n    <div style=\"display: flex; align-items: center; gap: 8px;\">\n        <a href=\"#\" style=\"color: #0d6efd; text-decoration: none;\">Home</a>\n        <span style=\"color: #6c757d;\">/</span>\n        <a href=\"#\" style=\"color: #0d6efd; text-decoration: none;\">Products</a>\n        <span style=\"color: #6c757d;\">/</span>\n        <span style=\"color: #6c757d;\">Electronics</span>\n    </div>\n</nav>",
                "hint": "Use flex layout and style the separators differently from the links",
                "points": 5,
                "explanation": "Breadcrumbs show the user's current location in a website's hierarchy. The last item is usually displayed differently to indicate the current page.",
                "key_points": "- Navigation hierarchy\n- Visual separation\n- Link styling\n- Current page indication"
            },
            {
                "id": "w32",
                "category": "web_development",
                "title": "K-tech Somali: Loading Spinner",
                "description": "Create a simple loading spinner animation using CSS.",
                "answer": "<style>\n.spinner {\n    width: 40px;\n    height: 40px;\n    border: 4px solid #f3f3f3;\n    border-top: 4px solid #3498db;\n    border-radius: 50%;\n    animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n}\n</style>\n<div class=\"spinner\"></div>",
                "hint": "Use border properties and CSS animation with @keyframes",
                "points": 5,
                "explanation": "Loading spinners provide visual feedback during loading states. CSS animations create smooth, continuous motion.",
                "key_points": "- CSS animations\n- Keyframes\n- Border styling\n- Loading states"
            },
            {
                "id": "w33",
                "category": "web_development",
                "title": "K-tech Somali: Tag Input",
                "description": "Create a tag-style input that displays entered text as a pill with a close button.",
                "answer": "<div style=\"display: inline-flex; align-items: center; background: #e9ecef; padding: 4px 8px; border-radius: 16px; gap: 4px;\">\n    <span>JavaScript</span>\n    <button onclick=\"this.parentElement.remove()\" style=\"background: none; border: none; color: #6c757d; cursor: pointer; font-size: 14px; padding: 0 4px;\">&times;</button>\n</div>\n<input type=\"text\" placeholder=\"Add a tag...\" style=\"margin-left: 8px; padding: 4px;\">",
                "hint": "Style a container to look like a pill and add a close button",
                "points": 5,
                "explanation": "Tag inputs are common in forms for adding multiple values. The pill design with a close button makes tags easily identifiable and removable.",
                "key_points": "- Pill design\n- Close button\n- Input styling\n- Interactive elements"
            },
            {
                "id": "w34",
                "category": "web_development",
                "title": "K-tech Somali: Progress Steps",
                "description": "Create a progress indicator with three numbered steps, showing the second step as active.",
                "answer": "<div style=\"display: flex; justify-content: space-between; align-items: center; max-width: 300px; margin: 20px auto;\">\n    <div style=\"width: 30px; height: 30px; border-radius: 50%; background: #3498db; color: white; display: flex; align-items: center; justify-content: center;\">1</div>\n    <div style=\"flex: 1; height: 2px; background: #3498db;\"></div>\n    <div style=\"width: 30px; height: 30px; border-radius: 50%; background: #3498db; color: white; display: flex; align-items: center; justify-content: center;\">2</div>\n    <div style=\"flex: 1; height: 2px; background: #e0e0e0;\"></div>\n    <div style=\"width: 30px; height: 30px; border-radius: 50%; background: #e0e0e0; color: #666; display: flex; align-items: center; justify-content: center;\">3</div>\n</div>",
                "hint": "Use flex layout with circles for steps and lines for connections",
                "points": 5,
                "explanation": "Progress steps show the user's position in a multi-step process. Different colors indicate completed, current, and upcoming steps.",
                "key_points": "- Step indicators\n- Progress tracking\n- Visual feedback\n- Connected elements"
            },
            {
                "id": "w35",
                "category": "web_development",
                "title": "K-tech Somali: File Upload Button",
                "description": "Create a styled file upload button that shows the selected file name.",
                "answer": "<style>\n.file-upload {\n    display: inline-block;\n}\n.file-input {\n    display: none;\n}\n.file-label {\n    padding: 8px 16px;\n    background: #3498db;\n    color: white;\n    border-radius: 4px;\n    cursor: pointer;\n    display: inline-block;\n}\n.file-name {\n    margin-left: 8px;\n    color: #666;\n}\n</style>\n<div class=\"file-upload\">\n    <input type=\"file\" class=\"file-input\" id=\"fileInput\" onchange=\"this.nextElementSibling.nextElementSibling.textContent = this.files[0].name\">\n    <label for=\"fileInput\" class=\"file-label\">Choose File</label>\n    <span class=\"file-name\">No file chosen</span>\n</div>",
                "hint": "Hide the default input and style a label as the button",
                "points": 5,
                "explanation": "Custom file upload buttons improve the user experience by providing better styling and feedback than default browser inputs.",
                "key_points": "- Custom inputs\n- File handling\n- Visual feedback\n- Event handling"
            },
            {
                "id": "w36",
                "category": "web_development",
                "title": "K-tech Somali: Search Bar",
                "description": "Create a search bar with an icon and placeholder text that expands on focus.",
                "answer": "<div style=\"max-width: 300px;\">\n    <div style=\"position: relative;\">\n        <input type=\"text\" placeholder=\"Search...\" style=\"width: 200px; padding: 8px 32px 8px 12px; border: 2px solid #ddd; border-radius: 20px; transition: width 0.3s ease; outline: none;\" onfocus=\"this.style.width='100%'\" onblur=\"this.style.width='200px'\">\n        <span style=\"position: absolute; right: 12px; top: 50%; transform: translateY(-50%); color: #666;\">🔍</span>\n    </div>\n</div>",
                "hint": "Use transitions for smooth width changes and absolute positioning for the icon",
                "points": 5,
                "explanation": "Expanding search bars save space while providing a better user experience when active. The transition property creates smooth animations.",
                "key_points": "- Input transitions\n- Icon positioning\n- Focus states\n- Search UI"
            },
            {
                "id": "w37",
                "category": "web_development",
                "title": "K-tech Somali: Rating Stars",
                "description": "Create a 5-star rating display where 3 stars are filled and 2 are empty.",
                "answer": "<div style=\"display: flex; gap: 4px;\">\n    <span style=\"color: #ffd700; font-size: 24px;\">★</span>\n    <span style=\"color: #ffd700; font-size: 24px;\">★</span>\n    <span style=\"color: #ffd700; font-size: 24px;\">★</span>\n    <span style=\"color: #e4e5e9; font-size: 24px;\">★</span>\n    <span style=\"color: #e4e5e9; font-size: 24px;\">★</span>\n</div>",
                "hint": "Use star symbols (★) with different colors for filled and empty states",
                "points": 5,
                "explanation": "Star ratings provide visual feedback for user ratings. Different colors distinguish between filled and empty states.",
                "key_points": "- Rating display\n- Unicode symbols\n- Color states\n- Visual feedback"
            },
            {
                "id": "w38",
                "category": "web_development",
                "title": "K-tech Somali: Notification Badge",
                "description": "Create a notification icon with a red badge showing the number 5.",
                "answer": "<div style=\"position: relative; display: inline-block;\">\n    <span style=\"font-size: 24px;\">📬</span>\n    <span style=\"position: absolute; top: -5px; right: -10px; background: #ff4444; color: white; border-radius: 50%; width: 20px; height: 20px; display: flex; align-items: center; justify-content: center; font-size: 12px; font-weight: bold;\">5</span>\n</div>",
                "hint": "Use absolute positioning for the badge over the icon",
                "points": 5,
                "explanation": "Notification badges show unread or pending items. Absolute positioning allows the badge to overlay the icon.",
                "key_points": "- Badge positioning\n- Circular shape\n- Notification display\n- Icon overlay"
            },
            {
                "id": "w39",
                "category": "web_development",
                "title": "K-tech Somali: Toggle Switch",
                "description": "Create a toggle switch that changes color when clicked.",
                "answer": "<style>\n.toggle {\n    position: relative;\n    display: inline-block;\n    width: 60px;\n    height: 34px;\n}\n.toggle input {\n    display: none;\n}\n.slider {\n    position: absolute;\n    cursor: pointer;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: #ccc;\n    transition: .4s;\n    border-radius: 34px;\n}\n.slider:before {\n    position: absolute;\n    content: \"\";\n    height: 26px;\n    width: 26px;\n    left: 4px;\n    bottom: 4px;\n    background-color: white;\n    transition: .4s;\n    border-radius: 50%;\n}\ninput:checked + .slider {\n    background-color: #2196F3;\n}\ninput:checked + .slider:before {\n    transform: translateX(26px);\n}\n</style>\n<label class=\"toggle\">\n    <input type=\"checkbox\">\n    <span class=\"slider\"></span>\n</label>",
                "hint": "Use a hidden checkbox and style its label as the switch",
                "points": 5,
                "explanation": "Toggle switches provide an intuitive way to switch between two states. The sliding animation and color change provide visual feedback.",
                "key_points": "- Custom checkbox\n- Sliding animation\n- State indication\n- Interactive toggle"
            },
            {
                "id": "w40",
                "category": "web_development",
                "title": "K-tech Somali: Skeleton Loading",
                "description": "Create a skeleton loading placeholder for a card with an image and two lines of text.",
                "answer": "<div style=\"width: 300px; padding: 16px; border-radius: 8px; background: white; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\n    <div style=\"width: 100%; height: 150px; background: #e9ecef; border-radius: 4px; margin-bottom: 12px; animation: pulse 1.5s infinite;\"></div>\n    <div style=\"width: 80%; height: 20px; background: #e9ecef; border-radius: 4px; margin-bottom: 8px; animation: pulse 1.5s infinite;\"></div>\n    <div style=\"width: 60%; height: 20px; background: #e9ecef; border-radius: 4px; animation: pulse 1.5s infinite;\"></div>\n</div>\n<style>\n@keyframes pulse {\n    0% { opacity: 1; }\n    50% { opacity: 0.5; }\n    100% { opacity: 1; }\n}\n</style>",
                "hint": "Use animated gray boxes to represent loading content",
                "points": 5,
                "explanation": "Skeleton loading provides visual feedback while content is loading. The pulsing animation indicates that content is being fetched.",
                "key_points": "- Loading states\n- Animation effects\n- Content placeholders\n- User feedback"
            },
            {
                "id": "w41",
                "category": "web_development",
                "title": "K-tech Somali: Dropdown Menu",
                "description": "Create a dropdown menu that appears on hover with three menu items.",
                "answer": "<style>\n.dropdown {\n    position: relative;\n    display: inline-block;\n}\n.dropdown-btn {\n    padding: 10px 20px;\n    background: #3498db;\n    color: white;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n}\n.dropdown-content {\n    display: none;\n    position: absolute;\n    top: 100%;\n    left: 0;\n    min-width: 160px;\n    background: white;\n    box-shadow: 0 2px 5px rgba(0,0,0,0.2);\n    border-radius: 4px;\n    overflow: hidden;\n}\n.dropdown-content a {\n    display: block;\n    padding: 10px 20px;\n    color: #333;\n    text-decoration: none;\n}\n.dropdown-content a:hover {\n    background: #f8f9fa;\n}\n.dropdown:hover .dropdown-content {\n    display: block;\n}\n</style>\n<div class=\"dropdown\">\n    <button class=\"dropdown-btn\">Menu</button>\n    <div class=\"dropdown-content\">\n        <a href=\"#\">Option 1</a>\n        <a href=\"#\">Option 2</a>\n        <a href=\"#\">Option 3</a>\n    </div>\n</div>",
                "hint": "Use position: absolute and display: none/block for the dropdown content",
                "points": 5,
                "explanation": "Dropdown menus provide a way to show additional options without taking up permanent space. The hover effect makes it easy to access nested content.",
                "key_points": "- Dropdown positioning\n- Hover effects\n- Menu styling\n- Interactive UI"
            },
            {
                "id": "w42",
                "category": "web_development",
                "title": "K-tech Somali: Modal Dialog",
                "description": "Create a modal dialog with a title, content, and close button that appears centered on the screen.",
                "answer": "<style>\n.modal {\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    background: white;\n    padding: 20px;\n    border-radius: 8px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n    max-width: 400px;\n    width: 90%;\n}\n.modal-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 15px;\n}\n.modal-title {\n    margin: 0;\n    font-size: 1.25rem;\n}\n.close-btn {\n    background: none;\n    border: none;\n    font-size: 1.5rem;\n    cursor: pointer;\n    color: #666;\n}\n</style>\n<div class=\"modal\">\n    <div class=\"modal-header\">\n        <h2 class=\"modal-title\">Modal Title</h2>\n        <button class=\"close-btn\" onclick=\"this.closest('.modal').style.display='none'\">&times;</button>\n    </div>\n    <div class=\"modal-content\">\n        <p>This is the modal content. You can add any HTML here.</p>\n    </div>\n</div>",
                "hint": "Use fixed positioning and transform to center the modal",
                "points": 5,
                "explanation": "Modals display important content or interactions on top of the main content. Fixed positioning ensures they stay centered regardless of scroll position.",
                "key_points": "- Modal positioning\n- Centered layout\n- Close functionality\n- Content overlay"
            },
            {
                "id": "w43",
                "category": "web_development",
                "title": "K-tech Somali: Tabs Interface",
                "description": "Create a tabbed interface with three tabs that switch content when clicked.",
                "answer": "<style>\n.tabs {\n    max-width: 500px;\n}\n.tab-buttons {\n    display: flex;\n    border-bottom: 2px solid #ddd;\n}\n.tab-btn {\n    padding: 10px 20px;\n    border: none;\n    background: none;\n    cursor: pointer;\n    opacity: 0.6;\n}\n.tab-btn.active {\n    opacity: 1;\n    border-bottom: 2px solid #3498db;\n    margin-bottom: -2px;\n}\n.tab-content {\n    display: none;\n    padding: 20px;\n}\n.tab-content.active {\n    display: block;\n}\n</style>\n<div class=\"tabs\">\n    <div class=\"tab-buttons\">\n        <button class=\"tab-btn active\" onclick=\"activateTab(this, 'tab1')\">Tab 1</button>\n        <button class=\"tab-btn\" onclick=\"activateTab(this, 'tab2')\">Tab 2</button>\n        <button class=\"tab-btn\" onclick=\"activateTab(this, 'tab3')\">Tab 3</button>\n    </div>\n    <div id=\"tab1\" class=\"tab-content active\">Content for tab 1</div>\n    <div id=\"tab2\" class=\"tab-content\">Content for tab 2</div>\n    <div id=\"tab3\" class=\"tab-content\">Content for tab 3</div>\n</div>",
                "hint": "Use JavaScript to toggle active classes on tabs and content",
                "points": 5,
                "explanation": "Tabs organize content into separate views that users can switch between. The active tab is visually distinguished to show the current selection.",
                "key_points": "- Tab navigation\n- Content switching\n- Active states\n- Interactive UI"
            },
            {
                "id": "w44",
                "category": "web_development",
                "title": "K-tech Somali: Tooltip with Arrow",
                "description": "Create a tooltip with an arrow that appears above an element on hover.",
                "answer": "<style>\n.tooltip-container {\n    position: relative;\n    display: inline-block;\n}\n.tooltip {\n    position: absolute;\n    bottom: 100%;\n    left: 50%;\n    transform: translateX(-50%);\n    padding: 8px 12px;\n    background: #333;\n    color: white;\n    border-radius: 4px;\n    font-size: 14px;\n    white-space: nowrap;\n    opacity: 0;\n    visibility: hidden;\n    transition: all 0.3s ease;\n    margin-bottom: 10px;\n}\n.tooltip::after {\n    content: '';\n    position: absolute;\n    top: 100%;\n    left: 50%;\n    transform: translateX(-50%);\n    border: 6px solid transparent;\n    border-top-color: #333;\n}\n.tooltip-container:hover .tooltip {\n    opacity: 1;\n    visibility: visible;\n}\n</style>\n<div class=\"tooltip-container\">\n    <button style=\"padding: 8px 16px;\">Hover me</button>\n    <div class=\"tooltip\">This is a tooltip</div>\n</div>",
                "hint": "Use a pseudo-element for the arrow and position it relative to the tooltip",
                "points": 5,
                "explanation": "Tooltips with arrows provide additional context and visually connect to their target element. The arrow helps users understand which element the tooltip relates to.",
                "key_points": "- Tooltip positioning\n- Arrow creation\n- Hover effects\n- Visual feedback"
            },
            {
                "id": "w45",
                "category": "web_development",
                "title": "K-tech Somali: Custom Radio Buttons",
                "description": "Create three custom-styled radio buttons with labels.",
                "answer": "<style>\n.radio-group {\n    display: flex;\n    gap: 20px;\n}\n.radio-container {\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n}\n.radio-input {\n    display: none;\n}\n.radio-mark {\n    width: 20px;\n    height: 20px;\n    border: 2px solid #3498db;\n    border-radius: 50%;\n    margin-right: 8px;\n    position: relative;\n}\n.radio-mark::after {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%) scale(0);\n    width: 12px;\n    height: 12px;\n    background: #3498db;\n    border-radius: 50%;\n    transition: transform 0.2s ease;\n}\n.radio-input:checked + .radio-mark::after {\n    transform: translate(-50%, -50%) scale(1);\n}\n</style>\n<div class=\"radio-group\">\n    <label class=\"radio-container\">\n        <input type=\"radio\" name=\"option\" class=\"radio-input\" checked>\n        <span class=\"radio-mark\"></span>\n        Option 1\n    </label>\n    <label class=\"radio-container\">\n        <input type=\"radio\" name=\"option\" class=\"radio-input\">\n        <span class=\"radio-mark\"></span>\n        Option 2\n    </label>\n    <label class=\"radio-container\">\n        <input type=\"radio\" name=\"option\" class=\"radio-input\">\n        <span class=\"radio-mark\"></span>\n        Option 3\n    </label>\n</div>",
                "hint": "Hide the default radio input and create a custom appearance using spans",
                "points": 5,
                "explanation": "Custom radio buttons improve the visual appeal while maintaining functionality. The animation provides feedback when the selection changes.",
                "key_points": "- Custom inputs\n- Radio groups\n- Selection states\n- Animated feedback"
            },
            {
                "id": "w46",
                "category": "web_development",
                "title": "K-tech Somali: Price Card",
                "description": "Create a price card with a title, price, feature list, and signup button.",
                "answer": "<div style=\"width: 300px; padding: 24px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); text-align: center;\">\n    <h2 style=\"margin: 0 0 16px; color: #333;\">Pro Plan</h2>\n    <div style=\"font-size: 36px; font-weight: bold; color: #3498db; margin-bottom: 20px;\">\n        <span style=\"font-size: 20px;\">$</span>29\n        <span style=\"font-size: 16px; font-weight: normal; color: #666;\">/month</span>\n    </div>\n    <ul style=\"list-style: none; padding: 0; margin: 0 0 24px; text-align: left;\">\n        <li style=\"padding: 8px 0; color: #666;\">✓ Feature 1</li>\n        <li style=\"padding: 8px 0; color: #666;\">✓ Feature 2</li>\n        <li style=\"padding: 8px 0; color: #666;\">✓ Feature 3</li>\n    </ul>\n    <button style=\"width: 100%; padding: 12px; background: #3498db; color: white; border: none; border-radius: 4px; font-size: 16px; cursor: pointer;\">Sign Up Now</button>\n</div>",
                "hint": "Use consistent spacing and clear visual hierarchy for the price card elements",
                "points": 5,
                "explanation": "Price cards present subscription or pricing information in a clear, visually appealing way. The layout emphasizes the key information and call-to-action.",
                "key_points": "- Card design\n- Price display\n- Feature list\n- Call-to-action"
            },
            {
                "id": "w47",
                "category": "web_development",
                "title": "K-tech Somali: Timeline",
                "description": "Create a vertical timeline with three events, each with a title and description.",
                "answer": "<style>\n.timeline {\n    position: relative;\n    max-width: 400px;\n    margin: 40px auto;\n    padding-left: 30px;\n}\n.timeline::before {\n    content: '';\n    position: absolute;\n    left: 0;\n    top: 0;\n    bottom: 0;\n    width: 2px;\n    background: #3498db;\n}\n.timeline-item {\n    position: relative;\n    margin-bottom: 30px;\n}\n.timeline-item::before {\n    content: '';\n    position: absolute;\n    left: -34px;\n    top: 0;\n    width: 10px;\n    height: 10px;\n    border-radius: 50%;\n    background: #3498db;\n    border: 2px solid white;\n}\n.timeline-title {\n    margin: 0 0 8px;\n    color: #333;\n}\n.timeline-content {\n    color: #666;\n    line-height: 1.5;\n}\n</style>\n<div class=\"timeline\">\n    <div class=\"timeline-item\">\n        <h3 class=\"timeline-title\">Event 1</h3>\n        <div class=\"timeline-content\">Description of the first event goes here.</div>\n    </div>\n    <div class=\"timeline-item\">\n        <h3 class=\"timeline-title\">Event 2</h3>\n        <div class=\"timeline-content\">Description of the second event goes here.</div>\n    </div>\n    <div class=\"timeline-item\">\n        <h3 class=\"timeline-title\">Event 3</h3>\n        <div class=\"timeline-content\">Description of the third event goes here.</div>\n    </div>\n</div>",
                "hint": "Use pseudo-elements to create the timeline line and dots",
                "points": 5,
                "explanation": "Timelines visualize sequential events or processes. The vertical line and dots create a clear visual connection between items.",
                "key_points": "- Timeline structure\n- Event markers\n- Visual connection\n- Content layout"
            },
            {
                "id": "w48",
                "category": "web_development",
                "title": "K-tech Somali: Image Overlay",
                "description": "Create an image card with a text overlay that appears on hover.",
                "answer": "<style>\n.image-card {\n    position: relative;\n    width: 300px;\n    height: 200px;\n    overflow: hidden;\n    border-radius: 8px;\n}\n.image-card img {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n    transition: transform 0.3s ease;\n}\n.overlay {\n    position: absolute;\n    inset: 0;\n    background: rgba(0, 0, 0, 0.7);\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    opacity: 0;\n    transition: opacity 0.3s ease;\n}\n.overlay-title {\n    color: white;\n    margin: 0 0 10px;\n    transform: translateY(20px);\n    transition: transform 0.3s ease;\n}\n.overlay-text {\n    color: #ddd;\n    text-align: center;\n    padding: 0 20px;\n    transform: translateY(20px);\n    transition: transform 0.3s ease;\n}\n.image-card:hover img {\n    transform: scale(1.1);\n}\n.image-card:hover .overlay {\n    opacity: 1;\n}\n.image-card:hover .overlay-title,\n.image-card:hover .overlay-text {\n    transform: translateY(0);\n}\n</style>\n<div class=\"image-card\">\n    <img src=\"https://picsum.photos/300/200\" alt=\"Sample image\">\n    <div class=\"overlay\">\n        <h3 class=\"overlay-title\">Image Title</h3>\n        <p class=\"overlay-text\">Description of the image goes here.</p>\n    </div>\n</div>",
                "hint": "Use absolute positioning for the overlay and transitions for smooth effects",
                "points": 5,
                "explanation": "Image overlays provide additional information about an image when users interact with it. The animations create a smooth and engaging experience.",
                "key_points": "- Overlay effects\n- Image scaling\n- Text animation\n- Hover interactions"
            },
            {
                "id": "w49",
                "category": "web_development",
                "title": "K-tech Somali: Social Share Panel",
                "description": "Create a floating social share panel with icons for Facebook, Twitter, and LinkedIn.",
                "answer": "<style>\n.share-panel {\n    position: fixed;\n    left: 20px;\n    top: 50%;\n    transform: translateY(-50%);\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n.share-button {\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    border: none;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 20px;\n    color: white;\n    cursor: pointer;\n    transition: transform 0.2s ease;\n}\n.share-button:hover {\n    transform: scale(1.1);\n}\n.facebook {\n    background: #1877f2;\n}\n.twitter {\n    background: #1da1f2;\n}\n.linkedin {\n    background: #0a66c2;\n}\n</style>\n<div class=\"share-panel\">\n    <button class=\"share-button facebook\">f</button>\n    <button class=\"share-button twitter\">t</button>\n    <button class=\"share-button linkedin\">in</button>\n</div>",
                "hint": "Use fixed positioning for the panel and flex layout for the buttons",
                "points": 5,
                "explanation": "Social share panels make it easy for users to share content. The fixed positioning keeps it accessible while scrolling.",
                "key_points": "- Fixed positioning\n- Social buttons\n- Hover effects\n- Vertical layout"
            },
            {
                "id": "w50",
                "category": "web_development",
                "title": "K-tech Somali: Feature List",
                "description": "Create a list of features with icons, titles, and descriptions in a grid layout.",
                "answer": "<style>\n.features-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 20px;\n    max-width: 800px;\n    padding: 20px;\n}\n.feature-item {\n    display: flex;\n    align-items: flex-start;\n    gap: 15px;\n    padding: 20px;\n    background: white;\n    border-radius: 8px;\n    box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n}\n.feature-icon {\n    width: 40px;\n    height: 40px;\n    background: #e8f4fd;\n    border-radius: 8px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 20px;\n    color: #3498db;\n}\n.feature-content h3 {\n    margin: 0 0 8px;\n    color: #333;\n}\n.feature-content p {\n    margin: 0;\n    color: #666;\n    line-height: 1.5;\n}\n</style>\n<div class=\"features-grid\">\n    <div class=\"feature-item\">\n        <div class=\"feature-icon\">⚡</div>\n        <div class=\"feature-content\">\n            <h3>Fast Performance</h3>\n            <p>Lightning quick load times for your application.</p>\n        </div>\n    </div>\n    <div class=\"feature-item\">\n        <div class=\"feature-icon\">🔒</div>\n        <div class=\"feature-content\">\n            <h3>Secure</h3>\n            <p>Enterprise-grade security built in.</p>\n        </div>\n    </div>\n    <div class=\"feature-item\">\n        <div class=\"feature-icon\">📱</div>\n        <div class=\"feature-content\">\n            <h3>Responsive</h3>\n            <p>Works perfectly on all devices.</p>\n        </div>\n    </div>\n</div>",
                "hint": "Use CSS Grid for layout and flexbox for feature item alignment",
                "points": 5,
                "explanation": "Feature lists showcase product capabilities in an organized way. The grid layout adapts to different screen sizes while maintaining visual consistency.",
                "key_points": "- Grid layout\n- Feature cards\n- Icon styling\n- Responsive design"
            }
        ],
        "medium": [
            {
                "id": "wm1",
                "category": "web_development",
                "title": "K-tech Somali: Flexbox Layout",
                "description": "Create a flexbox container with three items that are evenly spaced horizontally.",
                "answer": "<div style=\"display: flex; justify-content: space-between;\">\n    <div>Item 1</div>\n    <div>Item 2</div>\n    <div>Item 3</div>\n</div>",
                "hint": "Use display: flex and justify-content property",
                "points": 10,
                "explanation": "Flexbox is a CSS layout model that allows responsive elements within a container.",
                "key_points": "- Flexbox\n- Justify content\n- Responsive layout"
            },
            {
                "id": "wm2",
                "category": "web_development",
                "title": "K-tech Somali: CSS Grid",
                "description": "Create a 2x2 grid layout with four items using CSS Grid.",
                "answer": "<div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 10px;\">\n    <div>Item 1</div>\n    <div>Item 2</div>\n    <div>Item 3</div>\n    <div>Item 4</div>\n</div>",
                "hint": "Use display: grid and grid-template-columns",
                "points": 10,
                "explanation": "CSS Grid is a powerful layout system for creating two-dimensional layouts.",
                "key_points": "- CSS Grid\n- Grid template\n- Gap property"
            },
            {
                "id": "wm3",
                "category": "web_development",
                "title": "K-tech Somali: Media Query",
                "description": "Write a media query that changes text color to red when screen width is less than 600px.",
                "answer": "@media screen and (max-width: 600px) {\n    body {\n        color: red;\n    }\n}",
                "hint": "Use @media with max-width condition",
                "points": 10,
                "explanation": "Media queries allow responsive design by applying styles based on device characteristics.",
                "key_points": "- Media queries\n- Responsive design\n- Breakpoints"
            },
            {
                "id": "wm4",
                "category": "web_development",
                "title": "K-tech Somali: Sticky Header",
                "description": "Create a header that stays fixed at the top of the page when scrolling.",
                "answer": "<style>\n.sticky-header {\n    position: sticky;\n    top: 0;\n    background: white;\n    padding: 20px;\n    box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n    z-index: 100;\n}\n.content {\n    height: 200vh;\n    padding: 20px;\n}\n</style>\n<header class=\"sticky-header\">Sticky Header</header>\n<div class=\"content\">Scroll down to see the sticky effect</div>",
                "hint": "Use position: sticky with top: 0",
                "points": 10,
                "explanation": "Sticky positioning allows elements to switch between relative and fixed positioning based on scroll position.",
                "key_points": "- Sticky positioning\n- Z-index\n- Scroll behavior"
            },
            {
                "id": "wm5",
                "category": "web_development",
                "title": "K-tech Somali: Form Validation",
                "description": "Create a form with email and password fields that validates input using HTML5 attributes.",
                "answer": "<form onsubmit=\"event.preventDefault(); console.log('Form submitted')\">\n    <div style=\"margin-bottom: 15px;\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" required pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$\">\n    </div>\n    <div style=\"margin-bottom: 15px;\">\n        <label for=\"password\">Password:</label>\n        <input type=\"password\" id=\"password\" required minlength=\"8\">\n    </div>\n    <button type=\"submit\">Submit</button>\n</form>",
                "hint": "Use HTML5 input types and validation attributes",
                "points": 10,
                "explanation": "HTML5 provides built-in form validation through attributes like required, pattern, and type.",
                "key_points": "- Form validation\n- HTML5 attributes\n- Input patterns"
            },
            {
                "id": "wm6",
                "category": "web_development",
                "title": "K-tech Somali: CSS Variables",
                "description": "Create a theme system using CSS variables for colors and spacing.",
                "answer": "<style>\n:root {\n    --primary-color: #3498db;\n    --secondary-color: #2ecc71;\n    --spacing-unit: 8px;\n    --border-radius: 4px;\n}\n\n.theme-button {\n    background: var(--primary-color);\n    color: white;\n    padding: calc(var(--spacing-unit) * 2);\n    border: none;\n    border-radius: var(--border-radius);\n    margin: var(--spacing-unit);\n}\n\n.theme-card {\n    border: 2px solid var(--secondary-color);\n    padding: calc(var(--spacing-unit) * 3);\n    border-radius: var(--border-radius);\n}\n</style>\n\n<button class=\"theme-button\">Themed Button</button>\n<div class=\"theme-card\">Themed Card</div>",
                "hint": "Define variables in :root and use var() function",
                "points": 10,
                "explanation": "CSS variables (custom properties) allow for easy theming and maintenance of consistent styles.",
                "key_points": "- CSS variables\n- Theme system\n- Style reuse"
            },
            {
                "id": "wm7",
                "category": "web_development",
                "title": "K-tech Somali: Responsive Images",
                "description": "Create a responsive image that adapts its source based on screen size using srcset.",
                "answer": "<img srcset=\"small.jpg 300w,\n             medium.jpg 600w,\n             large.jpg 900w\"\n     sizes=\"(max-width: 320px) 280px,\n            (max-width: 640px) 580px,\n            800px\"\n     src=\"fallback.jpg\"\n     alt=\"Responsive image\"\n     style=\"max-width: 100%; height: auto;\">",
                "hint": "Use srcset with width descriptors and sizes attribute",
                "points": 10,
                "explanation": "The srcset attribute allows browsers to choose the most appropriate image source based on device characteristics.",
                "key_points": "- Responsive images\n- srcset attribute\n- Image optimization"
            },
            {
                "id": "wm8",
                "category": "web_development",
                "title": "K-tech Somali: CSS Transitions",
                "description": "Create a button that smoothly changes color and size on hover using CSS transitions.",
                "answer": "<style>\n.transition-button {\n    padding: 12px 24px;\n    background: #3498db;\n    color: white;\n    border: none;\n    border-radius: 4px;\n    font-size: 16px;\n    transition: all 0.3s ease;\n}\n\n.transition-button:hover {\n    background: #2980b9;\n    transform: scale(1.1);\n    box-shadow: 0 2px 5px rgba(0,0,0,0.2);\n}\n</style>\n\n<button class=\"transition-button\">Hover Me</button>",
                "hint": "Use transition property with ease timing function",
                "points": 10,
                "explanation": "CSS transitions provide smooth animations between property changes, enhancing user experience.",
                "key_points": "- CSS transitions\n- Hover effects\n- Transform property"
            },
            {
                "id": "wm9",
                "category": "web_development",
                "title": "K-tech Somali: CSS Grid Areas",
                "description": "Create a page layout using CSS Grid areas with header, sidebar, main content, and footer.",
                "answer": "<style>\n.grid-container {\n    display: grid;\n    grid-template-areas:\n        \"header header\"\n        \"sidebar main\"\n        \"footer footer\";\n    grid-template-columns: 200px 1fr;\n    grid-template-rows: auto 1fr auto;\n    min-height: 100vh;\n    gap: 20px;\n}\n\n.header { grid-area: header; background: #3498db; }\n.sidebar { grid-area: sidebar; background: #2ecc71; }\n.main { grid-area: main; background: #ecf0f1; }\n.footer { grid-area: footer; background: #34495e; }\n\n.grid-item {\n    padding: 20px;\n    color: white;\n}\n</style>\n\n<div class=\"grid-container\">\n    <header class=\"header grid-item\">Header</header>\n    <aside class=\"sidebar grid-item\">Sidebar</aside>\n    <main class=\"main grid-item\">Main Content</main>\n    <footer class=\"footer grid-item\">Footer</footer>\n</div>",
                "hint": "Use grid-template-areas to define the layout structure",
                "points": 10,
                "explanation": "CSS Grid areas provide a visual way to define complex page layouts using named template areas.",
                "key_points": "- Grid areas\n- Page layout\n- Named templates"
            },
            {
                "id": "wm10",
                "category": "web_development",
                "title": "K-tech Somali: Custom Checkbox",
                "description": "Create a custom-styled checkbox with an animated check mark.",
                "answer": "<style>\n.custom-checkbox {\n    position: relative;\n    display: inline-block;\n    cursor: pointer;\n    user-select: none;\n    padding-left: 30px;\n}\n\n.custom-checkbox input {\n    position: absolute;\n    opacity: 0;\n    cursor: pointer;\n}\n\n.checkmark {\n    position: absolute;\n    top: 0;\n    left: 0;\n    height: 20px;\n    width: 20px;\n    background-color: #eee;\n    border-radius: 4px;\n    transition: all 0.2s ease;\n}\n\n.custom-checkbox:hover input ~ .checkmark {\n    background-color: #ccc;\n}\n\n.custom-checkbox input:checked ~ .checkmark {\n    background-color: #2ecc71;\n}\n\n.checkmark:after {\n    content: '';\n    position: absolute;\n    display: none;\n    left: 7px;\n    top: 3px;\n    width: 5px;\n    height: 10px;\n    border: solid white;\n    border-width: 0 2px 2px 0;\n    transform: rotate(45deg);\n}\n\n.custom-checkbox input:checked ~ .checkmark:after {\n    display: block;\n}\n</style>\n\n<label class=\"custom-checkbox\">\n    Custom Checkbox\n    <input type=\"checkbox\">\n    <span class=\"checkmark\"></span>\n</label>",
                "hint": "Hide the default checkbox and create a custom appearance using pseudo-elements",
                "points": 10,
                "explanation": "Custom checkboxes allow for unique styling while maintaining accessibility and functionality.",
                "key_points": "- Custom inputs\n- Pseudo-elements\n- Animations"
            },
            {
                "id": "wm11",
                "category": "web_development",
                "title": "K-tech Somali: Accordion Menu",
                "description": "Create an accordion menu that expands/collapses sections on click.",
                "answer": "<style>\n.accordion {\n    max-width: 500px;\n}\n\n.accordion-item {\n    border: 1px solid #ddd;\n    margin-bottom: -1px;\n}\n\n.accordion-header {\n    padding: 15px;\n    background: #f8f9fa;\n    cursor: pointer;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.accordion-content {\n    max-height: 0;\n    overflow: hidden;\n    transition: max-height 0.3s ease;\n    background: white;\n}\n\n.accordion-content.active {\n    max-height: 200px;\n    padding: 15px;\n}\n\n.accordion-header::after {\n    content: '+';\n    font-size: 18px;\n}\n\n.accordion-item.active .accordion-header::after {\n    content: '-';\n}\n</style>\n\n<div class=\"accordion\">\n    <div class=\"accordion-item\" onclick=\"this.classList.toggle('active'); this.querySelector('.accordion-content').classList.toggle('active')\">\n        <div class=\"accordion-header\">Section 1</div>\n        <div class=\"accordion-content\">Content for section 1</div>\n    </div>\n    <div class=\"accordion-item\" onclick=\"this.classList.toggle('active'); this.querySelector('.accordion-content').classList.toggle('active')\">\n        <div class=\"accordion-header\">Section 2</div>\n        <div class=\"accordion-content\">Content for section 2</div>\n    </div>\n</div>",
                "hint": "Use max-height transitions for smooth animations",
                "points": 10,
                "explanation": "Accordions provide a way to show/hide content while maintaining a compact layout.",
                "key_points": "- Content toggle\n- Height transitions\n- Interactive UI"
            },
            {
                "id": "wm12",
                "category": "web_development",
                "title": "K-tech Somali: Card Flip",
                "description": "Create a card that flips to reveal content on the back when hovered.",
                "answer": "<style>\n.flip-card {\n    width: 300px;\n    height: 200px;\n    perspective: 1000px;\n}\n\n.flip-card-inner {\n    position: relative;\n    width: 100%;\n    height: 100%;\n    text-align: center;\n    transition: transform 0.6s;\n    transform-style: preserve-3d;\n}\n\n.flip-card:hover .flip-card-inner {\n    transform: rotateY(180deg);\n}\n\n.flip-card-front, .flip-card-back {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    backface-visibility: hidden;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 8px;\n}\n\n.flip-card-front {\n    background: #3498db;\n    color: white;\n}\n\n.flip-card-back {\n    background: #2ecc71;\n    color: white;\n    transform: rotateY(180deg);\n}\n</style>\n\n<div class=\"flip-card\">\n    <div class=\"flip-card-inner\">\n        <div class=\"flip-card-front\">Front Content</div>\n        <div class=\"flip-card-back\">Back Content</div>\n    </div>\n</div>",
                "hint": "Use transform-style: preserve-3d and backface-visibility",
                "points": 10,
                "explanation": "Card flips create engaging interactions using 3D transforms and transitions.",
                "key_points": "- 3D transforms\n- Hover effects\n- Card design"
            },
            {
                "id": "wm13",
                "category": "web_development",
                "title": "K-tech Somali: Masonry Grid",
                "description": "Create a masonry-style grid layout for images of varying heights.",
                "answer": "<style>\n.masonry-grid {\n    columns: 3 250px;\n    column-gap: 15px;\n    padding: 15px;\n}\n\n.masonry-item {\n    break-inside: avoid;\n    margin-bottom: 15px;\n    border-radius: 8px;\n    overflow: hidden;\n}\n\n.masonry-item img {\n    width: 100%;\n    display: block;\n}\n</style>\n\n<div class=\"masonry-grid\">\n    <div class=\"masonry-item\">\n        <img src=\"https://picsum.photos/300/200\" alt=\"Image 1\">\n    </div>\n    <div class=\"masonry-item\">\n        <img src=\"https://picsum.photos/300/300\" alt=\"Image 2\">\n    </div>\n    <div class=\"masonry-item\">\n        <img src=\"https://picsum.photos/300/250\" alt=\"Image 3\">\n    </div>\n    <!-- Add more items as needed -->\n</div>",
                "hint": "Use CSS columns for a simple masonry layout",
                "points": 10,
                "explanation": "Masonry layouts create a dynamic grid that efficiently uses space with items of varying heights.",
                "key_points": "- CSS columns\n- Grid layout\n- Image handling"
            },
            {
                "id": "wm14",
                "category": "web_development",
                "title": "K-tech Somali: Parallax Scrolling",
                "description": "Create a simple parallax scrolling effect with a fixed background image.",
                "answer": "<style>\n.parallax-container {\n    height: 100vh;\n    overflow-x: hidden;\n    overflow-y: auto;\n    perspective: 1px;\n}\n\n.parallax-layer {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.background {\n    transform: translateZ(-1px) scale(2);\n    background: url('https://picsum.photos/1200/800') no-repeat center;\n    background-size: cover;\n    z-index: -1;\n}\n\n.content {\n    transform: translateZ(0);\n    background: rgba(255, 255, 255, 0.9);\n    padding: 20px;\n    border-radius: 8px;\n    margin: 50vh 20px;\n}\n</style>\n\n<div class=\"parallax-container\">\n    <div class=\"parallax-layer background\"></div>\n    <div class=\"parallax-layer content\">\n        <h2>Parallax Content</h2>\n        <p>Scroll to see the effect</p>\n    </div>\n</div>",
                "hint": "Use perspective and translateZ for the parallax effect",
                "points": 10,
                "explanation": "Parallax scrolling creates depth by moving background elements at different speeds.",
                "key_points": "- Parallax effect\n- 3D transforms\n- Scroll behavior"
            },
            {
                "id": "wm15",
                "category": "web_development",
                "title": "K-tech Somali: Infinite Scroll",
                "description": "Create an infinite scroll container that loads more content when reaching the bottom.",
                "answer": "<style>\n.infinite-scroll {\n    height: 400px;\n    overflow-y: auto;\n    padding: 20px;\n    border: 1px solid #ddd;\n    border-radius: 8px;\n}\n\n.scroll-item {\n    padding: 15px;\n    margin-bottom: 10px;\n    background: #f8f9fa;\n    border-radius: 4px;\n}\n\n.loading {\n    text-align: center;\n    padding: 20px;\n    display: none;\n}\n</style>\n\n<div class=\"infinite-scroll\" onscroll=\"handleScroll(this)\">\n    <div id=\"content\"></div>\n    <div class=\"loading\">Loading...</div>\n</div>\n\n<script>\nlet page = 1;\n\nfunction handleScroll(element) {\n    if (element.scrollHeight - element.scrollTop === element.clientHeight) {\n        loadMore();\n    }\n}\n\nfunction loadMore() {\n    const loading = document.querySelector('.loading');\n    loading.style.display = 'block';\n    \n    // Simulate API call\n    setTimeout(() => {\n        const content = document.getElementById('content');\n        for (let i = 0; i < 5; i++) {\n            const item = document.createElement('div');\n            item.className = 'scroll-item';\n            item.textContent = `Item ${page * 5 + i + 1}`;\n            content.appendChild(item);\n        }\n        page++;\n        loading.style.display = 'none';\n    }, 1000);\n}\n\n// Initial load\nloadMore();\n</script>",
                "hint": "Check scroll position and load content when reaching the bottom",
                "points": 10,
                "explanation": "Infinite scroll provides continuous content loading as users scroll, improving engagement.",
                "key_points": "- Scroll detection\n- Content loading\n- Loading states"
            },
            {
                "id": "wm16",
                "category": "web_development",
                "title": "K-tech Somali: Multi-step Form",
                "description": "Create a multi-step form with progress indicator and navigation buttons.",
                "answer": "<style>\n.form-container {\n    max-width: 500px;\n    margin: 0 auto;\n}\n\n.progress-bar {\n    display: flex;\n    margin-bottom: 20px;\n    justify-content: space-between;\n}\n\n.step {\n    flex: 1;\n    height: 4px;\n    background: #ddd;\n    margin: 0 2px;\n    transition: background 0.3s ease;\n}\n\n.step.active {\n    background: #3498db;\n}\n\n.form-step {\n    display: none;\n}\n\n.form-step.active {\n    display: block;\n}\n\n.form-group {\n    margin-bottom: 15px;\n}\n\n.buttons {\n    display: flex;\n    justify-content: space-between;\n    margin-top: 20px;\n}\n</style>\n\n<div class=\"form-container\">\n    <div class=\"progress-bar\">\n        <div class=\"step active\"></div>\n        <div class=\"step\"></div>\n        <div class=\"step\"></div>\n    </div>\n    \n    <form id=\"multi-step-form\">\n        <div class=\"form-step active\">\n            <div class=\"form-group\">\n                <label>Step 1</label>\n                <input type=\"text\" required>\n            </div>\n            <div class=\"buttons\">\n                <button type=\"button\" onclick=\"nextStep(1)\">Next</button>\n            </div>\n        </div>\n        \n        <div class=\"form-step\">\n            <div class=\"form-group\">\n                <label>Step 2</label>\n                <input type=\"text\" required>\n            </div>\n            <div class=\"buttons\">\n                <button type=\"button\" onclick=\"prevStep(2)\">Previous</button>\n                <button type=\"button\" onclick=\"nextStep(2)\">Next</button>\n            </div>\n        </div>\n        \n        <div class=\"form-step\">\n            <div class=\"form-group\">\n                <label>Step 3</label>\n                <input type=\"text\" required>\n            </div>\n            <div class=\"buttons\">\n                <button type=\"button\" onclick=\"prevStep(3)\">Previous</button>\n                <button type=\"submit\">Submit</button>\n            </div>\n        </div>\n    </form>\n</div>\n\n<script>\nfunction nextStep(current) {\n    document.querySelector(`.form-step:nth-child(${current})`).classList.remove('active');\n    document.querySelector(`.form-step:nth-child(${current + 1})`).classList.add('active');\n    document.querySelector(`.step:nth-child(${current + 1})`).classList.add('active');\n}\n\nfunction prevStep(current) {\n    document.querySelector(`.form-step:nth-child(${current})`).classList.remove('active');\n    document.querySelector(`.form-step:nth-child(${current - 1})`).classList.add('active');\n    document.querySelector(`.step:nth-child(${current})`).classList.remove('active');\n}\n</script>",
                "hint": "Use step visibility toggling and progress tracking",
                "points": 10,
                "explanation": "Multi-step forms break down complex forms into manageable steps with visual progress indication.",
                "key_points": "- Form steps\n- Progress tracking\n- Navigation"
            },
            {
                "id": "wm17",
                "category": "web_development",
                "title": "K-tech Somali: Image Comparison Slider",
                "description": "Create a slider that reveals a before/after comparison of two images.",
                "answer": "<style>\n.comparison-slider {\n    position: relative;\n    width: 100%;\n    max-width: 600px;\n    height: 400px;\n    overflow: hidden;\n}\n\n.before-image,\n.after-image {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n\n.after-image {\n    width: 50%;\n    border-right: 2px solid white;\n    overflow: hidden;\n}\n\n.slider-handle {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 50%;\n    width: 40px;\n    transform: translateX(-50%);\n    cursor: ew-resize;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.handle-line {\n    position: absolute;\n    width: 2px;\n    height: 100%;\n    background: white;\n}\n\n.handle-circle {\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    background: white;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    box-shadow: 0 2px 5px rgba(0,0,0,0.2);\n}\n</style>\n\n<div class=\"comparison-slider\">\n    <div class=\"before-image\">\n        <img src=\"before.jpg\" alt=\"Before\" style=\"width: 100%; height: 100%; object-fit: cover;\">\n    </div>\n    <div class=\"after-image\">\n        <img src=\"after.jpg\" alt=\"After\" style=\"width: 200%; height: 100%; object-fit: cover;\">\n    </div>\n    <div class=\"slider-handle\">\n        <div class=\"handle-line\"></div>\n        <div class=\"handle-circle\">↔</div>\n    </div>\n</div>\n\n<script>\nconst slider = document.querySelector('.comparison-slider');\nconst handle = document.querySelector('.slider-handle');\nconst afterImage = document.querySelector('.after-image');\n\nlet isDragging = false;\n\nhandle.addEventListener('mousedown', () => isDragging = true);\nwindow.addEventListener('mouseup', () => isDragging = false);\nwindow.addEventListener('mousemove', handleDrag);\n\nfunction handleDrag(e) {\n    if (!isDragging) return;\n    \n    const sliderRect = slider.getBoundingClientRect();\n    const percentage = Math.min(Math.max(\n        ((e.clientX - sliderRect.left) / sliderRect.width) * 100,\n        0\n    ), 100);\n    \n    afterImage.style.width = `${percentage}%`;\n    handle.style.left = `${percentage}%`;\n}\n</script>",
                "hint": "Use mouse events to handle slider movement",
                "points": 10,
                "explanation": "Image comparison sliders allow users to visually compare two images by dragging a divider.",
                "key_points": "- Drag interaction\n- Image overlay\n- Visual comparison"
            },
            {
                "id": "wm18",
                "category": "web_development",
                "title": "K-tech Somali: Custom Select Menu",
                "description": "Create a custom-styled select menu with search functionality.",
                "answer": "<style>\n.custom-select {\n    position: relative;\n    width: 300px;\n}\n\n.select-button {\n    width: 100%;\n    padding: 10px;\n    background: white;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    cursor: pointer;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.select-dropdown {\n    position: absolute;\n    top: 100%;\n    left: 0;\n    right: 0;\n    background: white;\n    border: 1px solid #ddd;\n    border-top: none;\n    border-radius: 0 0 4px 4px;\n    max-height: 200px;\n    overflow-y: auto;\n    display: none;\n    z-index: 100;\n}\n\n.select-search {\n    padding: 10px;\n    border-bottom: 1px solid #ddd;\n}\n\n.select-search input {\n    width: 100%;\n    padding: 5px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n}\n\n.select-option {\n    padding: 10px;\n    cursor: pointer;\n}\n\n.select-option:hover {\n    background: #f8f9fa;\n}\n\n.custom-select.active .select-dropdown {\n    display: block;\n}\n</style>\n\n<div class=\"custom-select\">\n    <div class=\"select-button\" onclick=\"toggleSelect(this)\">\n        <span>Select an option</span>\n        <span>▼</span>\n    </div>\n    <div class=\"select-dropdown\">\n        <div class=\"select-search\">\n            <input type=\"text\" placeholder=\"Search...\" onkeyup=\"filterOptions(this)\">\n        </div>\n        <div class=\"select-options\">\n            <div class=\"select-option\" onclick=\"selectOption(this)\">Option 1</div>\n            <div class=\"select-option\" onclick=\"selectOption(this)\">Option 2</div>\n            <div class=\"select-option\" onclick=\"selectOption(this)\">Option 3</div>\n        </div>\n    </div>\n</div>\n\n<script>\nfunction toggleSelect(button) {\n    const select = button.closest('.custom-select');\n    select.classList.toggle('active');\n}\n\nfunction selectOption(option) {\n    const select = option.closest('.custom-select');\n    const button = select.querySelector('.select-button span');\n    button.textContent = option.textContent;\n    select.classList.remove('active');\n}\n\nfunction filterOptions(input) {\n    const filter = input.value.toLowerCase();\n    const options = input.closest('.select-dropdown').querySelectorAll('.select-option');\n    \n    options.forEach(option => {\n        const text = option.textContent.toLowerCase();\n        option.style.display = text.includes(filter) ? '' : 'none';\n    });\n}\n\ndocument.addEventListener('click', (e) => {\n    if (!e.target.closest('.custom-select')) {\n        document.querySelectorAll('.custom-select').forEach(select => {\n            select.classList.remove('active');\n        });\n    }\n});\n</script>",
                "hint": "Use a hidden native select with custom styled elements",
                "points": 10,
                "explanation": "Custom select menus provide enhanced functionality and styling options beyond native selects.",
                "key_points": "- Custom dropdown\n- Search filtering\n- Click handling"
            },
            {
                "id": "wm19",
                "category": "web_development",
                "title": "K-tech Somali: Image Gallery",
                "description": "Create a responsive image gallery with lightbox functionality.",
                "answer": "<style>\n.gallery {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n    gap: 15px;\n    padding: 20px;\n}\n\n.gallery-item {\n    position: relative;\n    cursor: pointer;\n    overflow: hidden;\n    border-radius: 8px;\n}\n\n.gallery-item img {\n    width: 100%;\n    height: 200px;\n    object-fit: cover;\n    transition: transform 0.3s ease;\n}\n\n.gallery-item:hover img {\n    transform: scale(1.1);\n}\n\n.lightbox {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.9);\n    display: none;\n    justify-content: center;\n    align-items: center;\n    z-index: 1000;\n}\n\n.lightbox.active {\n    display: flex;\n}\n\n.lightbox img {\n    max-width: 90%;\n    max-height: 90vh;\n    object-fit: contain;\n}\n\n.close-lightbox {\n    position: absolute;\n    top: 20px;\n    right: 20px;\n    color: white;\n    font-size: 30px;\n    cursor: pointer;\n}\n</style>\n\n<div class=\"gallery\">\n    <div class=\"gallery-item\" onclick=\"openLightbox(this)\">\n        <img src=\"image1.jpg\" alt=\"Gallery Image 1\">\n    </div>\n    <div class=\"gallery-item\" onclick=\"openLightbox(this)\">\n        <img src=\"image2.jpg\" alt=\"Gallery Image 2\">\n    </div>\n    <div class=\"gallery-item\" onclick=\"openLightbox(this)\">\n        <img src=\"image3.jpg\" alt=\"Gallery Image 3\">\n    </div>\n</div>\n\n<div class=\"lightbox\" onclick=\"closeLightbox()\">\n    <span class=\"close-lightbox\">&times;</span>\n    <img src=\"\" alt=\"Lightbox Image\">\n</div>\n\n<script>\nfunction openLightbox(item) {\n    const lightbox = document.querySelector('.lightbox');\n    const lightboxImg = lightbox.querySelector('img');\n    lightboxImg.src = item.querySelector('img').src;\n    lightbox.classList.add('active');\n}\n\nfunction closeLightbox() {\n    document.querySelector('.lightbox').classList.remove('active');\n}\n</script>",
                "hint": "Use grid for gallery layout and fixed positioning for lightbox",
                "points": 10,
                "explanation": "Image galleries with lightbox provide an elegant way to display and view images in a collection.",
                "key_points": "- Grid layout\n- Lightbox modal\n- Image zoom\n- Interactive UI"
            },
            {
                "id": "wm20",
                "category": "web_development",
                "title": "K-tech Somali: Drag and Drop",
                "description": "Create a simple drag and drop interface for reordering list items.",
                "answer": "<style>\n.drag-container {\n    max-width: 400px;\n    margin: 20px auto;\n}\n\n.draggable-list {\n    list-style: none;\n    padding: 0;\n}\n\n.draggable-item {\n    padding: 15px;\n    background: white;\n    border: 1px solid #ddd;\n    margin-bottom: 8px;\n    border-radius: 4px;\n    cursor: move;\n    user-select: none;\n    transition: background 0.2s ease;\n}\n\n.draggable-item.dragging {\n    opacity: 0.5;\n    background: #f8f9fa;\n}\n\n.drag-over {\n    border: 2px dashed #3498db;\n}\n</style>\n\n<div class=\"drag-container\">\n    <ul class=\"draggable-list\">\n        <li class=\"draggable-item\" draggable=\"true\">Item 1</li>\n        <li class=\"draggable-item\" draggable=\"true\">Item 2</li>\n        <li class=\"draggable-item\" draggable=\"true\">Item 3</li>\n        <li class=\"draggable-item\" draggable=\"true\">Item 4</li>\n    </ul>\n</div>\n\n<script>\nconst items = document.querySelectorAll('.draggable-item');\n\nitems.forEach(item => {\n    item.addEventListener('dragstart', () => {\n        item.classList.add('dragging');\n    });\n    \n    item.addEventListener('dragend', () => {\n        item.classList.remove('dragging');\n    });\n});\n\nconst list = document.querySelector('.draggable-list');\n\nlist.addEventListener('dragover', e => {\n    e.preventDefault();\n    const dragging = document.querySelector('.dragging');\n    const siblings = [...list.querySelectorAll('.draggable-item:not(.dragging)')];\n    \n    const nextSibling = siblings.find(sibling => {\n        const box = sibling.getBoundingClientRect();\n        return e.clientY < box.top + box.height / 2;\n    });\n    \n    list.insertBefore(dragging, nextSibling);\n});\n</script>",
                "hint": "Use HTML5 drag and drop API with event listeners",
                "points": 10,
                "explanation": "Drag and drop interfaces provide intuitive ways to reorder and organize content.",
                "key_points": "- Drag events\n- List reordering\n- Visual feedback"
            },
            {
                "id": "wm21",
                "category": "web_development",
                "title": "K-tech Somali: Tabs with Dynamic Content",
                "description": "Create a tabbed interface that loads content dynamically when switching tabs.",
                "answer": "<style>\n.tabs-container {\n    max-width: 600px;\n    margin: 20px auto;\n}\n\n.tab-buttons {\n    display: flex;\n    border-bottom: 2px solid #ddd;\n}\n\n.tab-button {\n    padding: 10px 20px;\n    border: none;\n    background: none;\n    cursor: pointer;\n    opacity: 0.6;\n    transition: all 0.3s ease;\n}\n\n.tab-button.active {\n    opacity: 1;\n    border-bottom: 2px solid #3498db;\n    margin-bottom: -2px;\n}\n\n.tab-content {\n    padding: 20px;\n    display: none;\n}\n\n.tab-content.active {\n    display: block;\n}\n\n.loading {\n    text-align: center;\n    padding: 20px;\n}\n\n.loading::after {\n    content: '';\n    display: inline-block;\n    width: 20px;\n    height: 20px;\n    border: 2px solid #ddd;\n    border-radius: 50%;\n    border-top-color: #3498db;\n    animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n    to { transform: rotate(360deg); }\n}\n</style>\n\n<div class=\"tabs-container\">\n    <div class=\"tab-buttons\">\n        <button class=\"tab-button active\" onclick=\"switchTab(0)\">Tab 1</button>\n        <button class=\"tab-button\" onclick=\"switchTab(1)\">Tab 2</button>\n        <button class=\"tab-button\" onclick=\"switchTab(2)\">Tab 3</button>\n    </div>\n    \n    <div class=\"tab-content active\" id=\"tab1\">\n        <div class=\"content\">Content for Tab 1</div>\n    </div>\n    <div class=\"tab-content\" id=\"tab2\"></div>\n    <div class=\"tab-content\" id=\"tab3\"></div>\n</div>\n\n<script>\nfunction switchTab(index) {\n    const buttons = document.querySelectorAll('.tab-button');\n    const contents = document.querySelectorAll('.tab-content');\n    \n    buttons.forEach(btn => btn.classList.remove('active'));\n    contents.forEach(content => content.classList.remove('active'));\n    \n    buttons[index].classList.add('active');\n    contents[index].classList.add('active');\n    \n    // Load content if not already loaded\n    if (!contents[index].querySelector('.content')) {\n        loadContent(contents[index], index + 1);\n    }\n}\n\nfunction loadContent(container, tabNumber) {\n    container.innerHTML = '<div class=\"loading\"></div>';\n    \n    // Simulate API call\n    setTimeout(() => {\n        container.innerHTML = `\n            <div class=\"content\">\n                Dynamically loaded content for Tab ${tabNumber}\n            </div>\n        `;\n    }, 1000);\n}\n</script>",
                "hint": "Use async content loading with loading indicators",
                "points": 10,
                "explanation": "Dynamic content loading in tabs improves initial page load time and provides better user feedback.",
                "key_points": "- Tab switching\n- Dynamic loading\n- Loading states"
            },
            {
                "id": "wm22",
                "category": "web_development",
                "title": "K-tech Somali: Responsive Navigation Menu",
                "description": "Create a responsive navigation menu that transforms into a hamburger menu on mobile devices.",
                "answer": "<style>\n.nav-container {\n    background: #333;\n    padding: 15px;\n}\n\n.nav-menu {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    max-width: 1200px;\n    margin: 0 auto;\n}\n\n.nav-brand {\n    color: white;\n    font-size: 24px;\n    text-decoration: none;\n}\n\n.nav-links {\n    display: flex;\n    gap: 20px;\n}\n\n.nav-link {\n    color: white;\n    text-decoration: none;\n    padding: 5px 10px;\n    transition: color 0.3s ease;\n}\n\n.nav-link:hover {\n    color: #3498db;\n}\n\n.hamburger {\n    display: none;\n    flex-direction: column;\n    gap: 5px;\n    cursor: pointer;\n    padding: 10px;\n}\n\n.hamburger-line {\n    width: 25px;\n    height: 3px;\n    background: white;\n    transition: all 0.3s ease;\n}\n\n@media (max-width: 768px) {\n    .hamburger {\n        display: flex;\n    }\n    \n    .nav-links {\n        display: none;\n        position: absolute;\n        top: 100%;\n        left: 0;\n        right: 0;\n        background: #333;\n        flex-direction: column;\n        padding: 20px;\n        text-align: center;\n    }\n    \n    .nav-links.active {\n        display: flex;\n    }\n    \n    .hamburger.active .hamburger-line:nth-child(1) {\n        transform: rotate(45deg) translate(5px, 5px);\n    }\n    \n    .hamburger.active .hamburger-line:nth-child(2) {\n        opacity: 0;\n    }\n    \n    .hamburger.active .hamburger-line:nth-child(3) {\n        transform: rotate(-45deg) translate(7px, -7px);\n    }\n}\n</style>\n\n<nav class=\"nav-container\">\n    <div class=\"nav-menu\">\n        <a href=\"#\" class=\"nav-brand\">Logo</a>\n        \n        <div class=\"hamburger\" onclick=\"toggleMenu(this)\">\n            <div class=\"hamburger-line\"></div>\n            <div class=\"hamburger-line\"></div>\n            <div class=\"hamburger-line\"></div>\n        </div>\n        \n        <div class=\"nav-links\">\n            <a href=\"#\" class=\"nav-link\">Home</a>\n            <a href=\"#\" class=\"nav-link\">About</a>\n            <a href=\"#\" class=\"nav-link\">Services</a>\n            <a href=\"#\" class=\"nav-link\">Contact</a>\n        </div>\n    </div>\n</nav>\n\n<script>\nfunction toggleMenu(hamburger) {\n    hamburger.classList.toggle('active');\n    document.querySelector('.nav-links').classList.toggle('active');\n}\n\n// Close menu when clicking outside\ndocument.addEventListener('click', (e) => {\n    if (!e.target.closest('.nav-menu')) {\n        document.querySelector('.hamburger').classList.remove('active');\n        document.querySelector('.nav-links').classList.remove('active');\n    }\n});\n</script>",
                "hint": "Use media queries and hamburger menu toggle",
                "points": 10,
                "explanation": "Responsive navigation menus adapt to different screen sizes while maintaining accessibility and usability.",
                "key_points": "- Mobile-first design\n- Hamburger menu\n- Responsive layout"
            },
            {
                "id": "wm23",
                "category": "web_development",
                "title": "K-tech Somali: Animated Counter",
                "description": "Create an animated number counter that increments when scrolled into view.",
                "answer": "<style>\n.counter-container {\n    display: flex;\n    justify-content: space-around;\n    padding: 50px 20px;\n    max-width: 800px;\n    margin: 0 auto;\n}\n\n.counter-item {\n    text-align: center;\n}\n\n.counter-number {\n    font-size: 48px;\n    font-weight: bold;\n    color: #3498db;\n    margin-bottom: 10px;\n}\n\n.counter-label {\n    color: #666;\n    font-size: 18px;\n}\n</style>\n\n<div class=\"counter-container\">\n    <div class=\"counter-item\">\n        <div class=\"counter-number\" data-target=\"1500\">0</div>\n        <div class=\"counter-label\">Customers</div>\n    </div>\n    <div class=\"counter-item\">\n        <div class=\"counter-number\" data-target=\"850\">0</div>\n        <div class=\"counter-label\">Projects</div>\n    </div>\n    <div class=\"counter-item\">\n        <div class=\"counter-number\" data-target=\"95\">0</div>\n        <div class=\"counter-label\">Satisfaction %</div>\n    </div>\n</div>\n\n<script>\nfunction animateCounter(element) {\n    const target = parseInt(element.getAttribute('data-target'));\n    const duration = 2000; // 2 seconds\n    const steps = 50;\n    const stepValue = target / steps;\n    let current = 0;\n    \n    const timer = setInterval(() => {\n        current += stepValue;\n        if (current >= target) {\n            element.textContent = target;\n            clearInterval(timer);\n        } else {\n            element.textContent = Math.round(current);\n        }\n    }, duration / steps);\n}\n\n// Intersection Observer for scroll detection\nconst observer = new IntersectionObserver((entries) => {\n    entries.forEach(entry => {\n        if (entry.isIntersecting && !entry.target.hasAttribute('data-animated')) {\n            animateCounter(entry.target);\n            entry.target.setAttribute('data-animated', 'true');\n        }\n    });\n}, { threshold: 0.5 });\n\n// Observe all counter numbers\ndocument.querySelectorAll('.counter-number').forEach(counter => {\n    observer.observe(counter);\n});\n</script>",
                "hint": "Use Intersection Observer and setInterval for animation",
                "points": 10,
                "explanation": "Animated counters provide visual interest and highlight important statistics when users scroll to them.",
                "key_points": "- Intersection Observer\n- Number animation\n- Scroll detection"
            },
            {
                "id": "wm24",
                "category": "web_development",
                "title": "K-tech Somali: Carousel Slider",
                "description": "Create a simple image carousel that slides between three images automatically.",
                "answer": "<style>\n.carousel {\n    position: relative;\n    width: 300px;\n    height: 200px;\n    overflow: hidden;\n}\n.carousel-inner {\n    display: flex;\n    width: 300%;\n    animation: slide 12s infinite;\n}\n.carousel-item {\n    width: 100%;\n    height: 200px;\n}\n.carousel-item:nth-child(1) { background: #3498db; }\n.carousel-item:nth-child(2) { background: #e74c3c; }\n.carousel-item:nth-child(3) { background: #2ecc71; }\n\n@keyframes slide {\n    0%, 30% { transform: translateX(0); }\n    33%, 63% { transform: translateX(-33.33%); }\n    66%, 96% { transform: translateX(-66.66%); }\n    100% { transform: translateX(0); }\n}\n</style>\n<div class=\"carousel\">\n    <div class=\"carousel-inner\">\n        <div class=\"carousel-item\">Slide 1</div>\n        <div class=\"carousel-item\">Slide 2</div>\n        <div class=\"carousel-item\">Slide 3</div>\n    </div>\n</div>",
                "hint": "Use CSS animations with keyframes to create the sliding effect",
                "points": 10,
                "explanation": "A carousel slider uses CSS animations to create smooth transitions between slides. The animation timing function controls the sliding behavior.",
                "key_points": "- CSS animations\n- Keyframes\n- Transform property\n- Overflow handling"
            },
            {
                "id": "wm25",
                "category": "web_development",
                "title": "K-tech Somali: Accordion Menu with Animation",
                "description": "Create an accordion menu where content smoothly expands and collapses on click.",
                "answer": "<style>\n.accordion-item {\n    border: 1px solid #ddd;\n    margin-bottom: 5px;\n}\n.accordion-header {\n    background: #f4f4f4;\n    padding: 10px;\n    cursor: pointer;\n    user-select: none;\n}\n.accordion-content {\n    max-height: 0;\n    overflow: hidden;\n    transition: max-height 0.3s ease-out;\n    padding: 0 10px;\n}\n.accordion-content.active {\n    max-height: 200px;\n}\n</style>\n<div class=\"accordion-item\">\n    <div class=\"accordion-header\" onclick=\"this.nextElementSibling.classList.toggle('active')\">Click to expand</div>\n    <div class=\"accordion-content\">Content goes here</div>\n</div>",
                "hint": "Use max-height transition for smooth animation",
                "points": 10,
                "explanation": "The accordion effect is achieved by transitioning the max-height property. Using max-height instead of height allows for dynamic content sizes.",
                "key_points": "- CSS transitions\n- Height animation\n- Click events\n- Content overflow"
            },
            {
                "id": "wm26",
                "category": "web_development",
                "title": "K-tech Somali: Custom Checkbox Animation",
                "description": "Create a custom checkbox with a checkmark animation when clicked.",
                "answer": "<style>\n.custom-checkbox {\n    position: relative;\n    display: inline-block;\n    width: 20px;\n    height: 20px;\n    margin-right: 10px;\n}\n.custom-checkbox input {\n    display: none;\n}\n.checkmark {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    border: 2px solid #3498db;\n    border-radius: 3px;\n}\n.checkmark:after {\n    content: '';\n    position: absolute;\n    left: 6px;\n    top: 2px;\n    width: 5px;\n    height: 10px;\n    border: solid white;\n    border-width: 0 2px 2px 0;\n    transform: rotate(45deg) scale(0);\n    transition: transform 0.2s;\n}\ninput:checked + .checkmark {\n    background: #3498db;\n}\ninput:checked + .checkmark:after {\n    transform: rotate(45deg) scale(1);\n}\n</style>\n<label class=\"custom-checkbox\">\n    <input type=\"checkbox\">\n    <span class=\"checkmark\"></span>\n</label>",
                "hint": "Use transform scale and rotate for the checkmark animation",
                "points": 10,
                "explanation": "The checkmark animation uses CSS transforms to scale and rotate a pseudo-element. The transition creates a smooth animation effect.",
                "key_points": "- Custom form elements\n- CSS transforms\n- Pseudo-elements\n- Transitions"
            },
            {
                "id": "wm27",
                "category": "web_development",
                "title": "K-tech Somali: Gradient Text Animation",
                "description": "Create text with an animated gradient background that moves continuously.",
                "answer": "<style>\n.gradient-text {\n    font-size: 32px;\n    font-weight: bold;\n    background: linear-gradient(90deg, #3498db, #e74c3c, #2ecc71, #f1c40f);\n    background-size: 300% 100%;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    animation: gradient 8s linear infinite;\n}\n\n@keyframes gradient {\n    0% { background-position: 0% 50%; }\n    100% { background-position: 300% 50%; }\n}\n</style>\n<div class=\"gradient-text\">Animated Text</div>",
                "hint": "Use background-clip and animate background-position",
                "points": 10,
                "explanation": "The gradient effect is created using a linear-gradient background that's clipped to text. Animating the background position creates the moving effect.",
                "key_points": "- Gradient backgrounds\n- Text effects\n- CSS animations\n- Background clipping"
            },
            {
                "id": "wm28",
                "category": "web_development",
                "title": "K-tech Somali: Floating Labels",
                "description": "Create input fields with labels that float up when the field is focused or has content.",
                "answer": "<style>\n.form-group {\n    position: relative;\n    margin: 20px 0;\n}\n.form-input {\n    width: 100%;\n    padding: 10px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n}\n.form-label {\n    position: absolute;\n    left: 10px;\n    top: 50%;\n    transform: translateY(-50%);\n    background: white;\n    padding: 0 5px;\n    color: #666;\n    transition: all 0.2s;\n}\n.form-input:focus + .form-label,\n.form-input:not(:placeholder-shown) + .form-label {\n    top: 0;\n    font-size: 12px;\n    color: #3498db;\n}\n</style>\n<div class=\"form-group\">\n    <input type=\"text\" class=\"form-input\" placeholder=\" \">\n    <label class=\"form-label\">Username</label>\n</div>",
                "hint": "Use transform and transitions for smooth label movement",
                "points": 10,
                "explanation": "Floating labels improve form usability by maintaining context while maximizing space. The effect uses CSS transforms and transitions for smooth animation.",
                "key_points": "- Form styling\n- Position absolute\n- CSS transforms\n- Input states"
            },
            {
                "id": "wm29",
                "category": "web_development",
                "title": "K-tech Somali: Image Comparison Slider",
                "description": "Create a slider that reveals a before/after comparison of two images.",
                "answer": "<style>\n.comparison {\n    position: relative;\n    width: 300px;\n    height: 200px;\n    overflow: hidden;\n}\n.before,\n.after {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n}\n.before { background: #3498db; }\n.after { background: #e74c3c; }\n.slider {\n    position: absolute;\n    width: 2px;\n    height: 100%;\n    background: white;\n    left: 50%;\n    cursor: ew-resize;\n}\n.comparison:hover .slider {\n    width: 4px;\n}\n.before {\n    clip-path: polygon(0 0, 50% 0, 50% 100%, 0 100%);\n}\n</style>\n<div class=\"comparison\">\n    <div class=\"before\">Before</div>\n    <div class=\"after\">After</div>\n    <div class=\"slider\"></div>\n</div>",
                "hint": "Use clip-path for image revealing effect",
                "points": 10,
                "explanation": "The comparison slider uses clip-path to reveal/hide portions of images. The slider provides a visual indicator for user interaction.",
                "key_points": "- Clip-path\n- Position absolute\n- User interaction\n- Image comparison"
            },
            {
                "id": "wm30",
                "category": "web_development",
                "title": "K-tech Somali: Parallax Cards",
                "description": "Create cards with a parallax effect on hover.",
                "answer": "<style>\n.card-container {\n    perspective: 1000px;\n    padding: 20px;\n}\n.card {\n    width: 200px;\n    height: 300px;\n    background: linear-gradient(45deg, #3498db, #2ecc71);\n    border-radius: 10px;\n    transform-style: preserve-3d;\n    transition: transform 0.3s ease;\n}\n.card:hover {\n    transform: rotateX(10deg) rotateY(10deg);\n}\n.card::before {\n    content: '';\n    position: absolute;\n    inset: 0;\n    background: rgba(255,255,255,0.1);\n    transform: translateZ(20px);\n    border-radius: inherit;\n    pointer-events: none;\n}\n</style>\n<div class=\"card-container\">\n    <div class=\"card\"></div>\n</div>",
                "hint": "Use perspective and transform-style for 3D effect",
                "points": 10,
                "explanation": "The parallax effect is created using 3D transforms and perspective. The pseudo-element adds depth to the design.",
                "key_points": "- 3D transforms\n- Perspective\n- Hover effects\n- Gradients"
            },
            {
                "id": "wm31",
                "category": "web_development",
                "title": "K-tech Somali: Animated Menu Icon",
                "description": "Create a hamburger menu icon that animates into an X when clicked.",
                "answer": "<style>\n.menu-icon {\n    width: 30px;\n    height: 20px;\n    position: relative;\n    cursor: pointer;\n}\n.menu-icon span {\n    position: absolute;\n    width: 100%;\n    height: 2px;\n    background: #333;\n    transition: all 0.3s;\n}\n.menu-icon span:nth-child(1) { top: 0; }\n.menu-icon span:nth-child(2) { top: 50%; transform: translateY(-50%); }\n.menu-icon span:nth-child(3) { bottom: 0; }\n.menu-icon.active span:nth-child(1) {\n    transform: rotate(45deg);\n    top: 50%;\n}\n.menu-icon.active span:nth-child(2) {\n    opacity: 0;\n}\n.menu-icon.active span:nth-child(3) {\n    transform: rotate(-45deg);\n    bottom: 50%;\n}\n</style>\n<div class=\"menu-icon\" onclick=\"this.classList.toggle('active')\">\n    <span></span>\n    <span></span>\n    <span></span>\n</div>",
                "hint": "Transform and rotate the spans to create the X",
                "points": 10,
                "explanation": "The menu icon animation uses CSS transforms to rotate and reposition spans. Opacity changes create the appearance/disappearance effect.",
                "key_points": "- CSS transforms\n- Transitions\n- Position absolute\n- Click events"
            },
            {
                "id": "wm32",
                "category": "web_development",
                "title": "K-tech Somali: Animated Counter",
                "description": "Create a number counter that animates when scrolled into view.",
                "answer": "<style>\n.counter {\n    font-size: 48px;\n    font-weight: bold;\n    opacity: 0;\n    transform: translateY(20px);\n    transition: all 0.5s;\n}\n.counter.visible {\n    opacity: 1;\n    transform: translateY(0);\n}\n</style>\n<div class=\"counter\" data-target=\"100\">0</div>\n<script>\nconst counter = document.querySelector('.counter');\nconst target = parseInt(counter.dataset.target);\nlet current = 0;\n\nconst observer = new IntersectionObserver((entries) => {\n    if (entries[0].isIntersecting) {\n        counter.classList.add('visible');\n        const interval = setInterval(() => {\n            if (current < target) {\n                current += 1;\n                counter.textContent = current;\n            } else {\n                clearInterval(interval);\n            }\n        }, 20);\n    }\n});\n\nobserver.observe(counter);\n</script>",
                "hint": "Use IntersectionObserver and setInterval for the animation",
                "points": 10,
                "explanation": "The counter uses IntersectionObserver to detect when it's visible, then animates the number using setInterval. CSS transitions handle the fade-in effect.",
                "key_points": "- IntersectionObserver\n- JavaScript timing\n- CSS transitions\n- DOM manipulation"
            },
            {
                "id": "wm33",
                "category": "web_development",
                "title": "K-tech Somali: Animated Progress Bar",
                "description": "Create a progress bar that fills up with a gradient animation.",
                "answer": "<style>\n.progress-container {\n    width: 300px;\n    height: 20px;\n    background: #f0f0f0;\n    border-radius: 10px;\n    overflow: hidden;\n}\n.progress-bar {\n    width: 75%;\n    height: 100%;\n    background: linear-gradient(90deg, #3498db, #2ecc71);\n    background-size: 200% 100%;\n    animation: progress 2s ease-in-out forwards,\n             gradient 2s linear infinite;\n}\n\n@keyframes progress {\n    from { width: 0; }\n    to { width: 75%; }\n}\n\n@keyframes gradient {\n    0% { background-position: 0% 50%; }\n    100% { background-position: 200% 50%; }\n}\n</style>\n<div class=\"progress-container\">\n    <div class=\"progress-bar\"></div>\n</div>",
                "hint": "Combine width animation with gradient animation",
                "points": 10,
                "explanation": "The progress bar combines two animations: one for the width increase and another for the gradient movement. This creates a dynamic and engaging loading indicator.",
                "key_points": "- CSS animations\n- Gradients\n- Multiple animations\n- Progress indicators"
            },
            {
                "id": "wm34",
                "category": "web_development",
                "title": "K-tech Somali: Typing Effect",
                "description": "Create a typing animation effect for text.",
                "answer": "<style>\n.typing-text {\n    width: fit-content;\n    font-family: monospace;\n    border-right: 2px solid #000;\n    white-space: nowrap;\n    overflow: hidden;\n    animation: typing 3s steps(30),\n             blink 0.5s step-end infinite alternate;\n}\n\n@keyframes typing {\n    from { width: 0; }\n}\n\n@keyframes blink {\n    50% { border-color: transparent; }\n}\n</style>\n<div class=\"typing-text\">Welcome to K-tech Somali</div>",
                "hint": "Use steps() timing function for the typing effect",
                "points": 10,
                "explanation": "The typing effect is created by animating the width of a container with the steps() timing function. The blinking cursor is simulated with a border animation.",
                "key_points": "- CSS animations\n- Steps timing\n- Text effects\n- Multiple animations"
            },
            {
                "id": "wm35",
                "category": "web_development",
                "title": "K-tech Somali: 3D Flip Card",
                "description": "Create a card that flips in 3D space when hovered.",
                "answer": "<style>\n.flip-card {\n    width: 200px;\n    height: 300px;\n    perspective: 1000px;\n}\n.flip-card-inner {\n    position: relative;\n    width: 100%;\n    height: 100%;\n    text-align: center;\n    transition: transform 0.6s;\n    transform-style: preserve-3d;\n}\n.flip-card:hover .flip-card-inner {\n    transform: rotateY(180deg);\n}\n.flip-card-front,\n.flip-card-back {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    backface-visibility: hidden;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 10px;\n}\n.flip-card-front {\n    background: #3498db;\n    color: white;\n}\n.flip-card-back {\n    background: #2ecc71;\n    color: white;\n    transform: rotateY(180deg);\n}\n</style>\n<div class=\"flip-card\">\n    <div class=\"flip-card-inner\">\n        <div class=\"flip-card-front\">Front</div>\n        <div class=\"flip-card-back\">Back</div>\n    </div>\n</div>",
                "hint": "Use transform-style: preserve-3d and backface-visibility",
                "points": 10,
                "explanation": "The 3D flip effect uses CSS transforms with perspective and preserve-3d. Backface-visibility hidden ensures only one side is visible at a time.",
                "key_points": "- 3D transforms\n- Perspective\n- Backface visibility\n- Hover effects"
            },
            {
                "id": "wm36",
                "category": "web_development",
                "title": "K-tech Somali: Ripple Effect",
                "description": "Create a ripple effect animation when clicking a button.",
                "answer": "<style>\n.ripple-button {\n    position: relative;\n    padding: 12px 24px;\n    background: #3498db;\n    color: white;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n    overflow: hidden;\n}\n.ripple {\n    position: absolute;\n    background: rgba(255,255,255,0.3);\n    border-radius: 50%;\n    transform: scale(0);\n    animation: ripple 0.6s linear;\n    pointer-events: none;\n}\n\n@keyframes ripple {\n    to {\n        transform: scale(4);\n        opacity: 0;\n    }\n}\n</style>\n<button class=\"ripple-button\" onclick=\"createRipple(event)\">Click Me</button>\n<script>\nfunction createRipple(event) {\n    const button = event.currentTarget;\n    const ripple = document.createElement('span');\n    const rect = button.getBoundingClientRect();\n    const size = Math.max(rect.width, rect.height);\n    const x = event.clientX - rect.left - size/2;\n    const y = event.clientY - rect.top - size/2;\n    \n    ripple.className = 'ripple';\n    ripple.style.width = ripple.style.height = `${size}px`;\n    ripple.style.left = `${x}px`;\n    ripple.style.top = `${y}px`;\n    \n    button.appendChild(ripple);\n    ripple.addEventListener('animationend', () => ripple.remove());\n}\n</script>",
                "hint": "Create and animate a span element at the click position",
                "points": 10,
                "explanation": "The ripple effect is created by dynamically adding and animating a span element at the click position. The animation scales and fades out the ripple.",
                "key_points": "- Click events\n- Dynamic elements\n- CSS animations\n- Position calculations"
            },
            {
                "id": "wm37",
                "category": "web_development",
                "title": "K-tech Somali: Scroll Progress",
                "description": "Create a progress bar that shows how far the user has scrolled down the page.",
                "answer": "<style>\n.scroll-progress {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 4px;\n    background: #f0f0f0;\n    z-index: 1000;\n}\n.progress-bar {\n    width: 0%;\n    height: 100%;\n    background: #3498db;\n    transition: width 0.1s;\n}\n</style>\n<div class=\"scroll-progress\">\n    <div class=\"progress-bar\"></div>\n</div>\n<script>\nwindow.addEventListener('scroll', () => {\n    const winScroll = document.documentElement.scrollTop;\n    const height = document.documentElement.scrollHeight - document.documentElement.clientHeight;\n    const scrolled = (winScroll / height) * 100;\n    document.querySelector('.progress-bar').style.width = scrolled + '%';\n});\n</script>",
                "hint": "Calculate scroll percentage using scroll event",
                "points": 10,
                "explanation": "The scroll progress bar uses the scroll event to calculate how far the user has scrolled relative to the total scrollable height. This percentage is used to update the progress bar width.",
                "key_points": "- Scroll events\n- Fixed positioning\n- Progress calculation\n- CSS transitions"
            },
            {
                "id": "wm38",
                "category": "web_development",
                "title": "K-tech Somali: Image Zoom",
                "description": "Create an image that smoothly zooms in on hover with a magnifying glass effect.",
                "answer": "<style>\n.zoom-container {\n    position: relative;\n    width: 300px;\n    height: 200px;\n    overflow: hidden;\n    cursor: zoom-in;\n}\n.zoom-image {\n    width: 100%;\n    height: 100%;\n    background: url('https://picsum.photos/300/200') no-repeat center;\n    background-size: cover;\n    transition: transform 0.3s ease;\n}\n.zoom-container:hover .zoom-image {\n    transform: scale(1.5);\n}\n.magnifier {\n    position: absolute;\n    width: 100px;\n    height: 100px;\n    border: 2px solid white;\n    border-radius: 50%;\n    pointer-events: none;\n    opacity: 0;\n    transform: translate(-50%, -50%);\n    transition: opacity 0.3s;\n}\n.zoom-container:hover .magnifier {\n    opacity: 1;\n}\n</style>\n<div class=\"zoom-container\" onmousemove=\"updateMagnifier(event)\">\n    <div class=\"zoom-image\"></div>\n    <div class=\"magnifier\"></div>\n</div>\n<script>\nfunction updateMagnifier(e) {\n    const magnifier = e.currentTarget.querySelector('.magnifier');\n    const rect = e.currentTarget.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    magnifier.style.left = `${x}px`;\n    magnifier.style.top = `${y}px`;\n}\n</script>",
                "hint": "Use transform: scale and track mouse position",
                "points": 10,
                "explanation": "The zoom effect combines CSS transforms for the image zoom with JavaScript to track the mouse position for the magnifier overlay.",
                "key_points": "- Mouse events\n- CSS transforms\n- Position tracking\n- Visual effects"
            },
            {
                "id": "wm39",
                "category": "web_development",
                "title": "K-tech Somali: Infinite Scroll Gallery",
                "description": "Create an image gallery that loads more images when scrolling to the bottom.",
                "answer": "<style>\n.gallery {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n    gap: 20px;\n    padding: 20px;\n}\n.image-card {\n    aspect-ratio: 1;\n    background: #f0f0f0;\n    border-radius: 8px;\n    overflow: hidden;\n    transition: transform 0.3s;\n}\n.image-card:hover {\n    transform: scale(1.05);\n}\n.loading {\n    text-align: center;\n    padding: 20px;\n    display: none;\n}\n</style>\n<div class=\"gallery\" id=\"gallery\"></div>\n<div class=\"loading\">Loading...</div>\n<script>\nlet page = 1;\nconst loadImages = () => {\n    const gallery = document.getElementById('gallery');\n    for(let i = 0; i < 6; i++) {\n        const card = document.createElement('div');\n        card.className = 'image-card';\n        card.style.background = `url(https://picsum.photos/200?random=${page*6+i})`;\n        card.style.backgroundSize = 'cover';\n        gallery.appendChild(card);\n    }\n    page++;\n};\n\nwindow.addEventListener('scroll', () => {\n    if (window.innerHeight + window.scrollY >= document.documentElement.scrollHeight - 100) {\n        loadImages();\n    }\n});\n\nloadImages(); // Initial load\n</script>",
                "hint": "Use scroll event listener and check scroll position",
                "points": 10,
                "explanation": "Infinite scroll creates a seamless browsing experience by loading content as the user scrolls. The scroll event is used to detect when the user reaches the bottom of the page.",
                "key_points": "- Scroll events\n- Dynamic content loading\n- Grid layout\n- Image handling"
            },
            {
                "id": "wm40",
                "category": "web_development",
                "title": "K-tech Somali: Custom Select Menu",
                "description": "Create a custom-styled select dropdown with search functionality.",
                "answer": "<style>\n.custom-select {\n    position: relative;\n    width: 200px;\n}\n.select-button {\n    width: 100%;\n    padding: 10px;\n    background: white;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    cursor: pointer;\n}\n.options-container {\n    position: absolute;\n    top: 100%;\n    left: 0;\n    right: 0;\n    background: white;\n    border: 1px solid #ddd;\n    border-top: none;\n    border-radius: 0 0 4px 4px;\n    max-height: 200px;\n    overflow-y: auto;\n    display: none;\n}\n.search-box {\n    width: 100%;\n    padding: 8px;\n    border: none;\n    border-bottom: 1px solid #ddd;\n}\n.option {\n    padding: 8px;\n    cursor: pointer;\n}\n.option:hover {\n    background: #f0f0f0;\n}\n.custom-select.active .options-container {\n    display: block;\n}\n</style>\n<div class=\"custom-select\">\n    <div class=\"select-button\">Select an option</div>\n    <div class=\"options-container\">\n        <input type=\"text\" class=\"search-box\" placeholder=\"Search...\">\n        <div class=\"option\" data-value=\"1\">Option 1</div>\n        <div class=\"option\" data-value=\"2\">Option 2</div>\n        <div class=\"option\" data-value=\"3\">Option 3</div>\n    </div>\n</div>\n<script>\nconst select = document.querySelector('.custom-select');\nconst button = select.querySelector('.select-button');\nconst search = select.querySelector('.search-box');\nconst options = select.querySelectorAll('.option');\n\nbutton.addEventListener('click', () => select.classList.toggle('active'));\n\nsearch.addEventListener('input', (e) => {\n    const text = e.target.value.toLowerCase();\n    options.forEach(option => {\n        const matches = option.textContent.toLowerCase().includes(text);\n        option.style.display = matches ? 'block' : 'none';\n    });\n});\n\noptions.forEach(option => {\n    option.addEventListener('click', () => {\n        button.textContent = option.textContent;\n        select.classList.remove('active');\n    });\n});\n\ndocument.addEventListener('click', (e) => {\n    if (!select.contains(e.target)) {\n        select.classList.remove('active');\n    }\n});\n</script>",
                "hint": "Use absolute positioning and custom styling for dropdown",
                "points": 10,
                "explanation": "A custom select menu provides better control over styling and functionality. The search feature filters options based on user input.",
                "key_points": "- Custom form elements\n- Search functionality\n- Event delegation\n- Positioning"
            },
            {
                "id": "wm41",
                "category": "web_development",
                "title": "K-tech Somali: Drag and Drop List",
                "description": "Create a list where items can be reordered using drag and drop.",
                "answer": "<style>\n.sortable-list {\n    width: 300px;\n    padding: 0;\n    list-style: none;\n}\n.sortable-item {\n    padding: 15px;\n    background: white;\n    border: 1px solid #ddd;\n    margin-bottom: 5px;\n    border-radius: 4px;\n    cursor: move;\n    user-select: none;\n}\n.sortable-item.dragging {\n    opacity: 0.5;\n    background: #f8f9fa;\n}\n</style>\n<ul class=\"sortable-list\">\n    <li class=\"sortable-item\" draggable=\"true\">Item 1</li>\n    <li class=\"sortable-item\" draggable=\"true\">Item 2</li>\n    <li class=\"sortable-item\" draggable=\"true\">Item 3</li>\n</ul>\n<script>\nconst list = document.querySelector('.sortable-list');\nlet draggingItem = null;\n\nlist.addEventListener('dragstart', (e) => {\n    draggingItem = e.target;\n    e.target.classList.add('dragging');\n});\n\nlist.addEventListener('dragend', (e) => {\n    e.target.classList.remove('dragging');\n});\n\nlist.addEventListener('dragover', (e) => {\n    e.preventDefault();\n    const afterElement = getDragAfterElement(list, e.clientY);\n    const currentItem = document.querySelector('.dragging');\n    if (afterElement) {\n        list.insertBefore(currentItem, afterElement);\n    } else {\n        list.appendChild(currentItem);\n    }\n});\n\nfunction getDragAfterElement(container, y) {\n    const draggableElements = [...container.querySelectorAll('.sortable-item:not(.dragging)')];\n    return draggableElements.reduce((closest, child) => {\n        const box = child.getBoundingClientRect();\n        const offset = y - box.top - box.height / 2;\n        if (offset < 0 && offset > closest.offset) {\n            return { offset: offset, element: child };\n        } else {\n            return closest;\n        }\n    }, { offset: Number.NEGATIVE_INFINITY }).element;\n}\n</script>",
                "hint": "Use HTML5 drag and drop API with custom positioning logic",
                "points": 10,
                "explanation": "Drag and drop functionality is implemented using the HTML5 Drag and Drop API. The position calculation determines where to insert the dragged item.",
                "key_points": "- Drag and Drop API\n- Event handling\n- Position calculation\n- List manipulation"
            },
            {
                "id": "wm42",
                "category": "web_development",
                "title": "K-tech Somali: Multi-step Form",
                "description": "Create a form with multiple steps and progress indicator.",
                "answer": "<style>\n.form-container {\n    max-width: 400px;\n    margin: 0 auto;\n}\n.progress-bar {\n    display: flex;\n    margin-bottom: 20px;\n    justify-content: space-between;\n}\n.step {\n    width: 30px;\n    height: 30px;\n    border-radius: 50%;\n    background: #ddd;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: relative;\n}\n.step.active {\n    background: #3498db;\n    color: white;\n}\n.step.completed {\n    background: #2ecc71;\n    color: white;\n}\n.step-content {\n    display: none;\n}\n.step-content.active {\n    display: block;\n}\n.buttons {\n    margin-top: 20px;\n    display: flex;\n    justify-content: space-between;\n}\n</style>\n<div class=\"form-container\">\n    <div class=\"progress-bar\">\n        <div class=\"step active\">1</div>\n        <div class=\"step\">2</div>\n        <div class=\"step\">3</div>\n    </div>\n    <form id=\"multi-step-form\">\n        <div class=\"step-content active\">\n            <h3>Step 1</h3>\n            <input type=\"text\" placeholder=\"Name\" required>\n        </div>\n        <div class=\"step-content\">\n            <h3>Step 2</h3>\n            <input type=\"email\" placeholder=\"Email\" required>\n        </div>\n        <div class=\"step-content\">\n            <h3>Step 3</h3>\n            <input type=\"tel\" placeholder=\"Phone\" required>\n        </div>\n        <div class=\"buttons\">\n            <button type=\"button\" id=\"prev\" style=\"display: none;\">Previous</button>\n            <button type=\"button\" id=\"next\">Next</button>\n        </div>\n    </form>\n</div>\n<script>\nlet currentStep = 1;\nconst form = document.getElementById('multi-step-form');\nconst steps = document.querySelectorAll('.step');\nconst contents = document.querySelectorAll('.step-content');\nconst prevBtn = document.getElementById('prev');\nconst nextBtn = document.getElementById('next');\n\nfunction updateStep(step) {\n    steps.forEach((s, i) => {\n        s.classList.remove('active', 'completed');\n        if (i + 1 < step) s.classList.add('completed');\n        if (i + 1 === step) s.classList.add('active');\n    });\n    \n    contents.forEach((content, i) => {\n        content.classList.remove('active');\n        if (i + 1 === step) content.classList.add('active');\n    });\n    \n    prevBtn.style.display = step === 1 ? 'none' : 'block';\n    nextBtn.textContent = step === 3 ? 'Submit' : 'Next';\n}\n\nprevBtn.addEventListener('click', () => {\n    if (currentStep > 1) {\n        currentStep--;\n        updateStep(currentStep);\n    }\n});\n\nnextBtn.addEventListener('click', () => {\n    if (currentStep < 3) {\n        currentStep++;\n        updateStep(currentStep);\n    } else {\n        form.submit();\n    }\n});\n</script>",
                "hint": "Track current step and update UI accordingly",
                "points": 10,
                "explanation": "A multi-step form breaks down complex forms into manageable steps. The progress indicator shows the user's position in the form flow.",
                "key_points": "- Form navigation\n- Progress tracking\n- Step validation\n- UI state management"
            },
            {
                "id": "wm43",
                "category": "web_development",
                "title": "K-tech Somali: Custom Audio Player",
                "description": "Create a custom-styled audio player with play, pause, and progress bar.",
                "answer": "<style>\n.audio-player {\n    width: 300px;\n    padding: 20px;\n    background: #f8f9fa;\n    border-radius: 8px;\n}\n.controls {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    margin-bottom: 10px;\n}\n.play-btn {\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    border: none;\n    background: #3498db;\n    color: white;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n.progress {\n    flex: 1;\n    height: 4px;\n    background: #ddd;\n    border-radius: 2px;\n    cursor: pointer;\n    position: relative;\n}\n.progress-bar {\n    height: 100%;\n    background: #3498db;\n    border-radius: 2px;\n    width: 0%;\n}\n.time {\n    font-size: 12px;\n    color: #666;\n}\n</style>\n<div class=\"audio-player\">\n    <audio id=\"audio\" src=\"your-audio-file.mp3\"></audio>\n    <div class=\"controls\">\n        <button class=\"play-btn\" id=\"playBtn\">▶</button>\n        <div class=\"progress\" id=\"progress\">\n            <div class=\"progress-bar\" id=\"progressBar\"></div>\n        </div>\n        <span class=\"time\" id=\"time\">0:00</span>\n    </div>\n</div>\n<script>\nconst audio = document.getElementById('audio');\nconst playBtn = document.getElementById('playBtn');\nconst progress = document.getElementById('progress');\nconst progressBar = document.getElementById('progressBar');\nconst timeDisplay = document.getElementById('time');\n\nplayBtn.addEventListener('click', () => {\n    if (audio.paused) {\n        audio.play();\n        playBtn.textContent = '⏸';\n    } else {\n        audio.pause();\n        playBtn.textContent = '▶';\n    }\n});\n\nprogress.addEventListener('click', (e) => {\n    const rect = progress.getBoundingClientRect();\n    const percent = (e.clientX - rect.left) / rect.width;\n    audio.currentTime = percent * audio.duration;\n});\n\naudio.addEventListener('timeupdate', () => {\n    const percent = (audio.currentTime / audio.duration) * 100;\n    progressBar.style.width = percent + '%';\n    const minutes = Math.floor(audio.currentTime / 60);\n    const seconds = Math.floor(audio.currentTime % 60);\n    timeDisplay.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;\n});\n</script>",
                "hint": "Use HTML5 audio API and custom controls",
                "points": 10,
                "explanation": "A custom audio player provides better control over styling and functionality. The HTML5 Audio API handles playback while custom controls manage the user interface.",
                "key_points": "- Audio API\n- Custom controls\n- Progress tracking\n- Time formatting"
            },
            {
                "id": "wm44",
                "category": "web_development",
                "title": "K-tech Somali: Color Picker",
                "description": "Create a custom color picker with RGB sliders and live preview.",
                "answer": "<style>\n.color-picker {\n    width: 300px;\n    padding: 20px;\n    background: #f8f9fa;\n    border-radius: 8px;\n}\n.preview {\n    width: 100%;\n    height: 100px;\n    border-radius: 4px;\n    margin-bottom: 20px;\n}\n.slider-group {\n    margin-bottom: 10px;\n}\n.slider-label {\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: 5px;\n}\n.slider {\n    width: 100%;\n    -webkit-appearance: none;\n    height: 4px;\n    border-radius: 2px;\n    outline: none;\n}\n.slider::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    width: 16px;\n    height: 16px;\n    border-radius: 50%;\n    background: #3498db;\n    cursor: pointer;\n}\n.red { background: #ff000020; }\n.green { background: #00ff0020; }\n.blue { background: #0000ff20; }\n</style>\n<div class=\"color-picker\">\n    <div class=\"preview\" id=\"preview\"></div>\n    <div class=\"slider-group\">\n        <div class=\"slider-label\">\n            <span>Red</span>\n            <span id=\"redValue\">0</span>\n        </div>\n        <input type=\"range\" min=\"0\" max=\"255\" value=\"0\" class=\"slider red\" id=\"red\">\n    </div>\n    <div class=\"slider-group\">\n        <div class=\"slider-label\">\n            <span>Green</span>\n            <span id=\"greenValue\">0</span>\n        </div>\n        <input type=\"range\" min=\"0\" max=\"255\" value=\"0\" class=\"slider green\" id=\"green\">\n    </div>\n    <div class=\"slider-group\">\n        <div class=\"slider-label\">\n            <span>Blue</span>\n            <span id=\"blueValue\">0</span>\n        </div>\n        <input type=\"range\" min=\"0\" max=\"255\" value=\"0\" class=\"slider blue\" id=\"blue\">\n    </div>\n</div>\n<script>\nconst preview = document.getElementById('preview');\nconst sliders = {\n    red: document.getElementById('red'),\n    green: document.getElementById('green'),\n    blue: document.getElementById('blue')\n};\n\nfunction updateColor() {\n    const color = `rgb(${sliders.red.value}, ${sliders.green.value}, ${sliders.blue.value})`;\n    preview.style.background = color;\n    document.getElementById('redValue').textContent = sliders.red.value;\n    document.getElementById('greenValue').textContent = sliders.green.value;\n    document.getElementById('blueValue').textContent = sliders.blue.value;\n}\n\nObject.values(sliders).forEach(slider => {\n    slider.addEventListener('input', updateColor);\n});\n\nupdateColor();\n</script>",
                "hint": "Use range inputs and update preview in real-time",
                "points": 10,
                "explanation": "The color picker uses range inputs for RGB values and updates a preview in real-time. The sliders provide an intuitive way to mix colors.",
                "key_points": "- Range inputs\n- Color manipulation\n- Real-time updates\n- RGB color model"
            },
            {
                "id": "wm45",
                "category": "web_development",
                "title": "K-tech Somali: Password Strength Meter",
                "description": "Create a password input with a strength meter that updates as the user types.",
                "answer": "<style>\n.password-container {\n    width: 300px;\n}\n.password-input {\n    width: 100%;\n    padding: 10px;\n    margin-bottom: 10px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n}\n.strength-meter {\n    height: 4px;\n    background: #ddd;\n    border-radius: 2px;\n    margin-bottom: 10px;\n}\n.strength-bar {\n    height: 100%;\n    width: 0%;\n    border-radius: 2px;\n    transition: all 0.3s;\n}\n.feedback {\n    font-size: 12px;\n    margin-bottom: 10px;\n}\n.requirements {\n    font-size: 12px;\n    color: #666;\n}\n.requirement {\n    margin-bottom: 5px;\n}\n.requirement.met {\n    color: #2ecc71;\n}\n</style>\n<div class=\"password-container\">\n    <input type=\"password\" class=\"password-input\" id=\"password\" placeholder=\"Enter password\">\n    <div class=\"strength-meter\">\n        <div class=\"strength-bar\" id=\"strengthBar\"></div>\n    </div>\n    <div class=\"feedback\" id=\"feedback\">Password strength: None</div>\n    <div class=\"requirements\" id=\"requirements\">\n        <div class=\"requirement\" data-requirement=\"length\">At least 8 characters</div>\n        <div class=\"requirement\" data-requirement=\"capital\">At least 1 capital letter</div>\n        <div class=\"requirement\" data-requirement=\"number\">At least 1 number</div>\n        <div class=\"requirement\" data-requirement=\"special\">At least 1 special character</div>\n    </div>\n</div>\n<script>\nconst password = document.getElementById('password');\nconst strengthBar = document.getElementById('strengthBar');\nconst feedback = document.getElementById('feedback');\nconst requirements = document.querySelectorAll('.requirement');\n\nconst checks = {\n    length: (str) => str.length >= 8,\n    capital: (str) => /[A-Z]/.test(str),\n    number: (str) => /[0-9]/.test(str),\n    special: (str) => /[^A-Za-z0-9]/.test(str)\n};\n\npassword.addEventListener('input', (e) => {\n    const value = e.target.value;\n    let strength = 0;\n    let metRequirements = 0;\n    \n    requirements.forEach(req => {\n        const type = req.dataset.requirement;\n        const isValid = checks[type](value);\n        req.classList.toggle('met', isValid);\n        if (isValid) metRequirements++;\n    });\n    \n    strength = (metRequirements / 4) * 100;\n    strengthBar.style.width = strength + '%';\n    strengthBar.style.background = `hsl(${strength}, 70%, 45%)`;\n    \n    const strengthText = strength === 0 ? 'None' :\n                         strength <= 25 ? 'Weak' :\n                         strength <= 50 ? 'Fair' :\n                         strength <= 75 ? 'Good' : 'Strong';\n    \n    feedback.textContent = `Password strength: ${strengthText}`;\n});\n</script>",
                "hint": "Check password against multiple criteria and update UI",
                "points": 10,
                "explanation": "The password strength meter evaluates the password against multiple criteria and provides real-time feedback. The color-coded meter gives a visual indication of strength.",
                "key_points": "- Password validation\n- Real-time feedback\n- Visual indicators\n- Security criteria"
            },
            {
                "id": "wm46",
                "category": "web_development",
                "title": "K-tech Somali: Custom Video Controls",
                "description": "Create custom video controls with play/pause, volume, and fullscreen buttons.",
                "answer": "<style>\n.video-container {\n    width: 640px;\n    position: relative;\n    background: black;\n}\n.video-container video {\n    width: 100%;\n}\n.controls {\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    background: rgba(0,0,0,0.7);\n    padding: 10px;\n    display: flex;\n    align-items: center;\n    gap: 10px;\n}\n.control-btn {\n    background: none;\n    border: none;\n    color: white;\n    cursor: pointer;\n    padding: 5px;\n}\n.progress {\n    flex: 1;\n    height: 4px;\n    background: rgba(255,255,255,0.3);\n    cursor: pointer;\n    position: relative;\n}\n.progress-bar {\n    height: 100%;\n    background: #3498db;\n    width: 0%;\n}\n.volume-control {\n    display: flex;\n    align-items: center;\n    gap: 5px;\n}\n.volume-slider {\n    width: 60px;\n    height: 4px;\n    -webkit-appearance: none;\n    background: rgba(255,255,255,0.3);\n}\n.volume-slider::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    width: 12px;\n    height: 12px;\n    background: white;\n    border-radius: 50%;\n    cursor: pointer;\n}\n</style>\n<div class=\"video-container\">\n    <video id=\"video\" src=\"your-video.mp4\"></video>\n    <div class=\"controls\">\n        <button class=\"control-btn\" id=\"playBtn\">▶</button>\n        <div class=\"progress\" id=\"progress\">\n            <div class=\"progress-bar\" id=\"progressBar\"></div>\n        </div>\n        <div class=\"volume-control\">\n            <button class=\"control-btn\" id=\"muteBtn\">🔊</button>\n            <input type=\"range\" class=\"volume-slider\" id=\"volume\" min=\"0\" max=\"1\" step=\"0.1\" value=\"1\">\n        </div>\n        <button class=\"control-btn\" id=\"fullscreenBtn\">⛶</button>\n    </div>\n</div>\n<script>\nconst video = document.getElementById('video');\nconst playBtn = document.getElementById('playBtn');\nconst muteBtn = document.getElementById('muteBtn');\nconst volumeSlider = document.getElementById('volume');\nconst progress = document.getElementById('progress');\nconst progressBar = document.getElementById('progressBar');\nconst fullscreenBtn = document.getElementById('fullscreenBtn');\n\nplayBtn.addEventListener('click', () => {\n    if (video.paused) {\n        video.play();\n        playBtn.textContent = '⏸';\n    } else {\n        video.pause();\n        playBtn.textContent = '▶';\n    }\n});\n\nmuteBtn.addEventListener('click', () => {\n    video.muted = !video.muted;\n    muteBtn.textContent = video.muted ? '🔇' : '🔊';\n});\n\nvolumeSlider.addEventListener('input', (e) => {\n    video.volume = e.target.value;\n    if (video.volume === 0) {\n        muteBtn.textContent = '🔇';\n    } else {\n        muteBtn.textContent = '🔊';\n    }\n});\n\nprogress.addEventListener('click', (e) => {\n    const rect = progress.getBoundingClientRect();\n    const pos = (e.clientX - rect.left) / rect.width;\n    video.currentTime = pos * video.duration;\n});\n\nvideo.addEventListener('timeupdate', () => {\n    const progress = (video.currentTime / video.duration) * 100;\n    progressBar.style.width = progress + '%';\n});\n\nfullscreenBtn.addEventListener('click', () => {\n    if (document.fullscreenElement) {\n        document.exitFullscreen();\n    } else {\n        video.requestFullscreen();\n    }\n});\n</script>",
                "hint": "Use HTML5 video API and custom UI elements",
                "points": 10,
                "explanation": "Custom video controls provide better styling control and functionality. The HTML5 Video API handles playback while custom controls manage the user interface.",
                "key_points": "- Video API\n- Custom controls\n- Progress tracking\n- Fullscreen API"
            },
            {
                "id": "wm47",
                "category": "web_development",
                "title": "K-tech Somali: Dynamic Form Fields",
                "description": "Create a form where users can dynamically add and remove input fields.",
                "answer": "<style>\n.form-container {\n    width: 400px;\n    padding: 20px;\n}\n.field-group {\n    display: flex;\n    gap: 10px;\n    margin-bottom: 10px;\n}\n.field-input {\n    flex: 1;\n    padding: 8px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n}\n.remove-btn {\n    background: #e74c3c;\n    color: white;\n    border: none;\n    padding: 0 10px;\n    border-radius: 4px;\n    cursor: pointer;\n}\n.add-btn {\n    background: #3498db;\n    color: white;\n    border: none;\n    padding: 8px 16px;\n    border-radius: 4px;\n    cursor: pointer;\n    margin-top: 10px;\n}\n</style>\n<div class=\"form-container\">\n    <form id=\"dynamicForm\">\n        <div id=\"fieldsContainer\">\n            <div class=\"field-group\">\n                <input type=\"text\" class=\"field-input\" placeholder=\"Enter value\">\n                <button type=\"button\" class=\"remove-btn\" onclick=\"removeField(this)\">×</button>\n            </div>\n        </div>\n        <button type=\"button\" class=\"add-btn\" onclick=\"addField()\">Add Field</button>\n    </form>\n</div>\n<script>\nfunction addField() {\n    const container = document.getElementById('fieldsContainer');\n    const fieldGroup = document.createElement('div');\n    fieldGroup.className = 'field-group';\n    fieldGroup.innerHTML = `\n        <input type=\"text\" class=\"field-input\" placeholder=\"Enter value\">\n        <button type=\"button\" class=\"remove-btn\" onclick=\"removeField(this)\">×</button>\n    `;\n    container.appendChild(fieldGroup);\n}\n\nfunction removeField(button) {\n    const fieldGroup = button.parentElement;\n    const container = fieldGroup.parentElement;\n    if (container.children.length > 1) {\n        container.removeChild(fieldGroup);\n    }\n}\n</script>",
                "hint": "Use DOM manipulation to add and remove form fields",
                "points": 10,
                "explanation": "Dynamic form fields allow users to add or remove input fields as needed. This is useful for collecting variable amounts of data.",
                "key_points": "- DOM manipulation\n- Event handling\n- Form management\n- Dynamic UI"
            },
            {
                "id": "wm48",
                "category": "web_development",
                "title": "K-tech Somali: Image Comparison Slider",
                "description": "Create a slider that reveals a before/after comparison of two images.",
                "answer": "<style>\n.comparison-slider {\n    position: relative;\n    width: 600px;\n    height: 400px;\n    overflow: hidden;\n}\n.image-container {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n.before-image,\n.after-image {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n}\n.after-container {\n    width: 50%;\n    overflow: hidden;\n}\n.slider {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 50%;\n    width: 4px;\n    background: white;\n    cursor: col-resize;\n    transform: translateX(-50%);\n}\n.slider-handle {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 40px;\n    height: 40px;\n    background: white;\n    border-radius: 50%;\n    transform: translate(-50%, -50%);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n.slider-arrows {\n    color: #333;\n    font-size: 20px;\n}\n</style>\n<div class=\"comparison-slider\" id=\"slider\">\n    <div class=\"image-container\">\n        <img src=\"before.jpg\" class=\"before-image\" alt=\"Before\">\n    </div>\n    <div class=\"image-container after-container\" id=\"afterContainer\">\n        <img src=\"after.jpg\" class=\"after-image\" alt=\"After\">\n    </div>\n    <div class=\"slider\" id=\"sliderBar\">\n        <div class=\"slider-handle\">\n            <span class=\"slider-arrows\">⇄</span>\n        </div>\n    </div>\n</div>\n<script>\nconst slider = document.getElementById('slider');\nconst sliderBar = document.getElementById('sliderBar');\nconst afterContainer = document.getElementById('afterContainer');\nlet isDragging = false;\n\nfunction updateSliderPosition(x) {\n    const rect = slider.getBoundingClientRect();\n    const position = Math.max(0, Math.min(100, ((x - rect.left) / rect.width) * 100));\n    afterContainer.style.width = `${position}%`;\n    sliderBar.style.left = `${position}%`;\n}\n\nsliderBar.addEventListener('mousedown', () => isDragging = true);\ndocument.addEventListener('mousemove', (e) => {\n    if (!isDragging) return;\n    updateSliderPosition(e.clientX);\n});\ndocument.addEventListener('mouseup', () => isDragging = false);\n\n// Touch events\nsliderBar.addEventListener('touchstart', () => isDragging = true);\ndocument.addEventListener('touchmove', (e) => {\n    if (!isDragging) return;\n    updateSliderPosition(e.touches[0].clientX);\n});\ndocument.addEventListener('touchend', () => isDragging = false);\n</script>",
                "hint": "Use mouse/touch events to control the slider position",
                "points": 10,
                "explanation": "The image comparison slider allows users to compare two images by dragging a slider. The slider reveals or hides portions of each image.",
                "key_points": "- Mouse/touch events\n- Image manipulation\n- Position calculation\n- Responsive design"
            },
            {
                "id": "wm49",
                "category": "web_development",
                "title": "K-tech Somali: Carousel with Thumbnails",
                "description": "Create an image carousel with thumbnail navigation.",
                "answer": "<style>\n.carousel {\n    width: 600px;\n    position: relative;\n}\n.main-image {\n    width: 100%;\n    height: 400px;\n    margin-bottom: 20px;\n}\n.main-image img {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n}\n.thumbnails {\n    display: flex;\n    gap: 10px;\n    overflow-x: auto;\n    padding-bottom: 10px;\n}\n.thumbnail {\n    width: 80px;\n    height: 60px;\n    cursor: pointer;\n    opacity: 0.6;\n    transition: opacity 0.3s;\n}\n.thumbnail img {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n}\n.thumbnail.active {\n    opacity: 1;\n    border: 2px solid #3498db;\n}\n.nav-btn {\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n    background: rgba(0,0,0,0.5);\n    color: white;\n    border: none;\n    padding: 10px 15px;\n    cursor: pointer;\n}\n.prev-btn { left: 10px; }\n.next-btn { right: 10px; }\n</style>\n<div class=\"carousel\">\n    <div class=\"main-image\">\n        <img src=\"image1.jpg\" id=\"mainImage\" alt=\"Main image\">\n        <button class=\"nav-btn prev-btn\" onclick=\"navigate(-1)\">❮</button>\n        <button class=\"nav-btn next-btn\" onclick=\"navigate(1)\">❯</button>\n    </div>\n    <div class=\"thumbnails\" id=\"thumbnails\">\n        <div class=\"thumbnail active\" onclick=\"setImage(0)\">\n            <img src=\"image1.jpg\" alt=\"Thumbnail 1\">\n        </div>\n        <div class=\"thumbnail\" onclick=\"setImage(1)\">\n            <img src=\"image2.jpg\" alt=\"Thumbnail 2\">\n        </div>\n        <div class=\"thumbnail\" onclick=\"setImage(2)\">\n            <img src=\"image3.jpg\" alt=\"Thumbnail 3\">\n        </div>\n        <div class=\"thumbnail\" onclick=\"setImage(3)\">\n            <img src=\"image4.jpg\" alt=\"Thumbnail 4\">\n        </div>\n    </div>\n</div>\n<script>\nconst images = [\n    'image1.jpg',\n    'image2.jpg',\n    'image3.jpg',\n    'image4.jpg'\n];\nlet currentIndex = 0;\n\nfunction setImage(index) {\n    const mainImage = document.getElementById('mainImage');\n    const thumbnails = document.querySelectorAll('.thumbnail');\n    \n    currentIndex = index;\n    mainImage.src = images[index];\n    \n    thumbnails.forEach((thumb, i) => {\n        thumb.classList.toggle('active', i === index);\n    });\n}\n\nfunction navigate(direction) {\n    const newIndex = (currentIndex + direction + images.length) % images.length;\n    setImage(newIndex);\n}\n\n// Optional: Auto-advance\nsetInterval(() => navigate(1), 5000);\n</script>",
                "hint": "Use array of images and track current index",
                "points": 10,
                "explanation": "The carousel with thumbnails allows users to navigate through images using either thumbnail clicks or navigation buttons. The active thumbnail is highlighted.",
                "key_points": "- Image navigation\n- Thumbnail preview\n- Auto-advance\n- Active state management"
            },
            {
                "id": "wm50",
                "category": "web_development",
                "title": "K-tech Somali: Accordion Menu",
                "description": "Create an accordion menu with smooth animations.",
                "answer": "<style>\n.accordion {\n    width: 400px;\n}\n.accordion-item {\n    border: 1px solid #ddd;\n    margin-bottom: -1px;\n}\n.accordion-header {\n    padding: 15px;\n    background: #f8f9fa;\n    cursor: pointer;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n.accordion-header:hover {\n    background: #e9ecef;\n}\n.accordion-content {\n    max-height: 0;\n    overflow: hidden;\n    transition: max-height 0.3s ease-out;\n    background: white;\n}\n.accordion-content-inner {\n    padding: 15px;\n}\n.accordion-icon {\n    transition: transform 0.3s;\n}\n.accordion-item.active .accordion-icon {\n    transform: rotate(180deg);\n}\n.accordion-item.active .accordion-content {\n    max-height: 200px;\n}\n</style>\n<div class=\"accordion\">\n    <div class=\"accordion-item\">\n        <div class=\"accordion-header\" onclick=\"toggleAccordion(this)\">\n            <span>Section 1</span>\n            <span class=\"accordion-icon\">▼</span>\n        </div>\n        <div class=\"accordion-content\">\n            <div class=\"accordion-content-inner\">\n                Content for section 1\n            </div>\n        </div>\n    </div>\n    <div class=\"accordion-item\">\n        <div class=\"accordion-header\" onclick=\"toggleAccordion(this)\">\n            <span>Section 2</span>\n            <span class=\"accordion-icon\">▼</span>\n        </div>\n        <div class=\"accordion-content\">\n            <div class=\"accordion-content-inner\">\n                Content for section 2\n            </div>\n        </div>\n    </div>\n    <div class=\"accordion-item\">\n        <div class=\"accordion-header\" onclick=\"toggleAccordion(this)\">\n            <span>Section 3</span>\n            <span class=\"accordion-icon\">▼</span>\n        </div>\n        <div class=\"accordion-content\">\n            <div class=\"accordion-content-inner\">\n                Content for section 3\n            </div>\n        </div>\n    </div>\n</div>\n<script>\nfunction toggleAccordion(header) {\n    const item = header.parentElement;\n    const isActive = item.classList.contains('active');\n    \n    // Close all items\n    document.querySelectorAll('.accordion-item').forEach(item => {\n        item.classList.remove('active');\n    });\n    \n    // Open clicked item if it wasn't active\n    if (!isActive) {\n        item.classList.add('active');\n    }\n}\n</script>",
                "hint": "Use max-height transition for smooth animation",
                "points": 10,
                "explanation": "The accordion menu uses CSS transitions for smooth animations when expanding/collapsing sections. Only one section can be open at a time.",
                "key_points": "- CSS transitions\n- Height animation\n- Event delegation\n- State management"
            }
            
        ],
        "hard": [
            {
                "id": "wh1",
                "category": "web_development",
                "title": "K-tech Somali: Advanced Animation Library",
                "description": "Create a reusable animation library with 5 complex animations (fade-slide, bounce, shake, flip, and zoom) using CSS keyframes.",
                "answer": "<style>\n@keyframes fadeSlide {\n    0% { opacity: 0; transform: translateY(50px); }\n    100% { opacity: 1; transform: translateY(0); }\n}\n\n@keyframes bounce {\n    0%, 20%, 50%, 80%, 100% { transform: translateY(0); }\n    40% { transform: translateY(-30px); }\n    60% { transform: translateY(-15px); }\n}\n\n@keyframes shake {\n    0%, 100% { transform: translateX(0); }\n    10%, 30%, 50%, 70%, 90% { transform: translateX(-10px); }\n    20%, 40%, 60%, 80% { transform: translateX(10px); }\n}\n\n@keyframes flip {\n    0% { transform: perspective(400px) rotateY(0); }\n    100% { transform: perspective(400px) rotateY(360deg); }\n}\n\n@keyframes zoom {\n    0% { transform: scale(0); }\n    50% { transform: scale(1.2); }\n    100% { transform: scale(1); }\n}\n\n.fade-slide { animation: fadeSlide 1s ease-out; }\n.bounce { animation: bounce 1s ease infinite; }\n.shake { animation: shake 0.5s ease infinite; }\n.flip { animation: flip 1s ease; }\n.zoom { animation: zoom 0.5s ease; }</style>",
                "hint": "Use transform and opacity properties with different timing functions",
                "points": 15,
                "explanation": "Complex animations combine multiple properties and keyframe steps to create engaging visual effects.",
                "key_points": "- Keyframe animations\n- Transform properties\n- Timing functions\n- Reusable classes"
            },
            {
                "id": "wh2",
                "category": "web_development",
                "title": "K-tech Somali: Responsive Dashboard Layout",
                "description": "Create a responsive dashboard layout with a sidebar, header, and main content area that adapts to mobile devices using CSS Grid and Flexbox.",
                "answer": "<style>\n.dashboard {\n    display: grid;\n    grid-template-areas:\n        'sidebar header'\n        'sidebar main';\n    grid-template-columns: 250px 1fr;\n    grid-template-rows: auto 1fr;\n    min-height: 100vh;\n}\n\n.header {\n    grid-area: header;\n    padding: 1rem;\n    background: #fff;\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n.sidebar {\n    grid-area: sidebar;\n    background: #2c3e50;\n    color: white;\n    padding: 1rem;\n}\n\n.main {\n    grid-area: main;\n    padding: 1rem;\n}\n\n@media (max-width: 768px) {\n    .dashboard {\n        grid-template-areas:\n            'header'\n            'main';\n        grid-template-columns: 1fr;\n    }\n    \n    .sidebar {\n        position: fixed;\n        left: -250px;\n        top: 0;\n        bottom: 0;\n        transition: 0.3s;\n    }\n    \n    .sidebar.active {\n        left: 0;\n    }\n}</style>",
                "hint": "Use CSS Grid areas for layout and media queries for responsiveness",
                "points": 15,
                "explanation": "Dashboard layouts require careful consideration of space utilization and responsive behavior.",
                "key_points": "- Grid layout\n- Responsive design\n- Mobile navigation\n- Layout areas"
            },
            {
                "id": "wh3",
                "category": "web_development",
                "title": "K-tech Somali: Custom Form Framework",
                "description": "Create a custom form framework with styled inputs, validation, and error messages using CSS custom properties and HTML5 validation.",
                "answer": "<style>\n:root {\n    --primary-color: #3498db;\n    --error-color: #e74c3c;\n    --success-color: #2ecc71;\n    --input-padding: 12px;\n    --border-radius: 4px;\n}\n\n.form-group {\n    margin-bottom: 1rem;\n}\n\n.form-control {\n    width: 100%;\n    padding: var(--input-padding);\n    border: 2px solid #ddd;\n    border-radius: var(--border-radius);\n    transition: border-color 0.3s;\n}\n\n.form-control:focus {\n    outline: none;\n    border-color: var(--primary-color);\n}\n\n.form-control:invalid {\n    border-color: var(--error-color);\n}\n\n.error-message {\n    color: var(--error-color);\n    font-size: 0.875rem;\n    margin-top: 0.5rem;\n    display: none;\n}\n\n.form-control:invalid + .error-message {\n    display: block;\n}</style>\n\n<form class=\"custom-form\" novalidate>\n    <div class=\"form-group\">\n        <input type=\"email\" class=\"form-control\" required pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$\">\n        <div class=\"error-message\">Please enter a valid email address</div>\n    </div>\n</form>",
                "hint": "Use CSS custom properties for consistent styling and HTML5 validation attributes",
                "points": 15,
                "explanation": "Custom form frameworks provide consistent styling and validation across forms while maintaining flexibility.",
                "key_points": "- Custom properties\n- Form validation\n- Error handling\n- Reusable styles"
            },
            {
                "id": "wh4",
                "category": "web_development",
                "title": "K-tech Somali: Virtual Scroll Implementation",
                "description": "Implement a virtual scroll component that efficiently renders large lists by only showing visible items.",
                "answer": "<style>\n.virtual-scroll {\n    height: 400px;\n    overflow-y: auto;\n    position: relative;\n}\n\n.scroll-content {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n}\n\n.list-item {\n    height: 50px;\n    padding: 10px;\n    border-bottom: 1px solid #ddd;\n}</style>\n\n<div class=\"virtual-scroll\" id=\"virtualScroll\">\n    <div class=\"scroll-content\" id=\"scrollContent\"></div>\n</div>\n\n<script>\nclass VirtualScroll {\n    constructor(container, itemHeight, totalItems) {\n        this.container = container;\n        this.itemHeight = itemHeight;\n        this.totalItems = totalItems;\n        this.visibleItems = Math.ceil(container.clientHeight / itemHeight);\n        this.scrollContent = container.querySelector('.scroll-content');\n        this.scrollContent.style.height = `${totalItems * itemHeight}px`;\n        \n        this.container.addEventListener('scroll', () => this.onScroll());\n        this.renderItems();\n    }\n    \n    onScroll() {\n        const scrollTop = this.container.scrollTop;\n        const startIndex = Math.floor(scrollTop / this.itemHeight);\n        this.renderItems(startIndex);\n    }\n    \n    renderItems(startIndex = 0) {\n        const items = [];\n        for (let i = startIndex; i < startIndex + this.visibleItems + 2; i++) {\n            if (i >= this.totalItems) break;\n            items.push(`<div class=\"list-item\" style=\"transform: translateY(${i * this.itemHeight}px)\">\n                Item ${i + 1}\n            </div>`);\n        }\n        this.scrollContent.innerHTML = items.join('');\n    }\n}\n\nnew VirtualScroll(\n    document.getElementById('virtualScroll'),\n    50,\n    10000\n);</script>",
                "hint": "Calculate visible items based on scroll position and container height",
                "points": 15,
                "explanation": "Virtual scrolling improves performance by only rendering visible items in large lists.",
                "key_points": "- Scroll optimization\n- DOM recycling\n- Performance\n- Event handling"
            },
            {
                "id": "wh5",
                "category": "web_development",
                "title": "K-tech Somali: CSS Grid Framework",
                "description": "Create a responsive CSS grid framework with support for nested grids, offsets, and auto-sizing columns.",
                "answer": "<style>\n:root {\n    --grid-columns: 12;\n    --grid-gap: 20px;\n}\n\n.grid {\n    display: grid;\n    gap: var(--grid-gap);\n    width: 100%;\n}\n\n.grid-auto {\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n}\n\n@media (min-width: 768px) {\n    .grid-1 { grid-template-columns: repeat(1, 1fr); }\n    .grid-2 { grid-template-columns: repeat(2, 1fr); }\n    .grid-3 { grid-template-columns: repeat(3, 1fr); }\n    .grid-4 { grid-template-columns: repeat(4, 1fr); }\n    .grid-5 { grid-template-columns: repeat(5, 1fr); }\n    .grid-6 { grid-template-columns: repeat(6, 1fr); }\n    \n    .offset-1 { grid-column-start: 2; }\n    .offset-2 { grid-column-start: 3; }\n    .offset-3 { grid-column-start: 4; }\n    \n    .span-2 { grid-column: span 2; }\n    .span-3 { grid-column: span 3; }\n    .span-4 { grid-column: span 4; }\n}</style>",
                "hint": "Use CSS Grid with custom properties and media queries",
                "points": 15,
                "explanation": "Grid frameworks provide a foundation for creating complex layouts with minimal code.",
                "key_points": "- Grid system\n- Responsive columns\n- Nested grids\n- Column spans"
            },
            {
                "id": "wh6",
                "category": "web_development",
                "title": "K-tech Somali: Custom Modal System",
                "description": "Create a reusable modal system with animations, stacking support, and accessibility features.",
                "answer": "<style>\n.modal-overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(0,0,0,0.5);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    opacity: 0;\n    visibility: hidden;\n    transition: 0.3s;\n}\n\n.modal-overlay.active {\n    opacity: 1;\n    visibility: visible;\n}\n\n.modal {\n    background: white;\n    padding: 20px;\n    border-radius: 8px;\n    max-width: 500px;\n    width: 90%;\n    transform: translateY(-20px);\n    transition: 0.3s;\n}\n\n.modal-overlay.active .modal {\n    transform: translateY(0);\n}\n\n.modal-stack {\n    z-index: 1000;\n}</style>\n\n<script>\nclass ModalSystem {\n    constructor() {\n        this.modals = new Set();\n        this.zIndex = 1000;\n    }\n    \n    create(content) {\n        const overlay = document.createElement('div');\n        overlay.className = 'modal-overlay';\n        overlay.innerHTML = `\n            <div class=\"modal\" role=\"dialog\" aria-modal=\"true\">\n                <button class=\"modal-close\" aria-label=\"Close modal\">×</button>\n                ${content}\n            </div>\n        `;\n        \n        document.body.appendChild(overlay);\n        this.setupModal(overlay);\n        return overlay;\n    }\n    \n    setupModal(overlay) {\n        const modal = overlay.querySelector('.modal');\n        const closeBtn = modal.querySelector('.modal-close');\n        \n        closeBtn.addEventListener('click', () => this.close(overlay));\n        overlay.addEventListener('click', (e) => {\n            if (e.target === overlay) this.close(overlay);\n        });\n        \n        this.modals.add(overlay);\n        this.updateStack();\n    }\n    \n    show(overlay) {\n        requestAnimationFrame(() => overlay.classList.add('active'));\n    }\n    \n    close(overlay) {\n        overlay.classList.remove('active');\n        overlay.addEventListener('transitionend', () => {\n            overlay.remove();\n            this.modals.delete(overlay);\n        });\n    }\n    \n    updateStack() {\n        Array.from(this.modals).forEach((modal, index) => {\n            modal.style.zIndex = this.zIndex + index;\n        });\n    }\n}</script>",
                "hint": "Use z-index management and ARIA attributes for accessibility",
                "points": 15,
                "explanation": "Modal systems need to handle multiple instances, animations, and accessibility concerns.",
                "key_points": "- Modal stacking\n- Accessibility\n- Animations\n- Event handling"
            },
            {
                "id": "wh7",
                "category": "web_development",
                "title": "K-tech Somali: Drag and Drop File Upload",
                "description": "Create a drag and drop file upload component with preview, progress, and multiple file support.",
                "answer": "<style>\n.upload-zone {\n    border: 2px dashed #ccc;\n    padding: 20px;\n    text-align: center;\n    transition: 0.3s;\n}\n\n.upload-zone.dragover {\n    border-color: #3498db;\n    background: rgba(52,152,219,0.1);\n}\n\n.preview-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\n    gap: 10px;\n    margin-top: 20px;\n}\n\n.preview-item {\n    position: relative;\n    padding-top: 100%;\n}\n\n.preview-item img {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n    border-radius: 4px;\n}\n\n.progress-bar {\n    height: 4px;\n    background: #eee;\n    margin-top: 10px;\n    border-radius: 2px;\n    overflow: hidden;\n}\n\n.progress-fill {\n    height: 100%;\n    background: #3498db;\n    width: 0;\n    transition: width 0.3s;\n}</style>\n\n<div class=\"upload-zone\" id=\"uploadZone\">\n    <div>Drag files here or click to upload</div>\n    <input type=\"file\" multiple style=\"display: none\">\n    <div class=\"preview-grid\"></div>\n</div>\n\n<script>\nclass FileUpload {\n    constructor(element) {\n        this.element = element;\n        this.input = element.querySelector('input');\n        this.previewGrid = element.querySelector('.preview-grid');\n        \n        this.setupListeners();\n    }\n    \n    setupListeners() {\n        this.element.addEventListener('dragover', (e) => {\n            e.preventDefault();\n            this.element.classList.add('dragover');\n        });\n        \n        this.element.addEventListener('dragleave', () => {\n            this.element.classList.remove('dragover');\n        });\n        \n        this.element.addEventListener('drop', (e) => {\n            e.preventDefault();\n            this.element.classList.remove('dragover');\n            this.handleFiles(e.dataTransfer.files);\n        });\n        \n        this.element.addEventListener('click', () => this.input.click());\n        this.input.addEventListener('change', () => this.handleFiles(this.input.files));\n    }\n    \n    handleFiles(files) {\n        Array.from(files).forEach(file => {\n            if (file.type.startsWith('image/')) {\n                this.createPreview(file);\n                this.uploadFile(file);\n            }\n        });\n    }\n    \n    createPreview(file) {\n        const reader = new FileReader();\n        const preview = document.createElement('div');\n        preview.className = 'preview-item';\n        \n        reader.onload = (e) => {\n            preview.innerHTML = `\n                <img src=\"${e.target.result}\" alt=\"Preview\">\n                <div class=\"progress-bar\">\n                    <div class=\"progress-fill\"></div>\n                </div>\n            `;\n        };\n        \n        reader.readAsDataURL(file);\n        this.previewGrid.appendChild(preview);\n        return preview;\n    }\n    \n    uploadFile(file) {\n        // Simulate file upload with progress\n        let progress = 0;\n        const interval = setInterval(() => {\n            progress += 10;\n            if (progress <= 100) {\n                this.updateProgress(file.name, progress);\n            } else {\n                clearInterval(interval);\n            }\n        }, 500);\n    }\n    \n    updateProgress(fileName, progress) {\n        const preview = this.previewGrid.lastElementChild;\n        const progressFill = preview.querySelector('.progress-fill');\n        progressFill.style.width = `${progress}%`;\n    }\n}\n\nnew FileUpload(document.getElementById('uploadZone'));</script>",
                "hint": "Use FileReader API and custom progress tracking",
                "points": 15,
                "explanation": "File upload components need to handle drag and drop events, file preview, and upload progress.",
                "key_points": "- Drag and drop\n- File preview\n- Progress tracking\n- Multiple files"
            },
            {
                "id": "wh8",
                "category": "web_development",
                "title": "K-tech Somali: Custom Video Player",
                "description": "Create a custom video player with controls, progress bar, and keyboard shortcuts.",
                "answer": "<style>\n.video-player {\n    position: relative;\n    max-width: 800px;\n    margin: 0 auto;\n}\n\n.video-container {\n    width: 100%;\n    background: black;\n}\n\n.video-controls {\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    background: rgba(0,0,0,0.7);\n    padding: 10px;\n    display: flex;\n    align-items: center;\n    gap: 10px;\n}\n\n.progress-bar {\n    flex: 1;\n    height: 4px;\n    background: rgba(255,255,255,0.3);\n    cursor: pointer;\n    position: relative;\n}\n\n.progress-fill {\n    height: 100%;\n    background: #3498db;\n    width: 0;\n}\n\n.control-button {\n    background: none;\n    border: none;\n    color: white;\n    cursor: pointer;\n    padding: 5px;\n}</style>\n\n<div class=\"video-player\">\n    <video class=\"video-container\">\n        <source src=\"video.mp4\" type=\"video/mp4\">\n    </video>\n    <div class=\"video-controls\">\n        <button class=\"control-button play-pause\">▶</button>\n        <div class=\"progress-bar\">\n            <div class=\"progress-fill\"></div>\n        </div>\n        <button class=\"control-button mute\">🔊</button>\n        <button class=\"control-button fullscreen\">⛶</button>\n    </div>\n</div>\n\n<script>\nclass VideoPlayer {\n    constructor(container) {\n        this.container = container;\n        this.video = container.querySelector('video');\n        this.controls = container.querySelector('.video-controls');\n        this.progressBar = container.querySelector('.progress-bar');\n        this.progressFill = container.querySelector('.progress-fill');\n        this.playPauseBtn = container.querySelector('.play-pause');\n        this.muteBtn = container.querySelector('.mute');\n        this.fullscreenBtn = container.querySelector('.fullscreen');\n        \n        this.setupListeners();\n    }\n    \n    setupListeners() {\n        this.playPauseBtn.addEventListener('click', () => this.togglePlay());\n        this.muteBtn.addEventListener('click', () => this.toggleMute());\n        this.fullscreenBtn.addEventListener('click', () => this.toggleFullscreen());\n        \n        this.video.addEventListener('timeupdate', () => this.updateProgress());\n        this.progressBar.addEventListener('click', (e) => this.seek(e));\n        \n        document.addEventListener('keydown', (e) => {\n            if (e.code === 'Space') this.togglePlay();\n            if (e.code === 'ArrowLeft') this.skip(-10);\n            if (e.code === 'ArrowRight') this.skip(10);\n            if (e.code === 'KeyM') this.toggleMute();\n        });\n    }\n    \n    togglePlay() {\n        if (this.video.paused) {\n            this.video.play();\n            this.playPauseBtn.textContent = '⏸';\n        } else {\n            this.video.pause();\n            this.playPauseBtn.textContent = '▶';\n        }\n    }\n    \n    toggleMute() {\n        this.video.muted = !this.video.muted;\n        this.muteBtn.textContent = this.video.muted ? '🔇' : '🔊';\n    }\n    \n    toggleFullscreen() {\n        if (document.fullscreenElement) {\n            document.exitFullscreen();\n        } else {\n            this.container.requestFullscreen();\n        }\n    }\n    \n    updateProgress() {\n        const progress = (this.video.currentTime / this.video.duration) * 100;\n        this.progressFill.style.width = `${progress}%`;\n    }\n    \n    seek(e) {\n        const rect = this.progressBar.getBoundingClientRect();\n        const pos = (e.clientX - rect.left) / rect.width;\n        this.video.currentTime = pos * this.video.duration;\n    }\n    \n    skip(seconds) {\n        this.video.currentTime += seconds;\n    }\n}\n\nnew VideoPlayer(document.querySelector('.video-player'));</script>",
                "hint": "Use video element events and custom controls",
                "points": 15,
                "explanation": "Custom video players provide better control over functionality and appearance than native players.",
                "key_points": "- Video controls\n- Progress tracking\n- Keyboard shortcuts\n- Fullscreen support"
            },
            {
                "id": "wh9",
                "category": "web_development",
                "title": "K-tech Somali: Infinite Scroll Grid",
                "description": "Create an infinite scroll grid with masonry layout and lazy loading images.",
                "answer": "<style>\n.masonry-grid {\n    columns: 3 300px;\n    column-gap: 20px;\n    padding: 20px;\n}\n\n.grid-item {\n    break-inside: avoid;\n    margin-bottom: 20px;\n    position: relative;\n}\n\n.grid-item img {\n    width: 100%;\n    height: auto;\n    display: block;\n    border-radius: 8px;\n    opacity: 0;\n    transition: opacity 0.3s;\n}\n\n.grid-item img.loaded {\n    opacity: 1;\n}\n\n.loading {\n    text-align: center;\n    padding: 20px;\n}</style>\n\n<div class=\"masonry-grid\" id=\"grid\"></div>\n<div class=\"loading\" id=\"loading\">Loading...</div>\n\n<script>\nclass InfiniteGrid {\n    constructor() {\n        this.page = 1;\n        this.loading = false;\n        this.grid = document.getElementById('grid');\n        this.loadingEl = document.getElementById('loading');\n        \n        this.setupIntersectionObserver();\n        this.setupScrollObserver();\n        this.loadItems();\n    }\n    \n    setupIntersectionObserver() {\n        this.observer = new IntersectionObserver((entries) => {\n            entries.forEach(entry => {\n                if (entry.isIntersecting) {\n                    const img = entry.target;\n                    img.src = img.dataset.src;\n                    img.onload = () => img.classList.add('loaded');\n                    this.observer.unobserve(img);\n                }\n            });\n        });\n    }\n    \n    setupScrollObserver() {\n        new IntersectionObserver((entries) => {\n            if (entries[0].isIntersecting && !this.loading) {\n                this.loadItems();\n            }\n        }).observe(this.loadingEl);\n    }\n    \n    async loadItems() {\n        this.loading = true;\n        \n        // Simulate API call\n        const items = await this.fetchItems();\n        \n        items.forEach(item => {\n            const div = document.createElement('div');\n            div.className = 'grid-item';\n            \n            const img = document.createElement('img');\n            img.dataset.src = item.url;\n            img.alt = item.title;\n            \n            div.appendChild(img);\n            this.grid.appendChild(div);\n            this.observer.observe(img);\n        });\n        \n        this.page++;\n        this.loading = false;\n    }\n    \n    fetchItems() {\n        // Simulate API response\n        return new Promise(resolve => {\n            setTimeout(() => {\n                resolve(Array(10).fill().map((_, i) => ({\n                    url: `https://picsum.photos/300/${Math.floor(Math.random() * 200 + 200)}`,\n                    title: `Image ${this.page * 10 + i}`\n                })));\n            }, 1000);\n        });\n    }\n}\n\nnew InfiniteGrid();</script>",
                "hint": "Use Intersection Observer for lazy loading and infinite scroll",
                "points": 15,
                "explanation": "Infinite scroll grids combine masonry layout, lazy loading, and scroll detection for efficient image loading.",
                "key_points": "- Infinite scroll\n- Masonry layout\n- Lazy loading\n- Intersection Observer"
            },
            {
                "id": "wh10",
                "category": "web_development",
                "title": "K-tech Somali: Advanced Form Validation",
                "description": "Create a form validation system with custom rules, async validation, and error messaging.",
                "answer": "<style>\n.form-group {\n    margin-bottom: 20px;\n    position: relative;\n}\n\n.form-control {\n    width: 100%;\n    padding: 10px;\n    border: 2px solid #ddd;\n    border-radius: 4px;\n    transition: border-color 0.3s;\n}\n\n.form-control.error {\n    border-color: #e74c3c;\n}\n\n.form-control.success {\n    border-color: #2ecc71;\n}\n\n.error-message {\n    color: #e74c3c;\n    font-size: 12px;\n    margin-top: 5px;\n    display: none;\n}\n\n.error-message.visible {\n    display: block;\n}\n\n.loading-indicator {\n    position: absolute;\n    right: 10px;\n    top: 50%;\n    transform: translateY(-50%);\n    display: none;\n}</style>\n\n<form id=\"validationForm\">\n    <div class=\"form-group\">\n        <input type=\"text\" class=\"form-control\" name=\"username\" placeholder=\"Username\">\n        <div class=\"error-message\"></div>\n        <div class=\"loading-indicator\">⌛</div>\n    </div>\n    <button type=\"submit\">Submit</button>\n</form>\n\n<script>\nclass FormValidator {\n    constructor(form) {\n        this.form = form;\n        this.setupValidation();\n    }\n    \n    setupValidation() {\n        this.form.addEventListener('submit', (e) => {\n            e.preventDefault();\n            this.validateForm();\n        });\n        \n        this.form.querySelectorAll('.form-control').forEach(input => {\n            input.addEventListener('input', () => this.validateField(input));\n        });\n    }\n    \n    async validateField(input) {\n        const value = input.value;\n        const name = input.name;\n        \n        // Clear previous state\n        input.classList.remove('error', 'success');\n        \n        try {\n            await this.runValidation(name, value);\n            input.classList.add('success');\n            this.setError(input, '');\n        } catch (error) {\n            input.classList.add('error');\n            this.setError(input, error);\n        }\n    }\n    \n    async runValidation(field, value) {\n        switch(field) {\n            case 'username':\n                if (value.length < 3) throw 'Username must be at least 3 characters';\n                await this.checkUsernameAvailability(value);\n                break;\n            case 'email':\n                if (!/^\\S+@\\S+\\.\\S+$/.test(value)) throw 'Invalid email format';\n                break;\n            case 'password':\n                if (value.length < 8) throw 'Password must be at least 8 characters';\n                if (!/[A-Z]/.test(value)) throw 'Password must contain uppercase letter';\n                if (!/[0-9]/.test(value)) throw 'Password must contain number';\n                break;\n        }\n    }\n    \n    async checkUsernameAvailability(username) {\n        const loading = this.form.querySelector('.loading-indicator');\n        loading.style.display = 'block';\n        \n        // Simulate API call\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        loading.style.display = 'none';\n        if (['admin', 'root', 'user'].includes(username)) {\n            throw 'Username already taken';\n        }\n    }\n    \n    setError(input, message) {\n        const errorDiv = input.nextElementSibling;\n        errorDiv.textContent = message;\n        errorDiv.classList.toggle('visible', !!message);\n    }\n    \n    async validateForm() {\n        const inputs = this.form.querySelectorAll('.form-control');\n        let isValid = true;\n        \n        for (let input of inputs) {\n            await this.validateField(input);\n            if (input.classList.contains('error')) {\n                isValid = false;\n            }\n        }\n        \n        if (isValid) {\n            console.log('Form is valid!');\n        }\n    }\n}\n\nnew FormValidator(document.getElementById('validationForm'));</script>",
                "hint": "Use async/await for validation and maintain field states",
                "points": 15,
                "explanation": "Advanced form validation requires handling multiple validation rules, async checks, and proper error display.",
                "key_points": "- Async validation\n- Custom rules\n- Error handling\n- Real-time feedback"
            },
            {
                "id": "wh11",
                "category": "web_development",
                "title": "K-tech Somali: Dynamic Data Grid",
                "description": "Create a data grid with sorting, filtering, pagination, and editable cells.",
                "answer": "<style>\n.data-grid {\n    border-collapse: collapse;\n    width: 100%;\n}\n\n.data-grid th {\n    background: #f8f9fa;\n    padding: 12px;\n    text-align: left;\n    cursor: pointer;\n}\n\n.data-grid td {\n    padding: 8px;\n    border-bottom: 1px solid #ddd;\n}\n\n.data-grid th:hover {\n    background: #e9ecef;\n}\n\n.filter-row input {\n    width: 100%;\n    padding: 8px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n}\n\n.pagination {\n    display: flex;\n    justify-content: center;\n    gap: 10px;\n    margin-top: 20px;\n}\n\n.pagination button {\n    padding: 8px 12px;\n    border: 1px solid #ddd;\n    background: white;\n    cursor: pointer;\n}\n\n.pagination button.active {\n    background: #007bff;\n    color: white;\n    border-color: #007bff;\n}</style>\n\n<div class=\"grid-container\">\n    <table class=\"data-grid\">\n        <thead>\n            <tr class=\"filter-row\">\n                <th><input type=\"text\" placeholder=\"Filter Name\"></th>\n                <th><input type=\"text\" placeholder=\"Filter Email\"></th>\n                <th><input type=\"text\" placeholder=\"Filter Role\"></th>\n            </tr>\n            <tr>\n                <th data-sort=\"name\">Name ↕</th>\n                <th data-sort=\"email\">Email ↕</th>\n                <th data-sort=\"role\">Role ↕</th>\n            </tr>\n        </thead>\n        <tbody></tbody>\n    </table>\n    <div class=\"pagination\"></div>\n</div>\n\n<script>\nclass DataGrid {\n    constructor(container) {\n        this.container = container;\n        this.data = [];\n        this.filteredData = [];\n        this.page = 1;\n        this.perPage = 10;\n        this.sortField = 'name';\n        this.sortDir = 'asc';\n        \n        this.setupListeners();\n        this.loadData();\n    }\n    \n    setupListeners() {\n        const headers = this.container.querySelectorAll('th[data-sort]');\n        headers.forEach(header => {\n            header.addEventListener('click', () => this.sort(header.dataset.sort));\n        });\n        \n        const filters = this.container.querySelectorAll('.filter-row input');\n        filters.forEach(filter => {\n            filter.addEventListener('input', () => this.filter());\n        });\n    }\n    \n    async loadData() {\n        // Simulate API call\n        this.data = Array(50).fill().map((_, i) => ({\n            id: i + 1,\n            name: `User ${i + 1}`,\n            email: `user${i + 1}@example.com`,\n            role: ['Admin', 'User', 'Editor'][Math.floor(Math.random() * 3)]\n        }));\n        \n        this.filteredData = [...this.data];\n        this.render();\n    }\n    \n    sort(field) {\n        if (this.sortField === field) {\n            this.sortDir = this.sortDir === 'asc' ? 'desc' : 'asc';\n        } else {\n            this.sortField = field;\n            this.sortDir = 'asc';\n        }\n        \n        this.filteredData.sort((a, b) => {\n            const aVal = a[field].toLowerCase();\n            const bVal = b[field].toLowerCase();\n            return this.sortDir === 'asc' ? \n                aVal.localeCompare(bVal) : \n                bVal.localeCompare(aVal);\n        });\n        \n        this.render();\n    }\n    \n    filter() {\n        const filters = Array.from(this.container.querySelectorAll('.filter-row input'))\n            .map(input => input.value.toLowerCase());\n        \n        this.filteredData = this.data.filter(item => {\n            return filters.every((filter, index) => {\n                const value = Object.values(item)[index + 1].toLowerCase();\n                return value.includes(filter);\n            });\n        });\n        \n        this.page = 1;\n        this.render();\n    }\n    \n    renderPagination() {\n        const totalPages = Math.ceil(this.filteredData.length / this.perPage);\n        const pagination = this.container.querySelector('.pagination');\n        \n        pagination.innerHTML = '';\n        for (let i = 1; i <= totalPages; i++) {\n            const button = document.createElement('button');\n            button.textContent = i;\n            button.classList.toggle('active', i === this.page);\n            button.addEventListener('click', () => {\n                this.page = i;\n                this.render();\n            });\n            pagination.appendChild(button);\n        }\n    }\n    \n    render() {\n        const tbody = this.container.querySelector('tbody');\n        const start = (this.page - 1) * this.perPage;\n        const end = start + this.perPage;\n        \n        tbody.innerHTML = this.filteredData\n            .slice(start, end)\n            .map(item => `\n                <tr>\n                    <td contenteditable=\"true\">${item.name}</td>\n                    <td contenteditable=\"true\">${item.email}</td>\n                    <td contenteditable=\"true\">${item.role}</td>\n                </tr>\n            `).join('');\n        \n        this.renderPagination();\n    }\n}\n\nnew DataGrid(document.querySelector('.grid-container'));</script>",
                "hint": "Implement sorting, filtering, and pagination separately then combine",
                "points": 15,
                "explanation": "Data grids require complex state management for sorting, filtering, and pagination while maintaining performance.",
                "key_points": "- Sorting\n- Filtering\n- Pagination\n- Editable cells"
            },
            {
                "id": "wh12",
                "category": "web_development",
                "title": "K-tech Somali: Rich Text Editor",
                "description": "Create a rich text editor with formatting controls and HTML output.",
                "answer": "<style>\n.editor-container {\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    overflow: hidden;\n}\n\n.toolbar {\n    padding: 10px;\n    background: #f8f9fa;\n    border-bottom: 1px solid #ddd;\n    display: flex;\n    gap: 5px;\n}\n\n.toolbar button {\n    padding: 5px 10px;\n    background: white;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    cursor: pointer;\n}\n\n.toolbar button:hover {\n    background: #e9ecef;\n}\n\n.editor-content {\n    min-height: 200px;\n    padding: 15px;\n    outline: none;\n}\n\n.html-output {\n    margin-top: 20px;\n    padding: 15px;\n    background: #f8f9fa;\n    border-radius: 4px;\n}</style>\n\n<div class=\"editor-container\">\n    <div class=\"toolbar\">\n        <button data-command=\"bold\">B</button>\n        <button data-command=\"italic\">I</button>\n        <button data-command=\"underline\">U</button>\n        <button data-command=\"createLink\">Link</button>\n        <button data-command=\"insertUnorderedList\">List</button>\n        <button data-command=\"justifyLeft\">Left</button>\n        <button data-command=\"justifyCenter\">Center</button>\n        <button data-command=\"justifyRight\">Right</button>\n    </div>\n    <div class=\"editor-content\" contenteditable=\"true\"></div>\n</div>\n<div class=\"html-output\"></div>\n\n<script>\nclass RichTextEditor {\n    constructor(container) {\n        this.container = container;\n        this.content = container.querySelector('.editor-content');\n        this.toolbar = container.querySelector('.toolbar');\n        this.output = document.querySelector('.html-output');\n        \n        this.setupListeners();\n    }\n    \n    setupListeners() {\n        this.toolbar.addEventListener('click', e => {\n            const button = e.target.closest('button');\n            if (!button) return;\n            \n            const command = button.dataset.command;\n            this.execCommand(command);\n        });\n        \n        this.content.addEventListener('input', () => this.updateOutput());\n        this.content.addEventListener('keydown', e => this.handleKeydown(e));\n    }\n    \n    execCommand(command) {\n        if (command === 'createLink') {\n            const url = prompt('Enter URL:');\n            if (url) document.execCommand(command, false, url);\n        } else {\n            document.execCommand(command, false, null);\n        }\n        \n        this.content.focus();\n        this.updateOutput();\n    }\n    \n    handleKeydown(e) {\n        if (e.key === 'Tab') {\n            e.preventDefault();\n            document.execCommand('insertHTML', false, '&nbsp;&nbsp;&nbsp;&nbsp;');\n        }\n    }\n    \n    updateOutput() {\n        this.output.textContent = this.content.innerHTML;\n    }\n}\n\nnew RichTextEditor(document.querySelector('.editor-container'));</script>",
                "hint": "Use contenteditable and document.execCommand for formatting",
                "points": 15,
                "explanation": "Rich text editors combine contenteditable functionality with formatting commands and HTML manipulation.",
                "key_points": "- Text formatting\n- HTML manipulation\n- Keyboard shortcuts\n- Toolbar controls"
            },
            {
                "id": "wh13",
                "category": "web_development",
                "title": "K-tech Somali: Canvas Drawing Board",
                "description": "Create a drawing board with brush sizes, colors, and save functionality.",
                "answer": "<style>\n.drawing-board {\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    overflow: hidden;\n}\n\n.toolbar {\n    padding: 10px;\n    background: #f8f9fa;\n    border-bottom: 1px solid #ddd;\n    display: flex;\n    gap: 10px;\n    align-items: center;\n}\n\n.color-picker {\n    width: 40px;\n    height: 40px;\n    padding: 0;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n}\n\n.size-slider {\n    width: 100px;\n}\n\n.canvas-container {\n    position: relative;\n}\n\ncanvas {\n    cursor: crosshair;\n}</style>\n\n<div class=\"drawing-board\">\n    <div class=\"toolbar\">\n        <input type=\"color\" class=\"color-picker\" value=\"#000000\">\n        <input type=\"range\" class=\"size-slider\" min=\"1\" max=\"50\" value=\"5\">\n        <button onclick=\"clearCanvas()\">Clear</button>\n        <button onclick=\"saveCanvas()\">Save</button>\n    </div>\n    <div class=\"canvas-container\">\n        <canvas id=\"canvas\"></canvas>\n    </div>\n</div>\n\n<script>\nclass DrawingBoard {\n    constructor(container) {\n        this.canvas = container.querySelector('canvas');\n        this.ctx = this.canvas.getContext('2d');\n        this.colorPicker = container.querySelector('.color-picker');\n        this.sizeSlider = container.querySelector('.size-slider');\n        \n        this.isDrawing = false;\n        this.lastX = 0;\n        this.lastY = 0;\n        \n        this.setupCanvas();\n        this.setupListeners();\n    }\n    \n    setupCanvas() {\n        this.canvas.width = window.innerWidth;\n        this.canvas.height = 400;\n        \n        this.ctx.lineCap = 'round';\n        this.ctx.lineJoin = 'round';\n        this.ctx.strokeStyle = this.colorPicker.value;\n        this.ctx.lineWidth = this.sizeSlider.value;\n    }\n    \n    setupListeners() {\n        this.canvas.addEventListener('mousedown', e => this.startDrawing(e));\n        this.canvas.addEventListener('mousemove', e => this.draw(e));\n        this.canvas.addEventListener('mouseup', () => this.stopDrawing());\n        this.canvas.addEventListener('mouseout', () => this.stopDrawing());\n        \n        this.colorPicker.addEventListener('change', () => {\n            this.ctx.strokeStyle = this.colorPicker.value;\n        });\n        \n        this.sizeSlider.addEventListener('input', () => {\n            this.ctx.lineWidth = this.sizeSlider.value;\n        });\n        \n        window.addEventListener('resize', () => this.resizeCanvas());\n    }\n    \n    startDrawing(e) {\n        this.isDrawing = true;\n        [this.lastX, this.lastY] = this.getMousePos(e);\n    }\n    \n    draw(e) {\n        if (!this.isDrawing) return;\n        \n        const [x, y] = this.getMousePos(e);\n        \n        this.ctx.beginPath();\n        this.ctx.moveTo(this.lastX, this.lastY);\n        this.ctx.lineTo(x, y);\n        this.ctx.stroke();\n        \n        [this.lastX, this.lastY] = [x, y];\n    }\n    \n    stopDrawing() {\n        this.isDrawing = false;\n    }\n    \n    getMousePos(e) {\n        const rect = this.canvas.getBoundingClientRect();\n        return [\n            e.clientX - rect.left,\n            e.clientY - rect.top\n        ];\n    }\n    \n    resizeCanvas() {\n        const imageData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);\n        this.canvas.width = window.innerWidth;\n        this.ctx.putImageData(imageData, 0, 0);\n    }\n    \n    clear() {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n    \n    save() {\n        const link = document.createElement('a');\n        link.download = 'drawing.png';\n        link.href = this.canvas.toDataURL();\n        link.click();\n    }\n}\n\nconst board = new DrawingBoard(document.querySelector('.drawing-board'));\n\nfunction clearCanvas() {\n    board.clear();\n}\n\nfunction saveCanvas() {\n    board.save();\n}</script>",
                "hint": "Use canvas context methods for drawing and event listeners for interaction",
                "points": 15,
                "explanation": "Drawing boards use canvas API for freehand drawing with various tools and settings.",
                "key_points": "- Canvas API\n- Drawing tools\n- Event handling\n- Image saving"
            },
            {
                "id": "wh14",
                "category": "web_development",
                "title": "K-tech Somali: Custom Chart Library",
                "description": "Create a simple chart library supporting bar and line charts using SVG.",
                "answer": "<style>\n.chart-container {\n    margin: 20px;\n    padding: 20px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n}\n\n.chart-svg {\n    width: 100%;\n    height: 300px;\n}\n\n.axis-line {\n    stroke: #ddd;\n    stroke-width: 1;\n}\n\n.data-point {\n    fill: #3498db;\n    transition: r 0.3s;\n}\n\n.data-point:hover {\n    r: 6;\n}\n\n.data-line {\n    fill: none;\n    stroke: #3498db;\n    stroke-width: 2;\n}\n\n.bar {\n    fill: #3498db;\n    transition: height 0.3s;\n}\n\n.bar:hover {\n    fill: #2980b9;\n}\n\n.axis-label {\n    font-size: 12px;\n    fill: #666;\n}</style>\n\n<div class=\"chart-container\">\n    <svg class=\"chart-svg\"></svg>\n</div>\n\n<script>\nclass Chart {\n    constructor(container, data, options = {}) {\n        this.svg = container.querySelector('svg');\n        this.data = data;\n        this.options = {\n            type: 'line',\n            padding: 40,\n            ...options\n        };\n        \n        this.draw();\n    }\n    \n    draw() {\n        this.calculateDimensions();\n        this.drawAxis();\n        \n        if (this.options.type === 'line') {\n            this.drawLineChart();\n        } else if (this.options.type === 'bar') {\n            this.drawBarChart();\n        }\n    }\n    \n    calculateDimensions() {\n        const rect = this.svg.getBoundingClientRect();\n        this.width = rect.width;\n        this.height = rect.height;\n        this.innerWidth = this.width - this.options.padding * 2;\n        this.innerHeight = this.height - this.options.padding * 2;\n        \n        const values = this.data.map(d => d.value);\n        this.minValue = Math.min(...values);\n        this.maxValue = Math.max(...values);\n    }\n    \n    drawAxis() {\n        this.createLine(\n            this.options.padding, this.options.padding,\n            this.options.padding, this.height - this.options.padding\n        );\n        \n        this.createLine(\n            this.options.padding, this.height - this.options.padding,\n            this.width - this.options.padding, this.height - this.options.padding\n        );\n        \n        // Y-axis labels\n        for (let i = 0; i <= 5; i++) {\n            const value = this.minValue + (this.maxValue - this.minValue) * i / 5;\n            const y = this.getY(value);\n            \n            this.createText(\n                value.toFixed(0),\n                this.options.padding - 10,\n                y,\n                'end',\n                'middle'\n            );\n        }\n        \n        // X-axis labels\n        this.data.forEach((d, i) => {\n            const x = this.getX(i);\n            \n            this.createText(\n                d.label,\n                x,\n                this.height - this.options.padding + 20,\n                'middle'\n            );\n        });\n    }\n    \n    drawLineChart() {\n        // Draw lines\n        let path = `M ${this.getX(0)} ${this.getY(this.data[0].value)}`;\n        \n        for (let i = 1; i < this.data.length; i++) {\n            path += ` L ${this.getX(i)} ${this.getY(this.data[i].value)}`;\n        }\n        \n        const line = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n        line.setAttribute('d', path);\n        line.setAttribute('class', 'data-line');\n        this.svg.appendChild(line);\n        \n        // Draw points\n        this.data.forEach((d, i) => {\n            const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n            circle.setAttribute('cx', this.getX(i));\n            circle.setAttribute('cy', this.getY(d.value));\n            circle.setAttribute('r', 4);\n            circle.setAttribute('class', 'data-point');\n            this.svg.appendChild(circle);\n        });\n    }\n    \n    drawBarChart() {\n        const barWidth = this.innerWidth / this.data.length * 0.8;\n        \n        this.data.forEach((d, i) => {\n            const height = this.getY(0) - this.getY(d.value);\n            const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n            \n            rect.setAttribute('x', this.getX(i) - barWidth / 2);\n            rect.setAttribute('y', this.getY(d.value));\n            rect.setAttribute('width', barWidth);\n            rect.setAttribute('height', height);\n            rect.setAttribute('class', 'bar');\n            \n            this.svg.appendChild(rect);\n        });\n    }\n    \n    getX(index) {\n        return this.options.padding + (this.innerWidth * index / (this.data.length - 1));\n    }\n    \n    getY(value) {\n        const scale = this.innerHeight / (this.maxValue - this.minValue);\n        return this.height - this.options.padding - (value - this.minValue) * scale;\n    }\n    \n    createLine(x1, y1, x2, y2) {\n        const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n        line.setAttribute('x1', x1);\n        line.setAttribute('y1', y1);\n        line.setAttribute('x2', x2);\n        line.setAttribute('y2', y2);\n        line.setAttribute('class', 'axis-line');\n        this.svg.appendChild(line);\n    }\n    \n    createText(text, x, y, anchor = 'start', baseline = 'auto') {\n        const textElement = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n        textElement.textContent = text;\n        textElement.setAttribute('x', x);\n        textElement.setAttribute('y', y);\n        textElement.setAttribute('text-anchor', anchor);\n        textElement.setAttribute('dominant-baseline', baseline);\n        textElement.setAttribute('class', 'axis-label');\n        this.svg.appendChild(textElement);\n    }\n}\n\n// Example usage\nconst data = [\n    { label: 'Jan', value: 10 },\n    { label: 'Feb', value: 25 },\n    { label: 'Mar', value: 15 },\n    { label: 'Apr', value: 30 },\n    { label: 'May', value: 20 }\n];\n\nnew Chart(document.querySelector('.chart-container'), data, { type: 'line' });</script>",
                "hint": "Use SVG elements for drawing and implement scaling functions",
                "points": 15,
                "explanation": "Chart libraries use SVG for vector graphics and implement scaling for data visualization.",
                "key_points": "- SVG graphics\n- Data scaling\n- Chart types\n- Interactivity"
            },
            {
                "id": "wh15",
                "category": "web_development",
                "title": "K-tech Somali: State Management System",
                "description": "Create a simple state management system with subscriptions and updates.",
                "answer": "<style>\n.counter-app {\n    max-width: 400px;\n    margin: 20px auto;\n    padding: 20px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n}\n\n.counter-display {\n    font-size: 24px;\n    text-align: center;\n    margin: 20px 0;\n}\n\n.counter-controls {\n    display: flex;\n    gap: 10px;\n    justify-content: center;\n}\n\n.counter-controls button {\n    padding: 10px 20px;\n    border: none;\n    border-radius: 4px;\n    background: #3498db;\n    color: white;\n    cursor: pointer;\n}\n\n.counter-controls button:hover {\n    background: #2980b9;\n}\n\n.todo-list {\n    margin-top: 20px;\n}\n\n.todo-item {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    padding: 10px;\n    border-bottom: 1px solid #ddd;\n}\n\n.todo-item input[type=\"checkbox\"] {\n    margin: 0;\n}\n\n.todo-item.completed span {\n    text-decoration: line-through;\n    color: #999;\n}</style>\n\n<div id=\"app\">\n    <div class=\"counter-app\">\n        <div class=\"counter-display\">Count: <span id=\"count\">0</span></div>\n        <div class=\"counter-controls\">\n            <button onclick=\"store.dispatch({ type: 'INCREMENT' })\">+</button>\n            <button onclick=\"store.dispatch({ type: 'DECREMENT' })\">-</button>\n        </div>\n        \n        <div class=\"todo-list\">\n            <div>\n                <input type=\"text\" id=\"todoInput\" placeholder=\"Add todo\">\n                <button onclick=\"addTodo()\">Add</button>\n            </div>\n            <div id=\"todos\"></div>\n        </div>\n    </div>\n</div>\n\n<script>\nclass Store {\n    constructor(initialState = {}) {\n        this.state = initialState;\n        this.subscribers = new Set();\n        this.reducers = new Map();\n    }\n    \n    getState() {\n        return { ...this.state };\n    }\n    \n    subscribe(callback) {\n        this.subscribers.add(callback);\n        return () => this.subscribers.delete(callback);\n    }\n    \n    dispatch(action) {\n        const reducer = this.reducers.get(action.type);\n        if (reducer) {\n            const newState = reducer(this.state, action);\n            if (newState !== this.state) {\n                this.state = newState;\n                this.notify();\n            }\n        }\n    }\n    \n    registerReducer(type, reducer) {\n        this.reducers.set(type, reducer);\n    }\n    \n    notify() {\n        this.subscribers.forEach(callback => callback(this.state));\n    }\n}\n\n// Create store instance\nconst store = new Store({\n    count: 0,\n    todos: []\n});\n\n// Register reducers\nstore.registerReducer('INCREMENT', (state) => ({\n    ...state,\n    count: state.count + 1\n}));\n\nstore.registerReducer('DECREMENT', (state) => ({\n    ...state,\n    count: state.count - 1\n}));\n\nstore.registerReducer('ADD_TODO', (state, action) => ({\n    ...state,\n    todos: [...state.todos, {\n        id: Date.now(),\n        text: action.payload,\n        completed: false\n    }]\n}));\n\nstore.registerReducer('TOGGLE_TODO', (state, action) => ({\n    ...state,\n    todos: state.todos.map(todo =>\n        todo.id === action.payload\n            ? { ...todo, completed: !todo.completed }\n            : todo\n    )\n}));\n\n// UI updates\nstore.subscribe(state => {\n    document.getElementById('count').textContent = state.count;\n    \n    const todosContainer = document.getElementById('todos');\n    todosContainer.innerHTML = state.todos\n        .map(todo => `\n            <div class=\"todo-item ${todo.completed ? 'completed' : ''}\">\n                <input\n                    type=\"checkbox\"\n                    ${todo.completed ? 'checked' : ''}\n                    onchange=\"store.dispatch({\n                        type: 'TOGGLE_TODO',\n                        payload: ${todo.id}\n                    })\"\n                >\n                <span>${todo.text}</span>\n            </div>\n        `)\n        .join('');\n});\n\n// Add todo handler\nfunction addTodo() {\n    const input = document.getElementById('todoInput');\n    const text = input.value.trim();\n    \n    if (text) {\n        store.dispatch({\n            type: 'ADD_TODO',\n            payload: text\n        });\n        input.value = '';\n    }\n}</script>",
                "hint": "Implement a pub/sub pattern with state immutability",
                "points": 15,
                "explanation": "State management systems use the pub/sub pattern and immutable updates for predictable state changes.",
                "key_points": "- State immutability\n- Pub/sub pattern\n- Action dispatching\n- UI synchronization"
            },
            {
                "id": "wh16",
                "category": "web_development",
                "title": "K-tech Somali: Virtual Keyboard",
                "description": "Create a virtual keyboard that can be used to type into an input field, with key press animations and sound effects.",
                "answer": "<style>\n.keyboard-container {\n    width: 800px;\n    padding: 20px;\n    background: #f0f0f0;\n    border-radius: 10px;\n}\n.input-field {\n    width: 100%;\n    padding: 15px;\n    margin-bottom: 20px;\n    font-size: 18px;\n    border: 2px solid #ddd;\n    border-radius: 5px;\n}\n.keyboard {\n    display: grid;\n    gap: 5px;\n    grid-template-columns: repeat(30, 30px);\n    grid-auto-rows: 45px;\n}\n.key {\n    grid-column: span 2;\n    background: white;\n    border: 1px solid #ddd;\n    border-radius: 5px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    user-select: none;\n    transition: all 0.1s;\n}\n.key:active, .key.active {\n    background: #e0e0e0;\n    transform: translateY(2px);\n}\n.key-space { grid-column: span 12; }\n.key-shift { grid-column: span 4; }\n.key-backspace { grid-column: span 4; }\n.key-enter { grid-column: span 4; }\n</style>\n<div class=\"keyboard-container\">\n    <input type=\"text\" class=\"input-field\" id=\"input\" readonly>\n    <div class=\"keyboard\" id=\"keyboard\"></div>\n    <audio id=\"keySound\" src=\"key-press.mp3\" preload=\"auto\"></audio>\n</div>\n<script>\nconst layout = [\n    '1234567890',\n    'QWERTYUIOP',\n    'ASDFGHJKL',\n    'ZXCVBNM',\n    ' '\n];\n\nconst keyboard = document.getElementById('keyboard');\nconst input = document.getElementById('input');\nconst keySound = document.getElementById('keySound');\nlet text = '';\n\nfunction createKeyboard() {\n    layout.forEach((row, i) => {\n        if (i === 0) {\n            // Add number row\n            row.split('').forEach(char => {\n                createKey(char);\n            });\n        } else if (i === layout.length - 1) {\n            // Add space and special keys\n            createKey('⇧', 'key-shift');\n            createKey('Space', 'key-space');\n            createKey('⌫', 'key-backspace');\n            createKey('↵', 'key-enter');\n        } else {\n            // Add letter rows\n            row.split('').forEach(char => {\n                createKey(char);\n            });\n        }\n    });\n}\n\nfunction createKey(char, className = '') {\n    const key = document.createElement('div');\n    key.className = `key ${className}`;\n    key.textContent = char;\n    key.addEventListener('click', () => handleKeyPress(char));\n    keyboard.appendChild(key);\n}\n\nfunction handleKeyPress(char) {\n    keySound.currentTime = 0;\n    keySound.play();\n    \n    const key = event.target;\n    key.classList.add('active');\n    setTimeout(() => key.classList.remove('active'), 100);\n    \n    switch(char) {\n        case 'Space':\n            text += ' ';\n            break;\n        case '⌫':\n            text = text.slice(0, -1);\n            break;\n        case '↵':\n            text += '\\n';\n            break;\n        case '⇧':\n            toggleCase();\n            break;\n        default:\n            text += char;\n    }\n    \n    input.value = text;\n}\n\nfunction toggleCase() {\n    const keys = keyboard.querySelectorAll('.key');\n    keys.forEach(key => {\n        if (key.textContent.length === 1 && /[A-Za-z]/.test(key.textContent)) {\n            key.textContent = key.textContent === key.textContent.toUpperCase() ?\n                key.textContent.toLowerCase() : key.textContent.toUpperCase();\n        }\n    });\n}\n\ncreateKeyboard();\n</script>",
                "hint": "Use CSS Grid for keyboard layout and manage key states",
                "points": 15,
                "explanation": "A virtual keyboard requires careful layout management and event handling. The keyboard supports basic typing, special keys, and sound effects for enhanced user experience.",
                "key_points": "- CSS Grid layout\n- Event handling\n- Audio integration\n- State management"
            },
            {
                "id": "wh17",
                "category": "web_development",
                "title": "K-tech Somali: 3D Card Flip",
                "description": "Create a card that flips in 3D space when hovered, with content on both sides and realistic perspective.",
                "answer": "<style>\n.scene {\n    width: 300px;\n    height: 400px;\n    perspective: 1000px;\n}\n.card {\n    width: 100%;\n    height: 100%;\n    position: relative;\n    transform-style: preserve-3d;\n    transition: transform 0.8s;\n    cursor: pointer;\n}\n.card:hover {\n    transform: rotateY(180deg);\n}\n.card-face {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    backface-visibility: hidden;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 24px;\n    border-radius: 10px;\n    box-shadow: 0 5px 15px rgba(0,0,0,0.3);\n}\n.card-front {\n    background: linear-gradient(45deg, #2980b9, #3498db);\n    color: white;\n}\n.card-back {\n    background: linear-gradient(45deg, #27ae60, #2ecc71);\n    color: white;\n    transform: rotateY(180deg);\n}\n.card-content {\n    padding: 20px;\n    text-align: center;\n}\n.card-content img {\n    width: 150px;\n    height: 150px;\n    border-radius: 50%;\n    margin-bottom: 20px;\n    border: 3px solid white;\n}\n.shine {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: linear-gradient(\n        135deg,\n        rgba(255,255,255,0.25) 0%,\n        rgba(255,255,255,0) 60%\n    );\n    pointer-events: none;\n    border-radius: 10px;\n}\n</style>\n<div class=\"scene\">\n    <div class=\"card\">\n        <div class=\"card-face card-front\">\n            <div class=\"card-content\">\n                <img src=\"profile.jpg\" alt=\"Profile\">\n                <h2>Front Side</h2>\n                <p>Hover to flip</p>\n            </div>\n            <div class=\"shine\"></div>\n        </div>\n        <div class=\"card-face card-back\">\n            <div class=\"card-content\">\n                <h2>Back Side</h2>\n                <p>Additional information here</p>\n            </div>\n            <div class=\"shine\"></div>\n        </div>\n    </div>\n</div>\n<script>\nconst card = document.querySelector('.card');\n\ncard.addEventListener('mousemove', (e) => {\n    const rect = card.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    \n    const centerX = rect.width / 2;\n    const centerY = rect.height / 2;\n    \n    const rotateX = (y - centerY) / 10;\n    const rotateY = (centerX - x) / 10;\n    \n    card.style.transform = `rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;\n});\n\ncard.addEventListener('mouseleave', () => {\n    card.style.transform = '';\n});\n</script>",
                "hint": "Use CSS transform-style: preserve-3d and perspective",
                "points": 15,
                "explanation": "The 3D card flip effect uses CSS transforms and perspective to create a realistic flip animation. The shine effect and mouse tracking add depth to the interaction.",
                "key_points": "- 3D transforms\n- Perspective\n- Mouse tracking\n- Visual effects"
            },
            {
                "id": "wh18",
                "category": "web_development",
                "title": "K-tech Somali: Custom Video Player",
                "description": "Create a custom video player with advanced features like playback speed control, picture-in-picture, and quality selection.",
                "answer": "<style>\n.video-container {\n    width: 800px;\n    position: relative;\n    background: black;\n}\n.video-player {\n    width: 100%;\n}\n.controls {\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    background: rgba(0,0,0,0.7);\n    padding: 10px;\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    opacity: 0;\n    transition: opacity 0.3s;\n}\n.video-container:hover .controls {\n    opacity: 1;\n}\n.progress {\n    flex: 1;\n    height: 4px;\n    background: rgba(255,255,255,0.3);\n    cursor: pointer;\n    position: relative;\n}\n.progress-bar {\n    height: 100%;\n    background: #3498db;\n    width: 0%;\n}\n.control-btn {\n    background: none;\n    border: none;\n    color: white;\n    cursor: pointer;\n    padding: 5px 10px;\n}\n.settings-menu {\n    position: absolute;\n    bottom: 100%;\n    right: 10px;\n    background: rgba(0,0,0,0.9);\n    border-radius: 4px;\n    padding: 10px;\n    display: none;\n}\n.settings-menu.active {\n    display: block;\n}\n.menu-item {\n    color: white;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n.menu-item:hover {\n    background: rgba(255,255,255,0.1);\n}\n</style>\n<div class=\"video-container\">\n    <video class=\"video-player\" id=\"video\">\n        <source src=\"video.mp4\" type=\"video/mp4\">\n    </video>\n    <div class=\"controls\">\n        <button class=\"control-btn\" id=\"playBtn\">▶</button>\n        <div class=\"progress\" id=\"progress\">\n            <div class=\"progress-bar\" id=\"progressBar\"></div>\n        </div>\n        <button class=\"control-btn\" id=\"volumeBtn\">🔊</button>\n        <button class=\"control-btn\" id=\"pipBtn\">⎚</button>\n        <button class=\"control-btn\" id=\"settingsBtn\">⚙</button>\n        <div class=\"settings-menu\" id=\"settingsMenu\">\n            <div class=\"menu-item\" onclick=\"setPlaybackSpeed(0.5)\">0.5x</div>\n            <div class=\"menu-item\" onclick=\"setPlaybackSpeed(1)\">1x</div>\n            <div class=\"menu-item\" onclick=\"setPlaybackSpeed(1.5)\">1.5x</div>\n            <div class=\"menu-item\" onclick=\"setPlaybackSpeed(2)\">2x</div>\n        </div>\n    </div>\n</div>\n<script>\nconst video = document.getElementById('video');\nconst playBtn = document.getElementById('playBtn');\nconst volumeBtn = document.getElementById('volumeBtn');\nconst pipBtn = document.getElementById('pipBtn');\nconst settingsBtn = document.getElementById('settingsBtn');\nconst settingsMenu = document.getElementById('settingsMenu');\nconst progress = document.getElementById('progress');\nconst progressBar = document.getElementById('progressBar');\n\n// Play/Pause\nplayBtn.addEventListener('click', togglePlay);\nvideo.addEventListener('click', togglePlay);\n\nfunction togglePlay() {\n    if (video.paused) {\n        video.play();\n        playBtn.textContent = '⏸';\n    } else {\n        video.pause();\n        playBtn.textContent = '▶';\n    }\n}\n\n// Volume\nvolumeBtn.addEventListener('click', () => {\n    video.muted = !video.muted;\n    volumeBtn.textContent = video.muted ? '🔇' : '🔊';\n});\n\n// Picture in Picture\npipBtn.addEventListener('click', async () => {\n    try {\n        if (document.pictureInPictureElement) {\n            await document.exitPictureInPicture();\n        } else {\n            await video.requestPictureInPicture();\n        }\n    } catch (error) {\n        console.error('PiP failed:', error);\n    }\n});\n\n// Settings\nsettingsBtn.addEventListener('click', () => {\n    settingsMenu.classList.toggle('active');\n});\n\nfunction setPlaybackSpeed(speed) {\n    video.playbackRate = speed;\n    settingsMenu.classList.remove('active');\n}\n\n// Progress\nvideo.addEventListener('timeupdate', () => {\n    const percent = (video.currentTime / video.duration) * 100;\n    progressBar.style.width = `${percent}%`;\n});\n\nprogress.addEventListener('click', (e) => {\n    const rect = progress.getBoundingClientRect();\n    const pos = (e.clientX - rect.left) / rect.width;\n    video.currentTime = pos * video.duration;\n});\n\n// Hide controls when video is playing\nlet timeout;\nvideo.addEventListener('mousemove', () => {\n    clearTimeout(timeout);\n    document.querySelector('.controls').style.opacity = '1';\n    timeout = setTimeout(() => {\n        if (!video.paused) {\n            document.querySelector('.controls').style.opacity = '0';\n        }\n    }, 2000);\n});\n</script>",
                "hint": "Use HTML5 Video API and custom controls",
                "points": 15,
                "explanation": "A custom video player provides enhanced control over playback and appearance. Features like picture-in-picture and playback speed control improve user experience.",
                "key_points": "- Video API\n- Custom controls\n- Picture-in-Picture\n- Playback settings"
            },
            {
                "id": "wh19",
                "category": "web_development",
                "title": "K-tech Somali: Infinite Scroll Grid",
                "description": "Create an infinite scroll grid of images with lazy loading and masonry layout.",
                "answer": "<style>\n.grid-container {\n    width: 100%;\n    max-width: 1200px;\n    margin: 0 auto;\n    columns: 4;\n    column-gap: 20px;\n    padding: 20px;\n}\n@media (max-width: 1200px) { .grid-container { columns: 3; } }\n@media (max-width: 800px) { .grid-container { columns: 2; } }\n@media (max-width: 500px) { .grid-container { columns: 1; } }\n\n.grid-item {\n    break-inside: avoid;\n    margin-bottom: 20px;\n    position: relative;\n}\n.grid-item img {\n    width: 100%;\n    display: block;\n    border-radius: 8px;\n    transition: transform 0.3s;\n}\n.grid-item:hover img {\n    transform: scale(1.02);\n}\n.loading {\n    text-align: center;\n    padding: 20px;\n    font-size: 18px;\n}\n.skeleton {\n    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\n    background-size: 200% 100%;\n    animation: loading 1.5s infinite;\n    border-radius: 8px;\n    height: 300px;\n    margin-bottom: 20px;\n}\n@keyframes loading {\n    0% { background-position: 200% 0; }\n    100% { background-position: -200% 0; }\n}\n</style>\n<div class=\"grid-container\" id=\"grid\"></div>\n<div class=\"loading\" id=\"loading\">Loading...</div>\n<script>\nlet page = 1;\nlet loading = false;\nconst gridContainer = document.getElementById('grid');\nconst loadingElement = document.getElementById('loading');\n\n// Create intersection observer for infinite scroll\nconst observer = new IntersectionObserver((entries) => {\n    entries.forEach(entry => {\n        if (entry.isIntersecting && !loading) {\n            loadImages();\n        }\n    });\n});\n\nobserver.observe(loadingElement);\n\n// Load images with random heights\nasync function loadImages() {\n    loading = true;\n    \n    // Show skeleton loading\n    for (let i = 0; i < 8; i++) {\n        const skeleton = document.createElement('div');\n        skeleton.className = 'skeleton';\n        gridContainer.appendChild(skeleton);\n    }\n    \n    try {\n        // Simulate API call\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        // Remove skeletons\n        document.querySelectorAll('.skeleton').forEach(skeleton => skeleton.remove());\n        \n        // Add actual images\n        for (let i = 0; i < 8; i++) {\n            const item = document.createElement('div');\n            item.className = 'grid-item';\n            \n            const img = document.createElement('img');\n            img.src = `https://picsum.photos/400/${Math.floor(Math.random() * 200 + 300)}?random=${page * 8 + i}`;\n            \n            // Lazy loading\n            img.loading = 'lazy';\n            \n            // Handle image load\n            img.onload = () => {\n                item.style.opacity = '1';\n            };\n            \n            item.appendChild(img);\n            gridContainer.appendChild(item);\n        }\n        \n        page++;\n    } catch (error) {\n        console.error('Error loading images:', error);\n    } finally {\n        loading = false;\n    }\n}\n\n// Initial load\nloadImages();\n\n// Debounced resize handler for layout adjustments\nlet resizeTimeout;\nwindow.addEventListener('resize', () => {\n    clearTimeout(resizeTimeout);\n    resizeTimeout = setTimeout(() => {\n        // Adjust layout if needed\n    }, 100);\n});\n</script>",
                "hint": "Use Intersection Observer and CSS columns for layout",
                "points": 15,
                "explanation": "The infinite scroll grid uses CSS columns for a masonry layout and Intersection Observer for infinite scroll. Lazy loading and skeleton screens improve performance and user experience.",
                "key_points": "- Infinite scroll\n- Masonry layout\n- Lazy loading\n- Skeleton loading"
            },
            {
                "id": "wh20",
                "category": "web_development",
                "title": "K-tech Somali: Drag and Drop File Upload",
                "description": "Create a drag and drop file upload zone with preview, progress bar, and multiple file support.",
                "answer": "<style>\n.upload-container {\n    width: 600px;\n    padding: 20px;\n    background: #f8f9fa;\n    border-radius: 10px;\n}\n.drop-zone {\n    border: 2px dashed #ccc;\n    border-radius: 8px;\n    padding: 40px;\n    text-align: center;\n    transition: all 0.3s;\n    margin-bottom: 20px;\n}\n.drop-zone.dragover {\n    background: #e3f2fd;\n    border-color: #2196f3;\n}\n.drop-zone-text {\n    font-size: 18px;\n    color: #666;\n    margin-bottom: 10px;\n}\n.preview-container {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\n    gap: 15px;\n}\n.preview-item {\n    position: relative;\n    background: white;\n    padding: 10px;\n    border-radius: 6px;\n    box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n}\n.preview-item img {\n    width: 100%;\n    height: 100px;\n    object-fit: cover;\n    border-radius: 4px;\n}\n.preview-item .remove-btn {\n    position: absolute;\n    top: -8px;\n    right: -8px;\n    background: #ff4444;\n    color: white;\n    border: none;\n    width: 24px;\n    height: 24px;\n    border-radius: 50%;\n    cursor: pointer;\n}\n.progress-bar {\n    height: 4px;\n    background: #e0e0e0;\n    border-radius: 2px;\n    margin-top: 10px;\n    overflow: hidden;\n}\n.progress {\n    height: 100%;\n    background: #2196f3;\n    width: 0%;\n    transition: width 0.3s;\n}\n.file-info {\n    font-size: 12px;\n    color: #666;\n    margin-top: 5px;\n    text-align: center;\n}\n</style>\n<div class=\"upload-container\">\n    <div class=\"drop-zone\" id=\"dropZone\">\n        <div class=\"drop-zone-text\">Drag files here or click to upload</div>\n        <input type=\"file\" id=\"fileInput\" multiple style=\"display: none\">\n    </div>\n    <div class=\"preview-container\" id=\"previewContainer\"></div>\n</div>\n<script>\nconst dropZone = document.getElementById('dropZone');\nconst fileInput = document.getElementById('fileInput');\nconst previewContainer = document.getElementById('previewContainer');\n\n// Handle drag and drop events\ndropZone.addEventListener('dragover', (e) => {\n    e.preventDefault();\n    dropZone.classList.add('dragover');\n});\n\ndropZone.addEventListener('dragleave', () => {\n    dropZone.classList.remove('dragover');\n});\n\ndropZone.addEventListener('drop', (e) => {\n    e.preventDefault();\n    dropZone.classList.remove('dragover');\n    handleFiles(e.dataTransfer.files);\n});\n\ndropZone.addEventListener('click', () => {\n    fileInput.click();\n});\n\nfileInput.addEventListener('change', () => {\n    handleFiles(fileInput.files);\n});\n\nfunction handleFiles(files) {\n    Array.from(files).forEach(file => {\n        if (file.type.startsWith('image/')) {\n            uploadFile(file);\n        }\n    });\n}\n\nfunction uploadFile(file) {\n    const preview = document.createElement('div');\n    preview.className = 'preview-item';\n    \n    // Create preview image\n    const img = document.createElement('img');\n    const reader = new FileReader();\n    reader.onload = (e) => img.src = e.target.result;\n    reader.readAsDataURL(file);\n    \n    // Create remove button\n    const removeBtn = document.createElement('button');\n    removeBtn.className = 'remove-btn';\n    removeBtn.textContent = '×';\n    removeBtn.onclick = () => preview.remove();\n    \n    // Create progress bar\n    const progressBar = document.createElement('div');\n    progressBar.className = 'progress-bar';\n    const progress = document.createElement('div');\n    progress.className = 'progress';\n    progressBar.appendChild(progress);\n    \n    // Create file info\n    const info = document.createElement('div');\n    info.className = 'file-info';\n    info.textContent = file.name;\n    \n    preview.appendChild(img);\n    preview.appendChild(removeBtn);\n    preview.appendChild(progressBar);\n    preview.appendChild(info);\n    previewContainer.appendChild(preview);\n    \n    // Simulate upload\n    simulateUpload(progress, preview);\n}\n\nfunction simulateUpload(progressElement, previewElement) {\n    let progress = 0;\n    const interval = setInterval(() => {\n        progress += Math.random() * 10;\n        if (progress >= 100) {\n            progress = 100;\n            clearInterval(interval);\n            progressElement.parentElement.style.display = 'none';\n        }\n        progressElement.style.width = `${progress}%`;\n    }, 200);\n}\n</script>",
                "hint": "Use FileReader API and drag/drop events",
                "points": 15,
                "explanation": "The drag and drop upload zone supports multiple file uploads with preview images and progress bars. The interface provides visual feedback for drag operations and upload progress.",
                "key_points": "- File API\n- Drag and Drop API\n- Progress tracking\n- Preview generation"
            },
            {
                "id": "wh21",
                "category": "web_development",
                "title": "K-tech Somali: Custom Date Picker",
                "description": "Create a custom date picker with month/year navigation, range selection, and special date highlighting.",
                "answer": "... [previous code] ...\n<script>\nclass DatePicker {\n    constructor() {\n        this.date = new Date();\n        this.selectedDate = null;\n        this.rangeStart = null;\n        this.rangeEnd = null;\n        this.specialDates = [\n            new Date(2024, 0, 1),  // New Year\n            new Date(2024, 11, 25)  // Christmas\n        ];\n        \n        this.init();\n    }\n    \n    init() {\n        this.monthYear = document.getElementById('monthYear');\n        this.calendar = document.getElementById('calendar');\n        \n        document.getElementById('prevMonth').addEventListener('click', () => {\n            this.date.setMonth(this.date.getMonth() - 1);\n            this.render();\n        });\n        \n        document.getElementById('nextMonth').addEventListener('click', () => {\n            this.date.setMonth(this.date.getMonth() + 1);\n            this.render();\n        });\n        \n        this.render();\n    }\n    \n    render() {\n        this.monthYear.textContent = this.date.toLocaleString('default', {\n            month: 'long',\n            year: 'numeric'\n        });\n        \n        this.calendar.innerHTML = '';\n        \n        const firstDay = new Date(this.date.getFullYear(), this.date.getMonth(), 1);\n        const lastDay = new Date(this.date.getFullYear(), this.date.getMonth() + 1, 0);\n        \n        // Add empty cells for days before first of month\n        for (let i = 0; i < firstDay.getDay(); i++) {\n            this.calendar.appendChild(this.createDay(''));\n        }\n        \n        // Add days of month\n        for (let day = 1; day <= lastDay.getDate(); day++) {\n            const currentDate = new Date(this.date.getFullYear(), this.date.getMonth(), day);\n            const dayElement = this.createDay(day);\n            \n            // Add special classes\n            if (this.isToday(currentDate)) dayElement.classList.add('today');\n            if (this.isSpecial(currentDate)) dayElement.classList.add('special');\n            if (this.isSelected(currentDate)) dayElement.classList.add('selected');\n            if (this.isInRange(currentDate)) {\n                dayElement.classList.add('range');\n                if (this.isRangeStart(currentDate)) dayElement.classList.add('range-start');\n                if (this.isRangeEnd(currentDate)) dayElement.classList.add('range-end');\n            }\n            \n            dayElement.addEventListener('click', () => this.selectDate(currentDate));\n            this.calendar.appendChild(dayElement);\n        }\n    }\n    \n    createDay(content) {\n        const day = document.createElement('div');\n        day.className = 'day';\n        day.textContent = content;\n        return day;\n    }\n    \n    isToday(date) {\n        const today = new Date();\n        return date.toDateString() === today.toDateString();\n    }\n    \n    isSpecial(date) {\n        return this.specialDates.some(special => \n            special.toDateString() === date.toDateString()\n        );\n    }\n    \n    isSelected(date) {\n        return this.selectedDate && \n            date.toDateString() === this.selectedDate.toDateString();\n    }\n    \n    isInRange(date) {\n        if (!this.rangeStart || !this.rangeEnd) return false;\n        return date >= this.rangeStart && date <= this.rangeEnd;\n    }\n    \n    isRangeStart(date) {\n        return this.rangeStart && \n            date.toDateString() === this.rangeStart.toDateString();\n    }\n    \n    isRangeEnd(date) {\n        return this.rangeEnd && \n            date.toDateString() === this.rangeEnd.toDateString();\n    }\n    \n    selectDate(date) {\n        if (!this.rangeStart) {\n            this.rangeStart = date;\n        } else if (!this.rangeEnd && date > this.rangeStart) {\n            this.rangeEnd = date;\n        } else {\n            this.rangeStart = date;\n            this.rangeEnd = null;\n        }\n        \n        this.selectedDate = date;\n        this.render();\n    }\n}\n\nnew DatePicker();\n</script>",
                "hint": "Use Date object and grid layout for calendar",
                "points": 15,
                "explanation": "The custom date picker provides a rich interface for date selection with range support and special date highlighting. The calendar uses CSS Grid for layout and handles various date states.",
                "key_points": "- Date manipulation\n- Range selection\n- State management\n- CSS Grid layout"
            },
            {
                "id": "wh22",
                "category": "web_development",
                "title": "K-tech Somali: Dynamic Chart",
                "description": "Create a real-time line chart that updates with live data and supports zooming and panning.",
                "answer": "<style>\n.chart-container {\n    width: 800px;\n    height: 400px;\n    padding: 20px;\n    background: white;\n    border-radius: 8px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n.chart {\n    position: relative;\n    width: 100%;\n    height: 100%;\n}\n.chart-line {\n    fill: none;\n    stroke: #3498db;\n    stroke-width: 2;\n}\n.chart-area {\n    fill: rgba(52, 152, 219, 0.1);\n}\n.axis {\n    stroke: #ddd;\n    stroke-width: 1;\n}\n.axis-label {\n    font-size: 12px;\n    fill: #666;\n}\n.tooltip {\n    position: absolute;\n    background: rgba(0,0,0,0.8);\n    color: white;\n    padding: 5px 10px;\n    border-radius: 4px;\n    font-size: 12px;\n    pointer-events: none;\n    display: none;\n}\n.controls {\n    margin-top: 10px;\n    display: flex;\n    gap: 10px;\n}\n.control-btn {\n    padding: 5px 10px;\n    border: none;\n    background: #f0f0f0;\n    border-radius: 4px;\n    cursor: pointer;\n}\n</style>\n<div class=\"chart-container\">\n    <svg class=\"chart\" id=\"chart\">\n        <defs>\n            <clipPath id=\"chart-area\">\n                <rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\"></rect>\n            </clipPath>\n        </defs>\n        <g class=\"chart-content\" clip-path=\"url(#chart-area)\">\n            <path class=\"chart-area\"></path>\n            <path class=\"chart-line\"></path>\n        </g>\n    </svg>\n    <div class=\"tooltip\" id=\"tooltip\"></div>\n    <div class=\"controls\">\n        <button class=\"control-btn\" id=\"zoomIn\">Zoom In</button>\n        <button class=\"control-btn\" id=\"zoomOut\">Zoom Out</button>\n        <button class=\"control-btn\" id=\"reset\">Reset</button>\n    </div>\n</div>\n<script>\nclass DynamicChart {\n    constructor() {\n        this.svg = document.getElementById('chart');\n        this.tooltip = document.getElementById('tooltip');\n        this.data = [];\n        this.viewBox = { x: 0, y: 0, width: 800, height: 400 };\n        this.padding = { top: 20, right: 20, bottom: 30, left: 40 };\n        \n        this.setupControls();\n        this.setupDrag();\n        this.startDataGeneration();\n    }\n    \n    setupControls() {\n        document.getElementById('zoomIn').onclick = () => this.zoom(0.8);\n        document.getElementById('zoomOut').onclick = () => this.zoom(1.2);\n        document.getElementById('reset').onclick = () => this.reset();\n    }\n    \n    setupDrag() {\n        let isDragging = false;\n        let startX, startY;\n        \n        this.svg.onmousedown = (e) => {\n            isDragging = true;\n            startX = e.clientX - this.viewBox.x;\n            startY = e.clientY - this.viewBox.y;\n        };\n        \n        this.svg.onmousemove = (e) => {\n            if (!isDragging) return;\n            \n            this.viewBox.x = e.clientX - startX;\n            this.viewBox.y = e.clientY - startY;\n            this.updateViewBox();\n        };\n        \n        this.svg.onmouseup = () => isDragging = false;\n        this.svg.onmouseleave = () => isDragging = false;\n    }\n    \n    zoom(factor) {\n        const centerX = this.viewBox.x + this.viewBox.width / 2;\n        const centerY = this.viewBox.y + this.viewBox.height / 2;\n        \n        this.viewBox.width *= factor;\n        this.viewBox.height *= factor;\n        \n        this.viewBox.x = centerX - this.viewBox.width / 2;\n        this.viewBox.y = centerY - this.viewBox.height / 2;\n        \n        this.updateViewBox();\n    }\n    \n    reset() {\n        this.viewBox = { x: 0, y: 0, width: 800, height: 400 };\n        this.updateViewBox();\n    }\n    \n    updateViewBox() {\n        this.svg.setAttribute('viewBox', \n            `${this.viewBox.x} ${this.viewBox.y} ${this.viewBox.width} ${this.viewBox.height}`);\n    }\n    \n    startDataGeneration() {\n        setInterval(() => {\n            const now = Date.now();\n            const value = Math.random() * 100;\n            this.data.push({ time: now, value });\n            \n            if (this.data.length > 100) this.data.shift();\n            this.render();\n        }, 1000);\n    }\n    \n    render() {\n        const width = this.svg.clientWidth - this.padding.left - this.padding.right;\n        const height = this.svg.clientHeight - this.padding.top - this.padding.bottom;\n        \n        // Scale functions\n        const xScale = (x) => {\n            const domain = [this.data[0].time, this.data[this.data.length - 1].time];\n            return this.padding.left + (x - domain[0]) / (domain[1] - domain[0]) * width;\n        };\n        \n        const yScale = (y) => {\n            const domain = [0, Math.max(...this.data.map(d => d.value))];\n            return height - (y - domain[0]) / (domain[1] - domain[0]) * height + this.padding.top;\n        };\n        \n        // Generate line path\n        const linePath = this.data.map((d, i) => \n            `${i === 0 ? 'M' : 'L'} ${xScale(d.time)} ${yScale(d.value)}`\n        ).join(' ');\n        \n        // Generate area path\n        const areaPath = `${linePath} L ${xScale(this.data[this.data.length-1].time)} ${height + this.padding.top} L ${xScale(this.data[0].time)} ${height + this.padding.top} Z`;\n        \n        // Update paths\n        this.svg.querySelector('.chart-line').setAttribute('d', linePath);\n        this.svg.querySelector('.chart-area').setAttribute('d', areaPath);\n    }\n}\n\nnew DynamicChart();\n</script>",
                "hint": "Use SVG for drawing and requestAnimationFrame for smooth updates",
                "points": 15,
                "explanation": "The dynamic chart creates a real-time visualization of data with interactive features like zooming and panning. SVG is used for smooth rendering and scaling.",
                "key_points": "- SVG manipulation\n- Real-time updates\n- Interactive controls\n- Data visualization"
            },
            {
                "id": "wh23",
                "category": "web_development",
                "title": "K-tech Somali: Canvas Drawing App",
                "description": "Create a drawing application with brush size control, color picker, and undo/redo functionality.",
                "answer": "<style>\n.drawing-app {\n    width: 800px;\n    padding: 20px;\n    background: white;\n    border-radius: 8px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n.canvas-container {\n    position: relative;\n    margin-bottom: 20px;\n}\n#canvas {\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    cursor: crosshair;\n}\n.controls {\n    display: flex;\n    gap: 20px;\n    align-items: center;\n}\n.control-group {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n}\n.control-label {\n    font-size: 14px;\n    color: #666;\n}\n.brush-size {\n    width: 100px;\n}\n.color-picker {\n    width: 40px;\n    height: 40px;\n    padding: 0;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n}\n.action-btn {\n    padding: 8px 16px;\n    border: none;\n    border-radius: 4px;\n    background: #f0f0f0;\n    cursor: pointer;\n    transition: background 0.2s;\n}\n.action-btn:hover {\n    background: #e0e0e0;\n}\n.action-btn:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n}\n</style>\n<div class=\"drawing-app\">\n    <div class=\"canvas-container\">\n        <canvas id=\"canvas\" width=\"800\" height=\"600\"></canvas>\n    </div>\n    <div class=\"controls\">\n        <div class=\"control-group\">\n            <label class=\"control-label\">Brush Size:</label>\n            <input type=\"range\" class=\"brush-size\" id=\"brushSize\" min=\"1\" max=\"50\" value=\"5\">\n        </div>\n        <div class=\"control-group\">\n            <label class=\"control-label\">Color:</label>\n            <input type=\"color\" class=\"color-picker\" id=\"colorPicker\" value=\"#000000\">\n        </div>\n        <button class=\"action-btn\" id=\"undoBtn\" disabled>Undo</button>\n        <button class=\"action-btn\" id=\"redoBtn\" disabled>Redo</button>\n        <button class=\"action-btn\" id=\"clearBtn\">Clear</button>\n    </div>\n</div>\n<script>\nclass DrawingApp {\n    constructor() {\n        this.canvas = document.getElementById('canvas');\n        this.ctx = this.canvas.getContext('2d');\n        this.isDrawing = false;\n        this.brushSize = 5;\n        this.color = '#000000';\n        this.undoStack = [];\n        this.redoStack = [];\n        \n        this.init();\n    }\n    \n    init() {\n        // Setup canvas\n        this.ctx.lineCap = 'round';\n        this.ctx.lineJoin = 'round';\n        \n        // Save initial state\n        this.saveState();\n        \n        // Setup event listeners\n        this.setupEventListeners();\n    }\n    \n    setupEventListeners() {\n        // Drawing events\n        this.canvas.addEventListener('mousedown', this.startDrawing.bind(this));\n        this.canvas.addEventListener('mousemove', this.draw.bind(this));\n        this.canvas.addEventListener('mouseup', this.stopDrawing.bind(this));\n        this.canvas.addEventListener('mouseleave', this.stopDrawing.bind(this));\n        \n        // Control events\n        document.getElementById('brushSize').addEventListener('input', (e) => {\n            this.brushSize = e.target.value;\n        });\n        \n        document.getElementById('colorPicker').addEventListener('input', (e) => {\n            this.color = e.target.value;\n        });\n        \n        document.getElementById('undoBtn').addEventListener('click', () => this.undo());\n        document.getElementById('redoBtn').addEventListener('click', () => this.redo());\n        document.getElementById('clearBtn').addEventListener('click', () => this.clear());\n    }\n    \n    startDrawing(e) {\n        this.isDrawing = true;\n        this.ctx.beginPath();\n        const [x, y] = this.getMousePos(e);\n        this.ctx.moveTo(x, y);\n    }\n    \n    draw(e) {\n        if (!this.isDrawing) return;\n        \n        const [x, y] = this.getMousePos(e);\n        this.ctx.lineTo(x, y);\n        this.ctx.strokeStyle = this.color;\n        this.ctx.lineWidth = this.brushSize;\n        this.ctx.stroke();\n    }\n    \n    stopDrawing() {\n        if (this.isDrawing) {\n            this.isDrawing = false;\n            this.saveState();\n        }\n    }\n    \n    getMousePos(e) {\n        const rect = this.canvas.getBoundingClientRect();\n        return [\n            e.clientX - rect.left,\n            e.clientY - rect.top\n        ];\n    }\n    \n    saveState() {\n        this.undoStack.push(this.canvas.toDataURL());\n        this.redoStack = [];\n        this.updateButtons();\n    }\n    \n    undo() {\n        if (this.undoStack.length > 1) {\n            this.redoStack.push(this.undoStack.pop());\n            this.loadState(this.undoStack[this.undoStack.length - 1]);\n            this.updateButtons();\n        }\n    }\n    \n    redo() {\n        if (this.redoStack.length > 0) {\n            const state = this.redoStack.pop();\n            this.undoStack.push(state);\n            this.loadState(state);\n            this.updateButtons();\n        }\n    }\n    \n    loadState(state) {\n        const img = new Image();\n        img.src = state;\n        img.onload = () => {\n            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n            this.ctx.drawImage(img, 0, 0);\n        };\n    }\n    \n    clear() {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        this.saveState();\n    }\n    \n    updateButtons() {\n        document.getElementById('undoBtn').disabled = this.undoStack.length <= 1;\n        document.getElementById('redoBtn').disabled = this.redoStack.length === 0;\n    }\n}\n\nnew DrawingApp();\n</script>",
                "hint": "Use Canvas API and maintain state history for undo/redo",
                "points": 15,
                "explanation": "The drawing app uses the Canvas API for smooth drawing operations. It maintains a history of states for undo/redo functionality and provides controls for brush customization.",
                "key_points": "- Canvas API\n- State management\n- Event handling\n- Drawing tools"
            },
            {
                "id": "wh24",
                "category": "web_development",
                "title": "K-tech Somali: Kanban Board",
                "description": "Create a Kanban board with draggable tasks, multiple columns, and task editing functionality.",
                "answer": "<style>\n.kanban-board {\n    display: flex;\n    gap: 20px;\n    padding: 20px;\n    min-height: 500px;\n    background: #f8f9fa;\n    border-radius: 8px;\n    overflow-x: auto;\n}\n.column {\n    min-width: 300px;\n    background: #fff;\n    border-radius: 4px;\n    box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n}\n.column-header {\n    padding: 15px;\n    background: #f1f3f5;\n    border-radius: 4px 4px 0 0;\n    font-weight: bold;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n.task-count {\n    background: #e9ecef;\n    padding: 2px 8px;\n    border-radius: 12px;\n    font-size: 12px;\n}\n.task-list {\n    padding: 15px;\n    min-height: 100px;\n}\n.task {\n    background: white;\n    padding: 10px;\n    margin-bottom: 10px;\n    border-radius: 4px;\n    box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n    cursor: move;\n}\n.task.dragging {\n    opacity: 0.5;\n    transform: scale(0.95);\n}\n.task-title {\n    margin-bottom: 5px;\n    font-weight: bold;\n}\n.task-desc {\n    font-size: 12px;\n    color: #666;\n}\n.add-task {\n    margin: 15px;\n    padding: 8px;\n    background: none;\n    border: 2px dashed #dee2e6;\n    border-radius: 4px;\n    width: calc(100% - 30px);\n    color: #666;\n    cursor: pointer;\n}\n.task-form {\n    padding: 15px;\n    display: none;\n}\n.task-input {\n    width: 100%;\n    padding: 8px;\n    margin-bottom: 10px;\n    border: 1px solid #dee2e6;\n    border-radius: 4px;\n}\n.form-buttons {\n    display: flex;\n    gap: 10px;\n}\n.form-btn {\n    padding: 8px 16px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n}\n.save-btn {\n    background: #228be6;\n    color: white;\n}\n.cancel-btn {\n    background: #f1f3f5;\n}\n</style>\n<div class=\"kanban-board\" id=\"board\">\n    <div class=\"column\">\n        <div class=\"column-header\">\n            <span>To Do</span>\n            <span class=\"task-count\">0</span>\n        </div>\n        <div class=\"task-list\" data-column=\"todo\"></div>\n        <button class=\"add-task\" onclick=\"showForm(this)\">+ Add Task</button>\n        <div class=\"task-form\">\n            <input type=\"text\" class=\"task-input\" placeholder=\"Title\">\n            <textarea class=\"task-input\" placeholder=\"Description\"></textarea>\n            <div class=\"form-buttons\">\n                <button class=\"form-btn save-btn\" onclick=\"addTask(this)\">Save</button>\n                <button class=\"form-btn cancel-btn\" onclick=\"hideForm(this)\">Cancel</button>\n            </div>\n        </div>\n    </div>\n    <div class=\"column\">\n        <div class=\"column-header\">\n            <span>In Progress</span>\n            <span class=\"task-count\">0</span>\n        </div>\n        <div class=\"task-list\" data-column=\"progress\"></div>\n        <button class=\"add-task\" onclick=\"showForm(this)\">+ Add Task</button>\n        <div class=\"task-form\">\n            <input type=\"text\" class=\"task-input\" placeholder=\"Title\">\n            <textarea class=\"task-input\" placeholder=\"Description\"></textarea>\n            <div class=\"form-buttons\">\n                <button class=\"form-btn save-btn\" onclick=\"addTask(this)\">Save</button>\n                <button class=\"form-btn cancel-btn\" onclick=\"hideForm(this)\">Cancel</button>\n            </div>\n        </div>\n    </div>\n    <div class=\"column\">\n        <div class=\"column-header\">\n            <span>Done</span>\n            <span class=\"task-count\">0</span>\n        </div>\n        <div class=\"task-list\" data-column=\"done\"></div>\n        <button class=\"add-task\" onclick=\"showForm(this)\">+ Add Task</button>\n        <div class=\"task-form\">\n            <input type=\"text\" class=\"task-input\" placeholder=\"Title\">\n            <textarea class=\"task-input\" placeholder=\"Description\"></textarea>\n            <div class=\"form-buttons\">\n                <button class=\"form-btn save-btn\" onclick=\"addTask(this)\">Save</button>\n                <button class=\"form-btn cancel-btn\" onclick=\"hideForm(this)\">Cancel</button>\n            </div>\n        </div>\n    </div>\n</div>\n<script>\nclass KanbanBoard {\n    constructor() {\n        this.draggedTask = null;\n        this.setupDragAndDrop();\n        this.updateTaskCounts();\n    }\n    \n    setupDragAndDrop() {\n        document.querySelectorAll('.task-list').forEach(list => {\n            list.addEventListener('dragover', e => {\n                e.preventDefault();\n                const afterElement = this.getDragAfterElement(list, e.clientY);\n                const task = document.querySelector('.dragging');\n                if (afterElement) {\n                    list.insertBefore(task, afterElement);\n                } else {\n                    list.appendChild(task);\n                }\n            });\n        });\n    }\n    \n    getDragAfterElement(container, y) {\n        const draggableElements = [...container.querySelectorAll('.task:not(.dragging)')];\n        \n        return draggableElements.reduce((closest, child) => {\n            const box = child.getBoundingClientRect();\n            const offset = y - box.top - box.height / 2;\n            \n            if (offset < 0 && offset > closest.offset) {\n                return { offset: offset, element: child };\n            } else {\n                return closest;\n            }\n        }, { offset: Number.NEGATIVE_INFINITY }).element;\n    }\n    \n    createTask(title, description) {\n        const task = document.createElement('div');\n        task.className = 'task';\n        task.draggable = true;\n        task.innerHTML = `\n            <div class=\"task-title\">${title}</div>\n            <div class=\"task-desc\">${description}</div>\n        `;\n        \n        task.addEventListener('dragstart', () => {\n            task.classList.add('dragging');\n        });\n        \n        task.addEventListener('dragend', () => {\n            task.classList.remove('dragging');\n            this.updateTaskCounts();\n        });\n        \n        return task;\n    }\n    \n    updateTaskCounts() {\n        document.querySelectorAll('.column').forEach(column => {\n            const count = column.querySelector('.task-list').children.length;\n            column.querySelector('.task-count').textContent = count;\n        });\n    }\n}\n\nconst board = new KanbanBoard();\n\nfunction showForm(button) {\n    const form = button.nextElementSibling;\n    button.style.display = 'none';\n    form.style.display = 'block';\n}\n\nfunction hideForm(button) {\n    const form = button.closest('.task-form');\n    const addButton = form.previousElementSibling;\n    form.style.display = 'none';\n    addButton.style.display = 'block';\n}\n\nfunction addTask(button) {\n    const form = button.closest('.task-form');\n    const title = form.querySelector('input').value;\n    const description = form.querySelector('textarea').value;\n    \n    if (title.trim()) {\n        const task = board.createTask(title, description);\n        const list = form.closest('.column').querySelector('.task-list');\n        list.appendChild(task);\n        board.updateTaskCounts();\n        \n        // Reset form\n        form.querySelector('input').value = '';\n        form.querySelector('textarea').value = '';\n        hideForm(button);\n    }\n}\n</script>",
                "hint": "Use HTML5 Drag and Drop API with task state management",
                "points": 15,
                "explanation": "The Kanban board implements drag and drop functionality for task management. It includes features for adding new tasks, moving them between columns, and tracking task counts.",
                "key_points": "- Drag and Drop API\n- Task management\n- Column organization\n- State tracking"
            },
            {
                "id": "wh25",
                "category": "web_development",
                "title": "K-tech Somali: Image Editor",
                "description": "Create a basic image editor with filters, rotation, and cropping functionality.",
                "answer": "<style>\n.editor-container {\n    max-width: 1000px;\n    padding: 20px;\n    background: white;\n    border-radius: 8px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n.editor-main {\n    display: flex;\n    gap: 20px;\n}\n.canvas-container {\n    flex: 1;\n    position: relative;\n}\n#canvas {\n    max-width: 100%;\n    border: 1px solid #ddd;\n}\n.crop-overlay {\n    position: absolute;\n    border: 2px dashed #fff;\n    background: rgba(0,0,0,0.5);\n    cursor: move;\n    display: none;\n}\n.crop-handle {\n    width: 10px;\n    height: 10px;\n    background: white;\n    border: 1px solid #666;\n    position: absolute;\n}\n.controls {\n    width: 250px;\n    padding: 20px;\n    background: #f8f9fa;\n    border-radius: 4px;\n}\n.control-group {\n    margin-bottom: 20px;\n}\n.control-label {\n    display: block;\n    margin-bottom: 8px;\n    font-weight: bold;\n}\n.control-input {\n    width: 100%;\n    margin-bottom: 10px;\n}\n.btn {\n    width: 100%;\n    padding: 8px;\n    margin-bottom: 8px;\n    border: none;\n    border-radius: 4px;\n    background: #228be6;\n    color: white;\n    cursor: pointer;\n}\n.btn:hover {\n    background: #1c7ed6;\n}\n.btn.secondary {\n    background: #868e96;\n}\n.filter-preset {\n    display: inline-block;\n    width: calc(33.33% - 4px);\n    margin: 2px;\n    padding: 8px;\n    text-align: center;\n    border: 1px solid #dee2e6;\n    border-radius: 4px;\n    cursor: pointer;\n}\n.filter-preset:hover {\n    background: #f1f3f5;\n}\n</style>\n<div class=\"editor-container\">\n    <div class=\"editor-main\">\n        <div class=\"canvas-container\">\n            <canvas id=\"canvas\"></canvas>\n            <div class=\"crop-overlay\">\n                <div class=\"crop-handle\" data-handle=\"nw\"></div>\n                <div class=\"crop-handle\" data-handle=\"ne\"></div>\n                <div class=\"crop-handle\" data-handle=\"sw\"></div>\n                <div class=\"crop-handle\" data-handle=\"se\"></div>\n            </div>\n        </div>\n        <div class=\"controls\">\n            <div class=\"control-group\">\n                <label class=\"control-label\">Upload Image</label>\n                <input type=\"file\" accept=\"image/*\" onchange=\"loadImage(event)\">\n            </div>\n            <div class=\"control-group\">\n                <label class=\"control-label\">Filters</label>\n                <div class=\"filter-presets\">\n                    <div class=\"filter-preset\" onclick=\"applyFilter('normal')\">Normal</div>\n                    <div class=\"filter-preset\" onclick=\"applyFilter('grayscale')\">Grayscale</div>\n                    <div class=\"filter-preset\" onclick=\"applyFilter('sepia')\">Sepia</div>\n                    <div class=\"filter-preset\" onclick=\"applyFilter('invert')\">Invert</div>\n                    <div class=\"filter-preset\" onclick=\"applyFilter('blur')\">Blur</div>\n                    <div class=\"filter-preset\" onclick=\"applyFilter('sharpen')\">Sharpen</div>\n                </div>\n            </div>\n            <div class=\"control-group\">\n                <label class=\"control-label\">Adjustments</label>\n                <label>Brightness</label>\n                <input type=\"range\" class=\"control-input\" min=\"-100\" max=\"100\" value=\"0\" onchange=\"adjustImage('brightness', this.value)\">\n                <label>Contrast</label>\n                <input type=\"range\" class=\"control-input\" min=\"-100\" max=\"100\" value=\"0\" onchange=\"adjustImage('contrast', this.value)\">\n                <label>Saturation</label>\n                <input type=\"range\" class=\"control-input\" min=\"-100\" max=\"100\" value=\"0\" onchange=\"adjustImage('saturation', this.value)\">\n            </div>\n            <div class=\"control-group\">\n                <label class=\"control-label\">Transform</label>\n                <button class=\"btn\" onclick=\"rotateImage(-90)\">Rotate Left</button>\n                <button class=\"btn\" onclick=\"rotateImage(90)\">Rotate Right</button>\n                <button class=\"btn\" onclick=\"flipImage('horizontal')\">Flip Horizontal</button>\n                <button class=\"btn\" onclick=\"flipImage('vertical')\">Flip Vertical</button>\n            </div>\n            <div class=\"control-group\">\n                <label class=\"control-label\">Crop</label>\n                <button class=\"btn\" onclick=\"startCrop()\">Start Crop</button>\n                <button class=\"btn\" onclick=\"applyCrop()\">Apply Crop</button>\n                <button class=\"btn secondary\" onclick=\"cancelCrop()\">Cancel Crop</button>\n            </div>\n            <button class=\"btn\" onclick=\"downloadImage()\">Download Image</button>\n        </div>\n    </div>\n</div>\n<script>\nclass ImageEditor {\n    constructor() {\n        this.canvas = document.getElementById('canvas');\n        this.ctx = this.canvas.getContext('2d');\n        this.image = null;\n        this.cropMode = false;\n        this.cropStart = { x: 0, y: 0 };\n        this.cropSize = { width: 0, height: 0 };\n        this.setupCropHandlers();\n    }\n    \n    loadImage(file) {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            const img = new Image();\n            img.onload = () => {\n                this.image = img;\n                this.resetCanvas();\n                this.drawImage();\n            };\n            img.src = e.target.result;\n        };\n        reader.readAsDataURL(file);\n    }\n    \n    resetCanvas() {\n        this.canvas.width = this.image.width;\n        this.canvas.height = this.image.height;\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n    \n    drawImage() {\n        this.ctx.drawImage(this.image, 0, 0);\n    }\n    \n    applyFilter(type) {\n        if (!this.image) return;\n        \n        this.resetCanvas();\n        this.ctx.drawImage(this.image, 0, 0);\n        \n        const imageData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);\n        const data = imageData.data;\n        \n        switch(type) {\n            case 'grayscale':\n                for (let i = 0; i < data.length; i += 4) {\n                    const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;\n                    data[i] = avg;\n                    data[i + 1] = avg;\n                    data[i + 2] = avg;\n                }\n                break;\n            case 'sepia':\n                for (let i = 0; i < data.length; i += 4) {\n                    const r = data[i];\n                    const g = data[i + 1];\n                    const b = data[i + 2];\n                    data[i] = (r * 0.393) + (g * 0.769) + (b * 0.189);\n                    data[i + 1] = (r * 0.349) + (g * 0.686) + (b * 0.168);\n                    data[i + 2] = (r * 0.272) + (g * 0.534) + (b * 0.131);\n                }\n                break;\n            case 'invert':\n                for (let i = 0; i < data.length; i += 4) {\n                    data[i] = 255 - data[i];\n                    data[i + 1] = 255 - data[i + 1];\n                    data[i + 2] = 255 - data[i + 2];\n                }\n                break;\n        }\n        \n        this.ctx.putImageData(imageData, 0, 0);\n    }\n    \n    adjustImage(property, value) {\n        if (!this.image) return;\n        \n        this.resetCanvas();\n        this.ctx.drawImage(this.image, 0, 0);\n        \n        const imageData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);\n        const data = imageData.data;\n        const factor = 1 + value / 100;\n        \n        for (let i = 0; i < data.length; i += 4) {\n            switch(property) {\n                case 'brightness':\n                    data[i] *= factor;\n                    data[i + 1] *= factor;\n                    data[i + 2] *= factor;\n                    break;\n                case 'contrast':\n                    data[i] = ((data[i] - 128) * factor) + 128;\n                    data[i + 1] = ((data[i + 1] - 128) * factor) + 128;\n                    data[i + 2] = ((data[i + 2] - 128) * factor) + 128;\n                    break;\n            }\n        }\n        \n        this.ctx.putImageData(imageData, 0, 0);\n    }\n    \n    rotateImage(degrees) {\n        if (!this.image) return;\n        \n        const radian = degrees * Math.PI / 180;\n        const sin = Math.sin(radian);\n        const cos = Math.cos(radian);\n        \n        const newWidth = Math.abs(this.canvas.width * cos) + Math.abs(this.canvas.height * sin);\n        const newHeight = Math.abs(this.canvas.width * sin) + Math.abs(this.canvas.height * cos);\n        \n        const tempCanvas = document.createElement('canvas');\n        tempCanvas.width = newWidth;\n        tempCanvas.height = newHeight;\n        const tempCtx = tempCanvas.getContext('2d');\n        \n        tempCtx.translate(newWidth/2, newHeight/2);\n        tempCtx.rotate(radian);\n        tempCtx.drawImage(this.canvas, -this.canvas.width/2, -this.canvas.height/2);\n        \n        this.canvas.width = newWidth;\n        this.canvas.height = newHeight;\n        this.ctx.drawImage(tempCanvas, 0, 0);\n    }\n    \n    flipImage(direction) {\n        if (!this.image) return;\n        \n        const tempCanvas = document.createElement('canvas');\n        tempCanvas.width = this.canvas.width;\n        tempCanvas.height = this.canvas.height;\n        const tempCtx = tempCanvas.getContext('2d');\n        \n        if (direction === 'horizontal') {\n            tempCtx.scale(-1, 1);\n            tempCtx.drawImage(this.canvas, -this.canvas.width, 0);\n        } else {\n            tempCtx.scale(1, -1);\n            tempCtx.drawImage(this.canvas, 0, -this.canvas.height);\n        }\n        \n        this.ctx.drawImage(tempCanvas, 0, 0);\n    }\n    \n    setupCropHandlers() {\n        const overlay = document.querySelector('.crop-overlay');\n        let isDragging = false;\n        let currentHandle = null;\n        \n        overlay.addEventListener('mousedown', (e) => {\n            isDragging = true;\n            currentHandle = e.target.dataset.handle;\n        });\n        \n        document.addEventListener('mousemove', (e) => {\n            if (!isDragging) return;\n            \n            const rect = this.canvas.getBoundingClientRect();\n            const x = e.clientX - rect.left;\n            const y = e.clientY - rect.top;\n            \n            if (currentHandle) {\n                // Resize from handle\n                switch(currentHandle) {\n                    case 'nw':\n                        this.cropSize.width += this.cropStart.x - x;\n                        this.cropSize.height += this.cropStart.y - y;\n                        this.cropStart.x = x;\n                        this.cropStart.y = y;\n                        break;\n                    case 'ne':\n                        this.cropSize.width = x - this.cropStart.x;\n                        this.cropSize.height += this.cropStart.y - y;\n                        this.cropStart.y = y;\n                        break;\n                    case 'sw':\n                        this.cropSize.width += this.cropStart.x - x;\n                        this.cropSize.height = y - this.cropStart.y;\n                        this.cropStart.x = x;\n                        break;\n                    case 'se':\n                        this.cropSize.width = x - this.cropStart.x;\n                        this.cropSize.height = y - this.cropStart.y;\n                        break;\n                }\n            } else {\n                // Move entire overlay\n                this.cropStart.x = x - this.cropSize.width / 2;\n                this.cropStart.y = y - this.cropSize.height / 2;\n            }\n            \n            this.updateCropOverlay();\n        });\n        \n        document.addEventListener('mouseup', () => {\n            isDragging = false;\n            currentHandle = null;\n        });\n    }\n    \n    startCrop() {\n        if (!this.image) return;\n        \n        this.cropMode = true;\n        this.cropStart = {\n            x: this.canvas.width * 0.1,\n            y: this.canvas.height * 0.1\n        };\n        this.cropSize = {\n            width: this.canvas.width * 0.8,\n            height: this.canvas.height * 0.8\n        };\n        \n        this.updateCropOverlay();\n        document.querySelector('.crop-overlay').style.display = 'block';\n    }\n    \n    updateCropOverlay() {\n        const overlay = document.querySelector('.crop-overlay');\n        overlay.style.left = this.cropStart.x + 'px';\n        overlay.style.top = this.cropStart.y + 'px';\n        overlay.style.width = this.cropSize.width + 'px';\n        overlay.style.height = this.cropSize.height + 'px';\n    }\n    \n    applyCrop() {\n        if (!this.cropMode) return;\n        \n        const tempCanvas = document.createElement('canvas');\n        tempCanvas.width = this.cropSize.width;\n        tempCanvas.height = this.cropSize.height;\n        const tempCtx = tempCanvas.getContext('2d');\n        \n        tempCtx.drawImage(\n            this.canvas,\n            this.cropStart.x, this.cropStart.y,\n            this.cropSize.width, this.cropSize.height,\n            0, 0,\n            this.cropSize.width, this.cropSize.height\n        );\n        \n        this.canvas.width = this.cropSize.width;\n        this.canvas.height = this.cropSize.height;\n        this.ctx.drawImage(tempCanvas, 0, 0);\n        \n        this.cancelCrop();\n    }\n    \n    cancelCrop() {\n        this.cropMode = false;\n        document.querySelector('.crop-overlay').style.display = 'none';\n    }\n    \n    downloadImage() {\n        if (!this.image) return;\n        \n        const link = document.createElement('a');\n        link.download = 'edited-image.png';\n        link.href = this.canvas.toDataURL();\n        link.click();\n    }\n}\n\nconst editor = new ImageEditor();\n\nfunction loadImage(event) {\n    editor.loadImage(event.target.files[0]);\n}\n\nfunction applyFilter(type) {\n    editor.applyFilter(type);\n}\n\nfunction adjustImage(property, value) {\n    editor.adjustImage(property, value);\n}\n\nfunction rotateImage(degrees) {\n    editor.rotateImage(degrees);\n}\n\nfunction flipImage(direction) {\n    editor.flipImage(direction);\n}\n\nfunction startCrop() {\n    editor.startCrop();\n}\n\nfunction applyCrop() {\n    editor.applyCrop();\n}\n\nfunction cancelCrop() {\n    editor.cancelCrop();\n}\n\nfunction downloadImage() {\n    editor.downloadImage();\n}\n</script>",
                "hint": "Use Canvas API for image manipulation and maintain original image state",
                "points": 15,
                "explanation": "The image editor provides basic image manipulation features using the Canvas API. It includes filters, adjustments, transformations, and cropping functionality.",
                "key_points": "- Canvas API\n- Image processing\n- User interface\n- File handling"
            }
        
        ]    
    },
    "security": {
        "easy": [
            {
                "id": "s1",
                "category": "security",
                "title": "K-tech Somali: Password Security",
                "description": "What is the minimum recommended length for a secure password?",
                "answer": "12",
                "hint": "Modern security standards recommend passwords longer than 8 characters",
                "points": 5,
                "explanation": "A minimum of 12 characters is recommended for secure passwords to resist brute force attacks.",
                "key_points": "- Password length\n- Security standards\n- Brute force protection"
            }
        ],
        "medium": [
            {
                "id": "sm1",
                "category": "security",
                "title": "K-tech Somali: SQL Injection Prevention",
                "description": "What Python code pattern should you use to prevent SQL injection when inserting user input into a query?",
                "answer": "cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))",
                "hint": "Use parameterized queries with placeholders",
                "points": 10,
                "explanation": "Parameterized queries prevent SQL injection by properly escaping user input.",
                "key_points": "- SQL injection\n- Parameterized queries\n- Input sanitization"
            },
            {
                "id": "sm2",
                "category": "security",
                "title": "K-tech Somali: XSS Prevention",
                "description": "What HTML function should you use to safely display user input on a webpage to prevent XSS?",
                "answer": "html.escape(user_input)",
                "hint": "Use Python's html module",
                "points": 10,
                "explanation": "The html.escape() function converts special characters to their HTML entities.",
                "key_points": "- XSS prevention\n- HTML escaping\n- Input sanitization"
            }
        ],
        "hard": [
            {
                "id": "sh1",
                "category": "security",
                "title": "K-tech Somali: Password Hashing",
                "description": "Implement secure password hashing using bcrypt with salt generation and verification.",
                "answer": "import bcrypt\n\ndef hash_password(password):\n    salt = bcrypt.gensalt()\n    return bcrypt.hashpw(password.encode(), salt)\n\ndef verify_password(password, hashed):\n    return bcrypt.checkpw(password.encode(), hashed)",
                "hint": "Use bcrypt's gensalt and hashpw functions",
                "points": 15,
                "explanation": "Secure password storage requires proper hashing with salt to prevent rainbow table attacks.",
                "key_points": "- Password hashing\n- Salt generation\n- Secure storage"
            },
            {
                "id": "sh2",
                "category": "security",
                "title": "K-tech Somali: JWT Implementation",
                "description": "Create functions to generate and verify JWT tokens with expiration time.",
                "answer": "import jwt\nfrom datetime import datetime, timedelta\n\ndef create_token(user_id, secret_key, expires_in=3600):\n    payload = {\n        'user_id': user_id,\n        'exp': datetime.utcnow() + timedelta(seconds=expires_in)\n    }\n    return jwt.encode(payload, secret_key, algorithm='HS256')\n\ndef verify_token(token, secret_key):\n    try:\n        return jwt.decode(token, secret_key, algorithms=['HS256'])\n    except jwt.ExpiredSignatureError:\n        return None",
                "hint": "Use PyJWT library with expiration claims",
                "points": 15,
                "explanation": "JWTs provide secure way to transmit information between parties as a JSON object.",
                "key_points": "- JWT tokens\n- Token expiration\n- Signature verification"
            }
        ]
    },
    "networking": {
        "easy": [
            {
                "id": "n1",
                "category": "networking",
                "title": "K-tech Somali: Basic IP Addressing",
                "description": "What is the default subnet mask for a Class C IP address?",
                "answer": "255.255.255.0",
                "hint": "Class C networks use 24 bits for the network portion",
                "points": 5,
                "explanation": "Class C networks use a /24 subnet mask, which is 255.255.255.0 in decimal notation.",
                "key_points": "- IP addressing\n- Subnet masks\n- Network classes"
            }
        ],
        "medium": [
            {
                "id": "nm1",
                "category": "networking",
                "title": "K-tech Somali: TCP Socket",
                "description": "Write Python code to create a TCP socket and bind it to localhost port 8080.",
                "answer": "import socket\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.bind(('localhost', 8080))",
                "hint": "Use socket module with AF_INET and SOCK_STREAM",
                "points": 10,
                "explanation": "TCP sockets are created using the socket module with appropriate address family and socket type.",
                "key_points": "- Socket programming\n- TCP protocol\n- Port binding"
            },
            {
                "id": "nm2",
                "category": "networking",
                "title": "K-tech Somali: HTTP Request",
                "description": "Write Python code to make an HTTP GET request to 'http://api.example.com' using the requests library.",
                "answer": "import requests\nresponse = requests.get('http://api.example.com')",
                "hint": "Use the requests library's get method",
                "points": 10,
                "explanation": "The requests library simplifies making HTTP requests in Python.",
                "key_points": "- HTTP requests\n- REST APIs\n- Response handling"
            }
        ],
        "hard": [
            {
                "id": "nh1",
                "category": "networking",
                "title": "K-tech Somali: Async Server",
                "description": "Create an asynchronous TCP server using asyncio that can handle multiple clients simultaneously.",
                "answer": "import asyncio\n\nasync def handle_client(reader, writer):\n    while True:\n        data = await reader.read(100)\n        if not data:\n            break\n        writer.write(data)\n        await writer.drain()\n    writer.close()\n\nasync def main():\n    server = await asyncio.start_server(\n        handle_client, '127.0.0.1', 8888)\n    async with server:\n        await server.serve_forever()\n\nasyncio.run(main())",
                "hint": "Use asyncio.start_server with async/await",
                "points": 15,
                "explanation": "Asynchronous servers can handle multiple connections efficiently using event loops.",
                "key_points": "- Async/await\n- TCP server\n- Event loop"
            },
            {
                "id": "nh2",
                "category": "networking",
                "title": "K-tech Somali: WebSocket Client",
                "description": "Implement a WebSocket client that connects to a server and handles messages asynchronously.",
                "answer": "import asyncio\nimport websockets\n\nasync def websocket_client():\n    async with websockets.connect('ws://localhost:8765') as ws:\n        while True:\n            try:\n                message = await ws.recv()\n                print(f'Received: {message}')\n                await ws.send('Response')\n            except websockets.ConnectionClosed:\n                break\n\nasyncio.get_event_loop().run_until_complete(websocket_client())",
                "hint": "Use websockets library with async/await",
                "points": 15,
                "explanation": "WebSocket provides full-duplex communication channels over a single TCP connection.",
                "key_points": "- WebSocket protocol\n- Async communication\n- Event handling"
            }
        ]
    },
    "databases": {
        "easy": [
            {
                "id": "d1",
                "category": "databases",
                "title": "K-tech Somali: Basic SQL Query",
                "description": "Write a SQL query to select all columns from a table named 'users'.",
                "answer": "SELECT * FROM users",
                "hint": "Use SELECT with * to get all columns",
                "points": 5,
                "explanation": "The asterisk (*) is used to select all columns, and FROM specifies the table name.",
                "key_points": "- SQL basics\n- SELECT statement\n- Table querying"
            }
        ],
        "medium": [
            {
                "id": "dm1",
                "category": "databases",
                "title": "K-tech Somali: JOIN Query",
                "description": "Write a SQL query to join 'users' and 'orders' tables on user_id and select user name and order date.",
                "answer": "SELECT users.name, orders.order_date FROM users JOIN orders ON users.id = orders.user_id",
                "hint": "Use JOIN with ON clause to specify the join condition",
                "points": 10,
                "explanation": "JOIN combines rows from two tables based on a related column between them.",
                "key_points": "- SQL joins\n- Table relationships\n- Column selection"
            },
            {
                "id": "dm2",
                "category": "databases",
                "title": "K-tech Somali: GROUP BY",
                "description": "Write a SQL query to count the number of orders per user from the 'orders' table.",
                "answer": "SELECT user_id, COUNT(*) as order_count FROM orders GROUP BY user_id",
                "hint": "Use GROUP BY with COUNT aggregate function",
                "points": 10,
                "explanation": "GROUP BY groups rows that have the same values and can be used with aggregate functions.",
                "key_points": "- Aggregation\n- Grouping\n- Counting records"
            }
        ],
        "hard": [
            {
                "id": "dh1",
                "category": "databases",
                "title": "K-tech Somali: Transaction Management",
                "description": "Implement a function that performs a money transfer between accounts using SQL transactions with proper error handling.",
                "answer": "def transfer_money(conn, from_account, to_account, amount):\n    try:\n        with conn.cursor() as cur:\n            conn.begin()\n            cur.execute('UPDATE accounts SET balance = balance - %s WHERE id = %s AND balance >= %s',\n                        (amount, from_account, amount))\n            if cur.rowcount == 0:\n                raise Exception('Insufficient funds')\n            cur.execute('UPDATE accounts SET balance = balance + %s WHERE id = %s',\n                        (amount, to_account))\n            conn.commit()\n    except Exception as e:\n        conn.rollback()\n        raise e",
                "hint": "Use transaction begin/commit/rollback with proper error handling",
                "points": 15,
                "explanation": "Transactions ensure data consistency by grouping operations that must succeed or fail together.",
                "key_points": "- Transactions\n- Error handling\n- Data consistency"
            },
            {
                "id": "dh2",
                "category": "databases",
                "title": "K-tech Somali: Database Migration",
                "description": "Create a database migration system that can upgrade and downgrade schema versions.",
                "answer": "class Migration:\n    def __init__(self, conn):\n        self.conn = conn\n        self.cur = conn.cursor()\n        self.cur.execute(\n            'CREATE TABLE IF NOT EXISTS migrations '\n            '(version INT PRIMARY KEY, applied_at TIMESTAMP)'\n        )\n    \n    def upgrade(self, version, sql_up):\n        try:\n            self.cur.execute(sql_up)\n            self.cur.execute(\n                'INSERT INTO migrations VALUES (%s, NOW())',\n                (version,)\n            )\n            self.conn.commit()\n        except Exception as e:\n            self.conn.rollback()\n            raise e\n    \n    def downgrade(self, version, sql_down):\n        try:\n            self.cur.execute(sql_down)\n            self.cur.execute(\n                'DELETE FROM migrations WHERE version = %s',\n                (version,)\n            )\n            self.conn.commit()\n        except Exception as e:\n            self.conn.rollback()\n            raise e",
                "hint": "Track migration versions in a separate table",
                "points": 15,
                "explanation": "Database migrations allow tracking and managing database schema changes over time.",
                "key_points": "- Schema versioning\n- Migration tracking\n- Version control"
            }
        ]
    },
    "algorithms": {
        "easy": [
            {
                "id": "a1",
                "category": "algorithms",
                "title": "K-tech Somali: Time Complexity",
                "description": "What is the time complexity of a simple linear search in Big O notation?",
                "answer": "O(n)",
                "hint": "Consider how many operations are needed for n elements",
                "points": 5,
                "explanation": "Linear search needs to check each element once, making it directly proportional to the input size.",
                "key_points": "- Time complexity\n- Linear search\n- Big O notation"
            }
        ],
        "medium": [
            {
                "id": "am1",
                "category": "algorithms",
                "title": "K-tech Somali: Binary Search",
                "description": "Implement binary search to find a number in a sorted list.",
                "answer": "def binary_search(arr, x):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x: return mid\n        elif arr[mid] < x: left = mid + 1\n        else: right = mid - 1\n    return -1",
                "hint": "Use two pointers and divide the search space in half each time",
                "points": 10,
                "explanation": "Binary search efficiently finds an element by repeatedly dividing the search space in half.",
                "key_points": "- Binary search\n- Sorted arrays\n- Divide and conquer"
            },
            {
                "id": "am2",
                "category": "algorithms",
                "title": "K-tech Somali: Bubble Sort",
                "description": "Implement bubble sort to sort a list in ascending order.",
                "answer": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr",
                "hint": "Compare adjacent elements and swap if they are in wrong order",
                "points": 10,
                "explanation": "Bubble sort repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order.",
                "key_points": "- Sorting algorithm\n- In-place sorting\n- Comparison sort"
            }
        ],
        "hard": [
            {
                "id": "ah1",
                "category": "algorithms",
                "title": "K-tech Somali: Graph Traversal",
                "description": "Implement Depth-First Search (DFS) for a graph represented as an adjacency list.",
                "answer": "def dfs(graph, start, visited=None):\n    if visited is None:\n        visited = set()\n    visited.add(start)\n    print(start, end=' ')\n    \n    for next_vertex in graph[start]:\n        if next_vertex not in visited:\n            dfs(graph, next_vertex, visited)\n    return visited",
                "hint": "Use recursion and a visited set to track explored vertices",
                "points": 15,
                "explanation": "DFS explores as far as possible along each branch before backtracking.",
                "key_points": "- Graph traversal\n- Recursion\n- Visited tracking"
            },
            {
                "id": "ah2",
                "category": "algorithms",
                "title": "K-tech Somali: Dynamic Programming",
                "description": "Implement a solution to the Knapsack problem using dynamic programming.",
                "answer": "def knapsack(values, weights, capacity):\n    n = len(values)\n    dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for w in range(capacity + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(values[i-1] + dp[i-1][w-weights[i-1]],\n                               dp[i-1][w])\n            else:\n                dp[i][w] = dp[i-1][w]\n    \n    return dp[n][capacity]",
                "hint": "Use a 2D array to store subproblem solutions",
                "points": 15,
                "explanation": "Dynamic programming solves complex problems by breaking them down into simpler subproblems.",
                "key_points": "- Dynamic programming\n- Optimization\n- Subproblem solutions"
            }
        ]
    }
} 